# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, The Hugging Face Team, Licenced under the Apache
# License, Version 2.0
# This file is distributed under the same license as the transformers
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: transformers \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-10 04:49+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/model_doc/marian.rst:14
msgid "MarianMT"
msgstr ""

#: ../../source/model_doc/marian.rst:16
msgid ""
"**Bugs:** If you see something strange, file a `Github Issue "
"<https://github.com/huggingface/transformers/issues/new?assignees=sshleifer&labels=&template"
"=bug-report.md&title>`__ and assign @patrickvonplaten."
msgstr ""

#: ../../source/model_doc/marian.rst:20
msgid ""
"Translations should be similar, but not identical to output in the test "
"set linked to in each model card."
msgstr ""

#: ../../source/model_doc/marian.rst:23
msgid "Implementation Notes"
msgstr ""

#: ../../source/model_doc/marian.rst:25
msgid "Each model is about 298 MB on disk, there are more than 1,000 models."
msgstr ""

#: ../../source/model_doc/marian.rst:26
msgid ""
"The list of supported language pairs can be found `here "
"<https://huggingface.co/Helsinki-NLP>`__."
msgstr ""

#: ../../source/model_doc/marian.rst:27
msgid ""
"Models were originally trained by `JÃ¶rg Tiedemann "
"<https://researchportal.helsinki.fi/en/persons/j%C3%B6rg-tiedemann>`__ "
"using the `Marian <https://marian-nmt.github.io/>`__ C++ library, which "
"supports fast training and translation."
msgstr ""

#: ../../source/model_doc/marian.rst:30
msgid ""
"All models are transformer encoder-decoders with 6 layers in each "
"component. Each model's performance is documented in a model card."
msgstr ""

#: ../../source/model_doc/marian.rst:32
msgid "The 80 opus models that require BPE preprocessing are not supported."
msgstr ""

#: ../../source/model_doc/marian.rst:33
msgid ""
"The modeling code is the same as "
":class:`~transformers.BartForConditionalGeneration` with a few minor "
"modifications:"
msgstr ""

#: ../../source/model_doc/marian.rst:35
msgid ""
"static (sinusoid) positional embeddings "
"(:obj:`MarianConfig.static_position_embeddings=True`)"
msgstr ""

#: ../../source/model_doc/marian.rst:36
msgid "no layernorm_embedding (:obj:`MarianConfig.normalize_embedding=False`)"
msgstr ""

#: ../../source/model_doc/marian.rst:37
msgid ""
"the model starts generating with :obj:`pad_token_id` (which has 0 as a "
"token_embedding) as the prefix (Bart uses :obj:`<s/>`),"
msgstr ""

#: ../../source/model_doc/marian.rst:39
msgid ""
"Code to bulk convert models can be found in "
"``convert_marian_to_pytorch.py``."
msgstr ""

#: ../../source/model_doc/marian.rst:40
msgid ""
"This model was contributed by `sshleifer "
"<https://huggingface.co/sshleifer>`__."
msgstr ""

#: ../../source/model_doc/marian.rst:43
msgid "Naming"
msgstr ""

#: ../../source/model_doc/marian.rst:45
msgid ""
"All model names use the following format: :obj:`Helsinki-NLP/opus-"
"mt-{src}-{tgt}`"
msgstr ""

#: ../../source/model_doc/marian.rst:46
msgid ""
"The language codes used to name models are inconsistent. Two digit codes "
"can usually be found `here <https://developers.google.com/admin-"
"sdk/directory/v1/languages>`__, three digit codes require googling "
"\"language code {code}\"."
msgstr ""

#: ../../source/model_doc/marian.rst:49
msgid ""
"Codes formatted like :obj:`es_AR` are usually :obj:`code_{region}`. That "
"one is Spanish from Argentina."
msgstr ""

#: ../../source/model_doc/marian.rst:50
msgid ""
"The models were converted in two stages. The first 1000 models use "
"ISO-639-2 codes to identify languages, the second group use a combination"
" of ISO-639-5 codes and ISO-639-2 codes."
msgstr ""

#: ../../source/model_doc/marian.rst:55
msgid "Examples"
msgstr ""

#: ../../source/model_doc/marian.rst:57
msgid ""
"Since Marian models are smaller than many other translation models "
"available in the library, they can be useful for fine-tuning experiments "
"and integration tests."
msgstr ""

#: ../../source/model_doc/marian.rst:59
msgid ""
"`Fine-tune on GPU "
"<https://github.com/huggingface/transformers/blob/master/examples/research_projects"
"/seq2seq-distillation/train_distil_marian_enro_teacher.sh>`__"
msgstr ""

#: ../../source/model_doc/marian.rst:61
msgid ""
"`Fine-tune on GPU with pytorch-lightning "
"<https://github.com/huggingface/transformers/blob/master/examples/research_projects"
"/seq2seq-distillation/train_distil_marian_no_teacher.sh>`__"
msgstr ""

#: ../../source/model_doc/marian.rst:65
msgid "Multilingual Models"
msgstr ""

#: ../../source/model_doc/marian.rst:67
msgid ""
"All model names use the following format: :obj:`Helsinki-NLP/opus-"
"mt-{src}-{tgt}`:"
msgstr ""

#: ../../source/model_doc/marian.rst:68
msgid ""
"If a model can output multiple languages, and you should specify a "
"language code by prepending the desired output language to the "
":obj:`src_text`."
msgstr ""

#: ../../source/model_doc/marian.rst:70
msgid ""
"You can see a models's supported language codes in its model card, under "
"target constituents, like in `opus-mt-en-roa <https://huggingface.co"
"/Helsinki-NLP/opus-mt-en-roa>`__."
msgstr ""

#: ../../source/model_doc/marian.rst:72
msgid ""
"Note that if a model is only multilingual on the source side, like :obj"
":`Helsinki-NLP/opus-mt-roa-en`, no language codes are required."
msgstr ""

#: ../../source/model_doc/marian.rst:75
msgid ""
"New multi-lingual models from the `Tatoeba-Challenge repo "
"<https://github.com/Helsinki-NLP/Tatoeba-Challenge>`__ require 3 "
"character language codes:"
msgstr ""

#: ../../source/model_doc/marian.rst:102
msgid "Here is the code to see all available pretrained models on the hub:"
msgstr ""

#: ../../source/model_doc/marian.rst:116
msgid "Old Style Multi-Lingual Models"
msgstr ""

#: ../../source/model_doc/marian.rst:118
msgid ""
"These are the old style multi-lingual models ported from the OPUS-MT-"
"Train repo: and the members of each language group:"
msgstr ""

#: ../../source/model_doc/marian.rst:148
msgid ""
"Example of translating english to many romance languages, using old-style"
" 2 character language codes"
msgstr ""

#: ../../source/model_doc/marian.rst:173
msgid "MarianConfig"
msgstr ""

#: of transformers.MarianConfig:1
msgid ""
"This is the configuration class to store the configuration of a "
":class:`~transformers.MarianModel`. It is used to instantiate an Marian "
"model according to the specified arguments, defining the model "
"architecture. Instantiating a configuration with the defaults will yield "
"a similar configuration to that of the Marian `Helsinki-NLP/opus-mt-en-de"
" <https://huggingface.co/Helsinki-NLP/opus-mt-en-de>`__ architecture."
msgstr ""

#: of transformers.MarianConfig:6
msgid ""
"Configuration objects inherit from "
":class:`~transformers.PretrainedConfig` and can be used to control the "
"model outputs. Read the documentation from "
":class:`~transformers.PretrainedConfig` for more information."
msgstr ""

#: of transformers.FlaxMarianMTModel transformers.FlaxMarianMTModel.__call__
#: transformers.FlaxMarianModel transformers.FlaxMarianModel.__call__
#: transformers.MarianConfig transformers.MarianMTModel
#: transformers.MarianMTModel.forward transformers.MarianModel
#: transformers.MarianModel.forward transformers.MarianTokenizer
#: transformers.TFMarianMTModel transformers.TFMarianMTModel.call
#: transformers.TFMarianModel transformers.TFMarianModel.call
msgid "Parameters"
msgstr ""

#: of transformers.MarianConfig:10
msgid ""
"Vocabulary size of the Marian model. Defines the number of different "
"tokens that can be represented by the :obj:`inputs_ids` passed when "
"calling :class:`~transformers.MarianModel` or "
":class:`~transformers.TFMarianModel`."
msgstr ""

#: of transformers.MarianConfig:14
msgid "Dimensionality of the layers and the pooler layer."
msgstr ""

#: of transformers.MarianConfig:16
msgid "Number of encoder layers."
msgstr ""

#: of transformers.MarianConfig:18
msgid "Number of decoder layers."
msgstr ""

#: of transformers.MarianConfig:20
msgid ""
"Number of attention heads for each attention layer in the Transformer "
"encoder."
msgstr ""

#: of transformers.MarianConfig:22
msgid ""
"Number of attention heads for each attention layer in the Transformer "
"decoder."
msgstr ""

#: of transformers.MarianConfig:24 transformers.MarianConfig:26
msgid ""
"Dimensionality of the \"intermediate\" (often named feed-forward) layer "
"in decoder."
msgstr ""

#: of transformers.MarianConfig:28
msgid ""
"The non-linear activation function (function or string) in the encoder "
"and pooler. If string, :obj:`\"gelu\"`, :obj:`\"relu\"`, :obj:`\"silu\"` "
"and :obj:`\"gelu_new\"` are supported."
msgstr ""

#: of transformers.MarianConfig:31
msgid ""
"The dropout probability for all fully connected layers in the embeddings,"
" encoder, and pooler."
msgstr ""

#: of transformers.MarianConfig:33
msgid "The dropout ratio for the attention probabilities."
msgstr ""

#: of transformers.MarianConfig:35
msgid "The dropout ratio for activations inside the fully connected layer."
msgstr ""

#: of transformers.MarianConfig:37
msgid "The dropout ratio for classifier."
msgstr ""

#: of transformers.MarianConfig:39
msgid ""
"The maximum sequence length that this model might ever be used with. "
"Typically set this to something large just in case (e.g., 512 or 1024 or "
"2048)."
msgstr ""

#: of transformers.MarianConfig:42
msgid ""
"The standard deviation of the truncated_normal_initializer for "
"initializing all weight matrices."
msgstr ""

#: of transformers.MarianConfig:44
msgid ""
"(:obj:`float`, `optional`, defaults to 0.0): The LayerDrop probability "
"for the encoder. See the `LayerDrop paper <see "
"https://arxiv.org/abs/1909.11556>`__ for more details."
msgstr ""

#: of transformers.MarianConfig:47
msgid ""
"(:obj:`float`, `optional`, defaults to 0.0): The LayerDrop probability "
"for the decoder. See the `LayerDrop paper <see "
"https://arxiv.org/abs/1909.11556>`__ for more details."
msgstr ""

#: of transformers.MarianConfig:50
msgid ""
"If True, use gradient checkpointing to save memory at the expense of "
"slower backward pass."
msgstr ""

#: of transformers.MarianConfig:52
msgid "Scale embeddings by diving by sqrt(d_model)."
msgstr ""

#: of transformers.MarianConfig:54
msgid ""
"Whether or not the model should return the last key/values attentions "
"(not used by all models)"
msgstr ""

#: of transformers.MarianConfig:56
msgid ""
"The id of the token to force as the last generated token when "
":obj:`max_length` is reached. Usually set to :obj:`eos_token_id`."
msgstr ""

#: of transformers.MarianConfig:60 transformers.MarianMTModel.forward:141
#: transformers.MarianTokenizer:42 transformers.TFMarianMTModel.call:123
msgid "Examples::"
msgstr ""

#: ../../source/model_doc/marian.rst:180
msgid "MarianTokenizer"
msgstr ""

#: of transformers.MarianTokenizer:1
msgid ""
"Construct a Marian tokenizer. Based on `SentencePiece "
"<https://github.com/google/sentencepiece>`__."
msgstr ""

#: of transformers.MarianTokenizer:3
msgid ""
"This tokenizer inherits from :class:`~transformers.PreTrainedTokenizer` "
"which contains most of the main methods. Users should refer to this "
"superclass for more information regarding those methods."
msgstr ""

#: of transformers.MarianTokenizer:6
msgid ""
"`SentencePiece <https://github.com/google/sentencepiece>`__ file "
"(generally has a .spm extension) that contains the vocabulary for the "
"source language."
msgstr ""

#: of transformers.MarianTokenizer:9
msgid ""
"`SentencePiece <https://github.com/google/sentencepiece>`__ file "
"(generally has a .spm extension) that contains the vocabulary for the "
"target language."
msgstr ""

#: of transformers.MarianTokenizer:12
msgid "A string representing the source language."
msgstr ""

#: of transformers.MarianTokenizer:14
msgid "A string representing the target language."
msgstr ""

#: of transformers.MarianTokenizer:16
msgid ""
"The unknown token. A token that is not in the vocabulary cannot be "
"converted to an ID and is set to be this token instead."
msgstr ""

#: of transformers.MarianTokenizer:19
msgid "The end of sequence token."
msgstr ""

#: of transformers.MarianTokenizer:21
msgid ""
"The token used for padding, for example when batching sequences of "
"different lengths."
msgstr ""

#: of transformers.MarianTokenizer:23
msgid "The maximum sentence length the model accepts."
msgstr ""

#: of transformers.MarianTokenizer:25
msgid "Additional special tokens used by the tokenizer."
msgstr ""

#: of transformers.MarianTokenizer:27
msgid ""
"Will be passed to the ``SentencePieceProcessor.__init__()`` method. The "
"`Python wrapper for SentencePiece "
"<https://github.com/google/sentencepiece/tree/master/python>`__ can be "
"used, among other things, to set:  - ``enable_sampling``: Enable subword "
"regularization. - ``nbest_size``: Sampling parameters for unigram. "
"Invalid for BPE-Dropout.    - ``nbest_size = {0,1}``: No sampling is "
"performed.   - ``nbest_size > 1``: samples from the nbest_size results."
"   - ``nbest_size < 0``: assuming that nbest_size is infinite and samples"
" from the all hypothesis (lattice)     using forward-filtering-and-"
"backward-sampling algorithm.  - ``alpha``: Smoothing parameter for "
"unigram sampling, and dropout probability of merge operations for   BPE-"
"dropout."
msgstr ""

#: of transformers.MarianTokenizer:27
msgid ""
"Will be passed to the ``SentencePieceProcessor.__init__()`` method. The "
"`Python wrapper for SentencePiece "
"<https://github.com/google/sentencepiece/tree/master/python>`__ can be "
"used, among other things, to set:"
msgstr ""

#: of transformers.MarianTokenizer:30
msgid "``enable_sampling``: Enable subword regularization."
msgstr ""

#: of transformers.MarianTokenizer:31
msgid "``nbest_size``: Sampling parameters for unigram. Invalid for BPE-Dropout."
msgstr ""

#: of transformers.MarianTokenizer:33
msgid "``nbest_size = {0,1}``: No sampling is performed."
msgstr ""

#: of transformers.MarianTokenizer:34
msgid "``nbest_size > 1``: samples from the nbest_size results."
msgstr ""

#: of transformers.MarianTokenizer:35
msgid ""
"``nbest_size < 0``: assuming that nbest_size is infinite and samples from"
" the all hypothesis (lattice) using forward-filtering-and-backward-"
"sampling algorithm."
msgstr ""

#: of transformers.MarianTokenizer:38
msgid ""
"``alpha``: Smoothing parameter for unigram sampling, and dropout "
"probability of merge operations for BPE-dropout."
msgstr ""

#: of transformers.MarianTokenizer.as_target_tokenizer:1
msgid ""
"Temporarily sets the tokenizer for encoding the targets. Useful for "
"tokenizer associated to sequence-to-sequence models that need a slightly "
"different processing for the labels."
msgstr ""

#: ../../source/model_doc/marian.rst:187
msgid "MarianModel"
msgstr ""

#: of transformers.MarianModel:1
msgid ""
"The bare Marian Model outputting raw hidden-states without any specific "
"head on top. This model inherits from "
":class:`~transformers.PreTrainedModel`. Check the superclass "
"documentation for the generic methods the library implements for all its "
"model (such as downloading or saving, resizing the input embeddings, "
"pruning heads etc.)"
msgstr ""

#: of transformers.MarianMTModel:6 transformers.MarianModel:6
msgid ""
"This model is also a PyTorch `torch.nn.Module "
"<https://pytorch.org/docs/stable/nn.html#torch.nn.Module>`__ subclass. "
"Use it as a regular PyTorch Module and refer to the PyTorch documentation"
" for all matter related to general usage and behavior."
msgstr ""

#: of transformers.MarianMTModel:10 transformers.MarianModel:10
msgid ""
"Model configuration class with all the parameters of the model. "
"Initializing with a config file does not load the weights associated with"
" the model, only the configuration. Check out the "
":meth:`~transformers.PreTrainedModel.from_pretrained` method to load the "
"model weights."
msgstr ""

#: of transformers.MarianModel.forward:1
msgid ""
"The :class:`~transformers.MarianModel` forward method, overrides the "
":func:`__call__` special method."
msgstr ""

#: of transformers.FlaxMarianMTModel.__call__:4
#: transformers.FlaxMarianModel.__call__:4 transformers.MarianMTModel.forward:4
#: transformers.MarianModel.forward:4 transformers.TFMarianMTModel.call:4
#: transformers.TFMarianModel.call:4
msgid ""
"Although the recipe for forward pass needs to be defined within this "
"function, one should call the :class:`Module` instance afterwards instead"
" of this since the former takes care of running the pre and post "
"processing steps while the latter silently ignores them."
msgstr ""

#: of transformers.FlaxMarianMTModel.__call__:8
#: transformers.FlaxMarianModel.__call__:8 transformers.MarianMTModel.forward:8
#: transformers.MarianModel.forward:8
msgid ""
"Indices of input sequence tokens in the vocabulary. Padding will be "
"ignored by default should you provide it.  Indices can be obtained using "
":class:`~transformers.MarianTokenizer`. See "
":meth:`transformers.PreTrainedTokenizer.encode` and "
":meth:`transformers.PreTrainedTokenizer.__call__` for details.  `What are"
" input IDs? <../glossary.html#input-ids>`__"
msgstr ""

#: of transformers.FlaxMarianMTModel.__call__:8
#: transformers.FlaxMarianModel.__call__:8
#: transformers.MarianForCausalLM.forward:3
#: transformers.MarianMTModel.forward:8 transformers.MarianModel.forward:8
msgid ""
"Indices of input sequence tokens in the vocabulary. Padding will be "
"ignored by default should you provide it."
msgstr ""

#: of transformers.FlaxMarianMTModel.__call__:11
#: transformers.FlaxMarianMTModel.__call__:26
#: transformers.FlaxMarianModel.__call__:11
#: transformers.FlaxMarianModel.__call__:26
#: transformers.MarianForCausalLM.forward:6
#: transformers.MarianMTModel.forward:11 transformers.MarianMTModel.forward:26
#: transformers.MarianModel.forward:11 transformers.MarianModel.forward:26
#: transformers.TFMarianMTModel.call:10 transformers.TFMarianMTModel.call:25
#: transformers.TFMarianModel.call:10 transformers.TFMarianModel.call:25
msgid ""
"Indices can be obtained using :class:`~transformers.MarianTokenizer`. See"
" :meth:`transformers.PreTrainedTokenizer.encode` and "
":meth:`transformers.PreTrainedTokenizer.__call__` for details."
msgstr ""

#: of transformers.FlaxMarianMTModel.__call__:15
#: transformers.FlaxMarianModel.__call__:15
#: transformers.MarianForCausalLM.forward:10
#: transformers.MarianMTModel.forward:15 transformers.MarianModel.forward:15
#: transformers.TFMarianMTModel.call:14 transformers.TFMarianModel.call:14
msgid "`What are input IDs? <../glossary.html#input-ids>`__"
msgstr ""

#: of transformers.FlaxMarianMTModel.__call__:17
#: transformers.FlaxMarianModel.__call__:17
#: transformers.MarianMTModel.forward:17 transformers.MarianModel.forward:17
#: transformers.TFMarianMTModel.call:16 transformers.TFMarianModel.call:16
msgid ""
"Mask to avoid performing attention on padding token indices. Mask values "
"selected in ``[0, 1]``:  - 1 for tokens that are **not masked**, - 0 for "
"tokens that are **masked**.  `What are attention masks? <../glossary.html"
"#attention-mask>`__"
msgstr ""

#: of transformers.FlaxMarianMTModel.__call__:17
#: transformers.FlaxMarianModel.__call__:17
#: transformers.MarianForCausalLM.forward:12
#: transformers.MarianMTModel.forward:17 transformers.MarianModel.forward:17
#: transformers.TFMarianMTModel.call:16 transformers.TFMarianModel.call:16
msgid ""
"Mask to avoid performing attention on padding token indices. Mask values "
"selected in ``[0, 1]``:"
msgstr ""

#: of transformers.FlaxMarianMTModel.__call__:19
#: transformers.FlaxMarianModel.__call__:19
#: transformers.MarianForCausalLM.forward:14
#: transformers.MarianForCausalLM.forward:59
#: transformers.MarianMTModel.forward:19 transformers.MarianModel.forward:19
#: transformers.TFMarianMTModel.call:18 transformers.TFMarianModel.call:18
msgid "1 for tokens that are **not masked**,"
msgstr ""

#: of transformers.FlaxMarianMTModel.__call__:20
#: transformers.FlaxMarianModel.__call__:20
#: transformers.MarianForCausalLM.forward:15
#: transformers.MarianForCausalLM.forward:60
#: transformers.MarianMTModel.forward:20 transformers.MarianModel.forward:20
#: transformers.TFMarianMTModel.call:19 transformers.TFMarianModel.call:19
msgid "0 for tokens that are **masked**."
msgstr ""

#: of transformers.FlaxMarianMTModel.__call__:22
#: transformers.FlaxMarianModel.__call__:22
#: transformers.MarianForCausalLM.forward:17
#: transformers.MarianMTModel.forward:22 transformers.MarianModel.forward:22
#: transformers.TFMarianMTModel.call:21 transformers.TFMarianModel.call:21
msgid "`What are attention masks? <../glossary.html#attention-mask>`__"
msgstr ""

#: of transformers.MarianMTModel.forward:24 transformers.MarianModel.forward:24
#: transformers.TFMarianMTModel.call:23 transformers.TFMarianModel.call:23
msgid ""
"Indices of decoder input sequence tokens in the vocabulary.  Indices can "
"be obtained using :class:`~transformers.MarianTokenizer`. See "
":meth:`transformers.PreTrainedTokenizer.encode` and "
":meth:`transformers.PreTrainedTokenizer.__call__` for details.  `What are"
" decoder input IDs? <../glossary.html#decoder-input-ids>`__  Marian uses "
"the :obj:`pad_token_id` as the starting token for "
":obj:`decoder_input_ids` generation. If :obj:`past_key_values` is used, "
"optionally only the last :obj:`decoder_input_ids` have to be input (see "
":obj:`past_key_values`)."
msgstr ""

#: of transformers.FlaxMarianMTModel.__call__:24
#: transformers.FlaxMarianModel.__call__:24
#: transformers.MarianMTModel.forward:24 transformers.MarianModel.forward:24
#: transformers.TFMarianMTModel.call:23 transformers.TFMarianModel.call:23
msgid "Indices of decoder input sequence tokens in the vocabulary."
msgstr ""

#: of transformers.FlaxMarianMTModel.__call__:30
#: transformers.FlaxMarianModel.__call__:30
#: transformers.MarianMTModel.forward:30 transformers.MarianModel.forward:30
#: transformers.TFMarianMTModel.call:29 transformers.TFMarianModel.call:29
msgid "`What are decoder input IDs? <../glossary.html#decoder-input-ids>`__"
msgstr ""

#: of transformers.MarianMTModel.forward:32 transformers.MarianModel.forward:32
#: transformers.TFMarianMTModel.call:31 transformers.TFMarianModel.call:31
msgid ""
"Marian uses the :obj:`pad_token_id` as the starting token for "
":obj:`decoder_input_ids` generation. If :obj:`past_key_values` is used, "
"optionally only the last :obj:`decoder_input_ids` have to be input (see "
":obj:`past_key_values`)."
msgstr ""

#: of transformers.FlaxMarianMTModel.__call__:36
#: transformers.FlaxMarianModel.__call__:36
#: transformers.MarianMTModel.forward:36 transformers.MarianModel.forward:36
msgid ""
"Default behavior: generate a tensor that ignores pad tokens in "
":obj:`decoder_input_ids`. Causal mask will also be used by default."
msgstr ""

#: of transformers.MarianMTModel.forward:39 transformers.MarianModel.forward:39
#: transformers.TFMarianMTModel.call:37 transformers.TFMarianModel.call:37
msgid ""
"Mask to nullify selected heads of the attention modules in the encoder. "
"Mask values selected in ``[0, 1]``:  - 1 indicates the head is **not "
"masked**, - 0 indicates the head is **masked**."
msgstr ""

#: of transformers.MarianMTModel.forward:39 transformers.MarianModel.forward:39
#: transformers.TFMarianMTModel.call:37 transformers.TFMarianModel.call:37
msgid ""
"Mask to nullify selected heads of the attention modules in the encoder. "
"Mask values selected in ``[0, 1]``:"
msgstr ""

#: of transformers.MarianForCausalLM.forward:27
#: transformers.MarianForCausalLM.forward:33
#: transformers.MarianMTModel.forward:41 transformers.MarianMTModel.forward:46
#: transformers.MarianMTModel.forward:52 transformers.MarianModel.forward:41
#: transformers.MarianModel.forward:46 transformers.MarianModel.forward:52
#: transformers.TFMarianMTModel.call:39 transformers.TFMarianMTModel.call:44
#: transformers.TFMarianMTModel.call:49 transformers.TFMarianModel.call:39
#: transformers.TFMarianModel.call:44 transformers.TFMarianModel.call:49
msgid "1 indicates the head is **not masked**,"
msgstr ""

#: of transformers.MarianForCausalLM.forward:28
#: transformers.MarianForCausalLM.forward:34
#: transformers.MarianMTModel.forward:42 transformers.MarianMTModel.forward:47
#: transformers.MarianMTModel.forward:53 transformers.MarianModel.forward:42
#: transformers.MarianModel.forward:47 transformers.MarianModel.forward:53
#: transformers.TFMarianMTModel.call:40 transformers.TFMarianMTModel.call:45
#: transformers.TFMarianMTModel.call:50 transformers.TFMarianModel.call:40
#: transformers.TFMarianModel.call:45 transformers.TFMarianModel.call:50
msgid "0 indicates the head is **masked**."
msgstr ""

#: of transformers.MarianMTModel.forward:44 transformers.MarianModel.forward:44
#: transformers.TFMarianMTModel.call:42 transformers.TFMarianModel.call:42
msgid ""
"Mask to nullify selected heads of the attention modules in the decoder. "
"Mask values selected in ``[0, 1]``:  - 1 indicates the head is **not "
"masked**, - 0 indicates the head is **masked**."
msgstr ""

#: of transformers.MarianMTModel.forward:44 transformers.MarianModel.forward:44
#: transformers.TFMarianMTModel.call:42 transformers.TFMarianModel.call:42
msgid ""
"Mask to nullify selected heads of the attention modules in the decoder. "
"Mask values selected in ``[0, 1]``:"
msgstr ""

#: of transformers.MarianMTModel.forward:49 transformers.MarianModel.forward:49
msgid ""
"Mask to nullify selected heads of the cross-attention modules in the "
"decoder. Mask values selected in ``[0, 1]``:  - 1 indicates the head is "
"**not masked**, - 0 indicates the head is **masked**."
msgstr ""

#: of transformers.MarianMTModel.forward:49 transformers.MarianModel.forward:49
msgid ""
"Mask to nullify selected heads of the cross-attention modules in the "
"decoder. Mask values selected in ``[0, 1]``:"
msgstr ""

#: of transformers.MarianMTModel.forward:55 transformers.MarianModel.forward:55
msgid ""
"Tuple consists of (:obj:`last_hidden_state`, `optional`: "
":obj:`hidden_states`, `optional`: :obj:`attentions`) "
":obj:`last_hidden_state` of shape :obj:`(batch_size, sequence_length, "
"hidden_size)`, `optional`) is a sequence of hidden-states at the output "
"of the last layer of the encoder. Used in the cross-attention of the "
"decoder."
msgstr ""

#: of transformers.MarianMTModel.forward:60 transformers.MarianModel.forward:60
msgid ""
"Tuple of :obj:`tuple(torch.FloatTensor)` of length "
":obj:`config.n_layers`, with each tuple having 2 tensors of shape "
":obj:`(batch_size, num_heads, sequence_length, embed_size_per_head)`) and"
" 2 additional tensors of shape :obj:`(batch_size, num_heads, "
"encoder_sequence_length, embed_size_per_head)`.  Contains pre-computed "
"hidden-states (key and values in the self-attention blocks and in the "
"cross-attention blocks) that can be used (see :obj:`past_key_values` "
"input) to speed up sequential decoding.  If :obj:`past_key_values` are "
"used, the user can optionally input only the last "
":obj:`decoder_input_ids` (those that don't have their past key value "
"states given to this model) of shape :obj:`(batch_size, 1)` instead of "
"all :obj:`decoder_input_ids`` of shape :obj:`(batch_size, "
"sequence_length)`."
msgstr ""

#: of transformers.MarianMTModel.forward:60 transformers.MarianModel.forward:60
msgid ""
"Tuple of :obj:`tuple(torch.FloatTensor)` of length "
":obj:`config.n_layers`, with each tuple having 2 tensors of shape "
":obj:`(batch_size, num_heads, sequence_length, embed_size_per_head)`) and"
" 2 additional tensors of shape :obj:`(batch_size, num_heads, "
"encoder_sequence_length, embed_size_per_head)`."
msgstr ""

#: of transformers.FlaxMarianModel.__call__:69
#: transformers.MarianForCausalLM.forward:43
#: transformers.MarianMTModel.forward:64 transformers.MarianMTModel.forward:109
#: transformers.MarianModel.forward:64 transformers.MarianModel.forward:107
msgid ""
"Contains pre-computed hidden-states (key and values in the self-attention"
" blocks and in the cross-attention blocks) that can be used (see "
":obj:`past_key_values` input) to speed up sequential decoding."
msgstr ""

#: of transformers.MarianMTModel.forward:67 transformers.MarianModel.forward:67
msgid ""
"If :obj:`past_key_values` are used, the user can optionally input only "
"the last :obj:`decoder_input_ids` (those that don't have their past key "
"value states given to this model) of shape :obj:`(batch_size, 1)` instead"
" of all :obj:`decoder_input_ids`` of shape :obj:`(batch_size, "
"sequence_length)`."
msgstr ""

#: of transformers.MarianMTModel.forward:71 transformers.MarianModel.forward:71
msgid ""
"Optionally, instead of passing :obj:`input_ids` you can choose to "
"directly pass an embedded representation. This is useful if you want more"
" control over how to convert :obj:`input_ids` indices into associated "
"vectors than the model's internal embedding lookup matrix."
msgstr ""

#: of transformers.MarianMTModel.forward:75 transformers.MarianModel.forward:75
msgid ""
"Optionally, instead of passing :obj:`decoder_input_ids` you can choose to"
" directly pass an embedded representation. If :obj:`past_key_values` is "
"used, optionally only the last :obj:`decoder_inputs_embeds` have to be "
"input (see :obj:`past_key_values`). This is useful if you want more "
"control over how to convert :obj:`decoder_input_ids` indices into "
"associated vectors than the model's internal embedding lookup matrix.  If"
" :obj:`decoder_input_ids` and :obj:`decoder_inputs_embeds` are both "
"unset, :obj:`decoder_inputs_embeds` takes the value of "
":obj:`inputs_embeds`."
msgstr ""

#: of transformers.MarianMTModel.forward:75 transformers.MarianModel.forward:75
msgid ""
"Optionally, instead of passing :obj:`decoder_input_ids` you can choose to"
" directly pass an embedded representation. If :obj:`past_key_values` is "
"used, optionally only the last :obj:`decoder_inputs_embeds` have to be "
"input (see :obj:`past_key_values`). This is useful if you want more "
"control over how to convert :obj:`decoder_input_ids` indices into "
"associated vectors than the model's internal embedding lookup matrix."
msgstr ""

#: of transformers.MarianMTModel.forward:80 transformers.MarianModel.forward:80
msgid ""
"If :obj:`decoder_input_ids` and :obj:`decoder_inputs_embeds` are both "
"unset, :obj:`decoder_inputs_embeds` takes the value of "
":obj:`inputs_embeds`."
msgstr ""

#: of transformers.MarianForCausalLM.forward:56
#: transformers.MarianMTModel.forward:83 transformers.MarianModel.forward:83
msgid ""
"If set to :obj:`True`, :obj:`past_key_values` key value states are "
"returned and can be used to speed up decoding (see "
":obj:`past_key_values`)."
msgstr ""

#: of transformers.FlaxMarianMTModel.__call__:48
#: transformers.FlaxMarianModel.__call__:48
#: transformers.MarianForCausalLM.forward:62
#: transformers.MarianMTModel.forward:86 transformers.MarianModel.forward:86
msgid ""
"Whether or not to return the attentions tensors of all attention layers. "
"See ``attentions`` under returned tensors for more detail."
msgstr ""

#: of transformers.FlaxMarianMTModel.__call__:51
#: transformers.FlaxMarianModel.__call__:51
#: transformers.MarianForCausalLM.forward:65
#: transformers.MarianMTModel.forward:89 transformers.MarianModel.forward:89
msgid ""
"Whether or not to return the hidden states of all layers. See "
"``hidden_states`` under returned tensors for more detail."
msgstr ""

#: of transformers.FlaxMarianMTModel.__call__:54
#: transformers.FlaxMarianModel.__call__:54
#: transformers.MarianForCausalLM.forward:68
#: transformers.MarianMTModel.forward:92 transformers.MarianModel.forward:92
msgid ""
"Whether or not to return a :class:`~transformers.file_utils.ModelOutput` "
"instead of a plain tuple."
msgstr ""

#: of transformers.FlaxMarianModel.__call__
#: transformers.MarianForCausalLM.forward transformers.MarianMTModel.forward
#: transformers.MarianModel.forward transformers.TFMarianMTModel.call
#: transformers.TFMarianModel.call
msgid "Returns"
msgstr ""

#: of transformers.MarianModel.forward:95
msgid ""
"A :class:`~transformers.modeling_outputs.Seq2SeqModelOutput` or a tuple "
"of :obj:`torch.FloatTensor` (if ``return_dict=False`` is passed or when "
"``config.return_dict=False``) comprising various elements depending on "
"the configuration (:class:`~transformers.MarianConfig`) and inputs.  - "
"**last_hidden_state** (:obj:`torch.FloatTensor` of shape "
":obj:`(batch_size, sequence_length, hidden_size)`) -- Sequence of hidden-"
"states at the output of the last layer of the decoder of the model.    If"
" :obj:`past_key_values` is used only the last hidden-state of the "
"sequences of shape :obj:`(batch_size,   1, hidden_size)` is output. - "
"**past_key_values** (:obj:`tuple(tuple(torch.FloatTensor))`, `optional`, "
"returned when ``use_cache=True`` is passed or when "
"``config.use_cache=True``) -- Tuple of :obj:`tuple(torch.FloatTensor)` of"
" length :obj:`config.n_layers`, with each tuple having 2 tensors   of "
"shape :obj:`(batch_size, num_heads, sequence_length, "
"embed_size_per_head)`) and 2 additional tensors of   shape "
":obj:`(batch_size, num_heads, encoder_sequence_length, "
"embed_size_per_head)`.    Contains pre-computed hidden-states (key and "
"values in the self-attention blocks and in the cross-attention   blocks) "
"that can be used (see :obj:`past_key_values` input) to speed up "
"sequential decoding. - **decoder_hidden_states** "
"(:obj:`tuple(torch.FloatTensor)`, `optional`, returned when "
"``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of "
":obj:`torch.FloatTensor` (one for the output of the embeddings + one for "
"the output of each layer)   of shape :obj:`(batch_size, sequence_length, "
"hidden_size)`.    Hidden-states of the decoder at the output of each "
"layer plus the initial embedding outputs. - **decoder_attentions** "
"(:obj:`tuple(torch.FloatTensor)`, `optional`, returned when "
"``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`torch.FloatTensor` "
"(one for each layer) of shape :obj:`(batch_size, num_heads,   "
"sequence_length, sequence_length)`.    Attentions weights of the decoder,"
" after the attention softmax, used to compute the weighted average in the"
"   self-attention heads. - **cross_attentions** "
"(:obj:`tuple(torch.FloatTensor)`, `optional`, returned when "
"``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`torch.FloatTensor` "
"(one for each layer) of shape :obj:`(batch_size, num_heads,   "
"sequence_length, sequence_length)`.    Attentions weights of the "
"decoder's cross-attention layer, after the attention softmax, used to "
"compute the   weighted average in the cross-attention heads. - "
"**encoder_last_hidden_state** (:obj:`torch.FloatTensor` of shape "
":obj:`(batch_size, sequence_length, hidden_size)`, `optional`) -- "
"Sequence of hidden-states at the output of the last layer of the encoder "
"of the model. - **encoder_hidden_states** "
"(:obj:`tuple(torch.FloatTensor)`, `optional`, returned when "
"``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of "
":obj:`torch.FloatTensor` (one for the output of the embeddings + one for "
"the output of each layer)   of shape :obj:`(batch_size, sequence_length, "
"hidden_size)`.    Hidden-states of the encoder at the output of each "
"layer plus the initial embedding outputs. - **encoder_attentions** "
"(:obj:`tuple(torch.FloatTensor)`, `optional`, returned when "
"``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`torch.FloatTensor` "
"(one for each layer) of shape :obj:`(batch_size, num_heads,   "
"sequence_length, sequence_length)`.    Attentions weights of the encoder,"
" after the attention softmax, used to compute the weighted average in the"
"   self-attention heads.   Example::      >>> from transformers import "
"MarianTokenizer, MarianModel      >>> tokenizer = "
"MarianTokenizer.from_pretrained('Helsinki-NLP/opus-mt-en-de')     >>> "
"model = MarianModel.from_pretrained('Helsinki-NLP/opus-mt-en-de')      "
">>> input_ids = tokenizer(\"Studies have been shown that owning a dog is "
"good for you\", return_tensors=\"pt\").input_ids  # Batch size 1     >>> "
"decoder_input_ids = tokenizer(\"<pad> Studien haben gezeigt dass es "
"hilfreich ist einen Hund zu besitzen\",     ... return_tensors=\"pt\", "
"add_special_tokens=False).input_ids  # Batch size 1     >>> outputs = "
"model(input_ids=input_ids, decoder_input_ids=decoder_input_ids)      >>> "
"last_hidden_states = outputs.last_hidden_state"
msgstr ""

#: of transformers.MarianModel.forward:95
msgid ""
"A :class:`~transformers.modeling_outputs.Seq2SeqModelOutput` or a tuple "
"of :obj:`torch.FloatTensor` (if ``return_dict=False`` is passed or when "
"``config.return_dict=False``) comprising various elements depending on "
"the configuration (:class:`~transformers.MarianConfig`) and inputs."
msgstr ""

#: of transformers.MarianModel.forward:99
msgid ""
"**last_hidden_state** (:obj:`torch.FloatTensor` of shape "
":obj:`(batch_size, sequence_length, hidden_size)`) -- Sequence of hidden-"
"states at the output of the last layer of the decoder of the model."
msgstr ""

#: of transformers.FlaxMarianModel.__call__:63
#: transformers.MarianModel.forward:101 transformers.TFMarianModel.call:84
msgid ""
"If :obj:`past_key_values` is used only the last hidden-state of the "
"sequences of shape :obj:`(batch_size, 1, hidden_size)` is output."
msgstr ""

#: of transformers.MarianMTModel.forward:105
#: transformers.MarianModel.forward:103
msgid ""
"**past_key_values** (:obj:`tuple(tuple(torch.FloatTensor))`, `optional`, "
"returned when ``use_cache=True`` is passed or when "
"``config.use_cache=True``) -- Tuple of :obj:`tuple(torch.FloatTensor)` of"
" length :obj:`config.n_layers`, with each tuple having 2 tensors of shape"
" :obj:`(batch_size, num_heads, sequence_length, embed_size_per_head)`) "
"and 2 additional tensors of shape :obj:`(batch_size, num_heads, "
"encoder_sequence_length, embed_size_per_head)`."
msgstr ""

#: of transformers.MarianMTModel.forward:111
#: transformers.MarianModel.forward:109
msgid ""
"**decoder_hidden_states** (:obj:`tuple(torch.FloatTensor)`, `optional`, "
"returned when ``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of "
":obj:`torch.FloatTensor` (one for the output of the embeddings + one for "
"the output of each layer) of shape :obj:`(batch_size, sequence_length, "
"hidden_size)`."
msgstr ""

#: of transformers.FlaxMarianModel.__call__:74
#: transformers.MarianMTModel.forward:114 transformers.MarianModel.forward:112
#: transformers.TFMarianMTModel.call:96 transformers.TFMarianModel.call:94
msgid ""
"Hidden-states of the decoder at the output of each layer plus the initial"
" embedding outputs."
msgstr ""

#: of transformers.MarianMTModel.forward:115
#: transformers.MarianModel.forward:113
msgid ""
"**decoder_attentions** (:obj:`tuple(torch.FloatTensor)`, `optional`, "
"returned when ``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`torch.FloatTensor` "
"(one for each layer) of shape :obj:`(batch_size, num_heads, "
"sequence_length, sequence_length)`."
msgstr ""

#: of transformers.FlaxMarianModel.__call__:78
#: transformers.MarianMTModel.forward:118 transformers.MarianModel.forward:116
#: transformers.TFMarianMTModel.call:100 transformers.TFMarianModel.call:98
msgid ""
"Attentions weights of the decoder, after the attention softmax, used to "
"compute the weighted average in the self-attention heads."
msgstr ""

#: of transformers.MarianForCausalLM.forward:86
#: transformers.MarianMTModel.forward:120 transformers.MarianModel.forward:118
msgid ""
"**cross_attentions** (:obj:`tuple(torch.FloatTensor)`, `optional`, "
"returned when ``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`torch.FloatTensor` "
"(one for each layer) of shape :obj:`(batch_size, num_heads, "
"sequence_length, sequence_length)`."
msgstr ""

#: of transformers.FlaxMarianModel.__call__:83
#: transformers.MarianMTModel.forward:123 transformers.MarianModel.forward:121
#: transformers.TFMarianMTModel.call:105 transformers.TFMarianModel.call:103
msgid ""
"Attentions weights of the decoder's cross-attention layer, after the "
"attention softmax, used to compute the weighted average in the cross-"
"attention heads."
msgstr ""

#: of transformers.MarianMTModel.forward:125
#: transformers.MarianModel.forward:123
msgid ""
"**encoder_last_hidden_state** (:obj:`torch.FloatTensor` of shape "
":obj:`(batch_size, sequence_length, hidden_size)`, `optional`) -- "
"Sequence of hidden-states at the output of the last layer of the encoder "
"of the model."
msgstr ""

#: of transformers.MarianMTModel.forward:126
#: transformers.MarianModel.forward:124
msgid ""
"**encoder_hidden_states** (:obj:`tuple(torch.FloatTensor)`, `optional`, "
"returned when ``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of "
":obj:`torch.FloatTensor` (one for the output of the embeddings + one for "
"the output of each layer) of shape :obj:`(batch_size, sequence_length, "
"hidden_size)`."
msgstr ""

#: of transformers.FlaxMarianModel.__call__:89
#: transformers.MarianMTModel.forward:129 transformers.MarianModel.forward:127
#: transformers.TFMarianMTModel.call:111 transformers.TFMarianModel.call:109
msgid ""
"Hidden-states of the encoder at the output of each layer plus the initial"
" embedding outputs."
msgstr ""

#: of transformers.MarianMTModel.forward:130
#: transformers.MarianModel.forward:128
msgid ""
"**encoder_attentions** (:obj:`tuple(torch.FloatTensor)`, `optional`, "
"returned when ``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`torch.FloatTensor` "
"(one for each layer) of shape :obj:`(batch_size, num_heads, "
"sequence_length, sequence_length)`."
msgstr ""

#: of transformers.FlaxMarianModel.__call__:93
#: transformers.MarianMTModel.forward:133 transformers.MarianModel.forward:131
#: transformers.TFMarianMTModel.call:115 transformers.TFMarianModel.call:113
msgid ""
"Attentions weights of the encoder, after the attention softmax, used to "
"compute the weighted average in the self-attention heads."
msgstr ""

#: of transformers.FlaxMarianMTModel.__call__:59
#: transformers.FlaxMarianModel.__call__:97
#: transformers.MarianForCausalLM.forward:99
#: transformers.MarianModel.forward:135 transformers.TFMarianModel.call:117
msgid "Example::"
msgstr ""

#: of transformers.FlaxMarianModel.__call__
#: transformers.MarianForCausalLM.forward transformers.MarianMTModel.forward
#: transformers.MarianModel.forward transformers.TFMarianMTModel.call
#: transformers.TFMarianModel.call
msgid "Return type"
msgstr ""

#: of transformers.MarianModel.forward:148
msgid ""
":class:`~transformers.modeling_outputs.Seq2SeqModelOutput` or "
":obj:`tuple(torch.FloatTensor)`"
msgstr ""

#: ../../source/model_doc/marian.rst:194
msgid "MarianMTModel"
msgstr ""

#: of transformers.MarianMTModel:1
msgid ""
"The Marian Model with a language modeling head. Can be used for "
"summarization. This model inherits from "
":class:`~transformers.PreTrainedModel`. Check the superclass "
"documentation for the generic methods the library implements for all its "
"model (such as downloading or saving, resizing the input embeddings, "
"pruning heads etc.)"
msgstr ""

#: of transformers.MarianMTModel.forward:1
msgid ""
"The :class:`~transformers.MarianMTModel` forward method, overrides the "
":func:`__call__` special method."
msgstr ""

#: of transformers.MarianForCausalLM.forward:51
#: transformers.MarianMTModel.forward:94 transformers.TFMarianMTModel.call:77
msgid ""
"Labels for computing the masked language modeling loss. Indices should "
"either be in ``[0, ..., config.vocab_size]`` or -100 (see ``input_ids`` "
"docstring). Tokens with indices set to ``-100`` are ignored (masked), the"
" loss is only computed for the tokens with labels in ``[0, ..., "
"config.vocab_size]``."
msgstr ""

#: of transformers.MarianMTModel.forward:99
msgid ""
"A :class:`~transformers.modeling_outputs.Seq2SeqLMOutput` or a tuple of "
":obj:`torch.FloatTensor` (if ``return_dict=False`` is passed or when "
"``config.return_dict=False``) comprising various elements depending on "
"the configuration (:class:`~transformers.MarianConfig`) and inputs.  - "
"**loss** (:obj:`torch.FloatTensor` of shape :obj:`(1,)`, `optional`, "
"returned when :obj:`labels` is provided) -- Language modeling loss. - "
"**logits** (:obj:`torch.FloatTensor` of shape :obj:`(batch_size, "
"sequence_length, config.vocab_size)`) -- Prediction scores of the "
"language modeling head (scores for each vocabulary token before SoftMax)."
" - **past_key_values** (:obj:`tuple(tuple(torch.FloatTensor))`, "
"`optional`, returned when ``use_cache=True`` is passed or when "
"``config.use_cache=True``) -- Tuple of :obj:`tuple(torch.FloatTensor)` of"
" length :obj:`config.n_layers`, with each tuple having 2 tensors   of "
"shape :obj:`(batch_size, num_heads, sequence_length, "
"embed_size_per_head)`) and 2 additional tensors of   shape "
":obj:`(batch_size, num_heads, encoder_sequence_length, "
"embed_size_per_head)`.    Contains pre-computed hidden-states (key and "
"values in the self-attention blocks and in the cross-attention   blocks) "
"that can be used (see :obj:`past_key_values` input) to speed up "
"sequential decoding. - **decoder_hidden_states** "
"(:obj:`tuple(torch.FloatTensor)`, `optional`, returned when "
"``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of "
":obj:`torch.FloatTensor` (one for the output of the embeddings + one for "
"the output of each layer)   of shape :obj:`(batch_size, sequence_length, "
"hidden_size)`.    Hidden-states of the decoder at the output of each "
"layer plus the initial embedding outputs. - **decoder_attentions** "
"(:obj:`tuple(torch.FloatTensor)`, `optional`, returned when "
"``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`torch.FloatTensor` "
"(one for each layer) of shape :obj:`(batch_size, num_heads,   "
"sequence_length, sequence_length)`.    Attentions weights of the decoder,"
" after the attention softmax, used to compute the weighted average in the"
"   self-attention heads. - **cross_attentions** "
"(:obj:`tuple(torch.FloatTensor)`, `optional`, returned when "
"``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`torch.FloatTensor` "
"(one for each layer) of shape :obj:`(batch_size, num_heads,   "
"sequence_length, sequence_length)`.    Attentions weights of the "
"decoder's cross-attention layer, after the attention softmax, used to "
"compute the   weighted average in the cross-attention heads. - "
"**encoder_last_hidden_state** (:obj:`torch.FloatTensor` of shape "
":obj:`(batch_size, sequence_length, hidden_size)`, `optional`) -- "
"Sequence of hidden-states at the output of the last layer of the encoder "
"of the model. - **encoder_hidden_states** "
"(:obj:`tuple(torch.FloatTensor)`, `optional`, returned when "
"``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of "
":obj:`torch.FloatTensor` (one for the output of the embeddings + one for "
"the output of each layer)   of shape :obj:`(batch_size, sequence_length, "
"hidden_size)`.    Hidden-states of the encoder at the output of each "
"layer plus the initial embedding outputs. - **encoder_attentions** "
"(:obj:`tuple(torch.FloatTensor)`, `optional`, returned when "
"``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`torch.FloatTensor` "
"(one for each layer) of shape :obj:`(batch_size, num_heads,   "
"sequence_length, sequence_length)`.    Attentions weights of the encoder,"
" after the attention softmax, used to compute the weighted average in the"
"   self-attention heads.    Pytorch version of marian-nmt's transformer.h"
" (c++). Designed for the OPUS-NMT translation checkpoints. Available "
"models are listed `here <https://huggingface.co/models?search=Helsinki-"
"NLP>`__.  Examples::      >>> from transformers import MarianTokenizer, "
"MarianMTModel     >>> from typing import List     >>> src = 'fr'  # "
"source language     >>> trg = 'en'  # target language     >>> sample_text"
" = \"oÃ¹ est l'arrÃªt de bus ?\"     >>> model_name = f'Helsinki-NLP/opus-"
"mt-{src}-{trg}'      >>> model = "
"MarianMTModel.from_pretrained(model_name)     >>> tokenizer = "
"MarianTokenizer.from_pretrained(model_name)     >>> batch = "
"tokenizer([sample_text], return_tensors=\"pt\")     >>> gen = "
"model.generate(**batch)     >>> tokenizer.batch_decode(gen, "
"skip_special_tokens=True)     \"Where is the bus stop ?\""
msgstr ""

#: of transformers.MarianMTModel.forward:99
msgid ""
"A :class:`~transformers.modeling_outputs.Seq2SeqLMOutput` or a tuple of "
":obj:`torch.FloatTensor` (if ``return_dict=False`` is passed or when "
"``config.return_dict=False``) comprising various elements depending on "
"the configuration (:class:`~transformers.MarianConfig`) and inputs."
msgstr ""

#: of transformers.MarianMTModel.forward:103
msgid ""
"**loss** (:obj:`torch.FloatTensor` of shape :obj:`(1,)`, `optional`, "
"returned when :obj:`labels` is provided) -- Language modeling loss."
msgstr ""

#: of transformers.MarianForCausalLM.forward:76
#: transformers.MarianMTModel.forward:104
msgid ""
"**logits** (:obj:`torch.FloatTensor` of shape :obj:`(batch_size, "
"sequence_length, config.vocab_size)`) -- Prediction scores of the "
"language modeling head (scores for each vocabulary token before SoftMax)."
msgstr ""

#: of transformers.MarianMTModel.forward:138
msgid ""
"Pytorch version of marian-nmt's transformer.h (c++). Designed for the "
"OPUS-NMT translation checkpoints. Available models are listed `here "
"<https://huggingface.co/models?search=Helsinki-NLP>`__."
msgstr ""

#: of transformers.MarianMTModel.forward:156
msgid ""
":class:`~transformers.modeling_outputs.Seq2SeqLMOutput` or "
":obj:`tuple(torch.FloatTensor)`"
msgstr ""

#: ../../source/model_doc/marian.rst:201
msgid "MarianForCausalLM"
msgstr ""

#: of transformers.MarianForCausalLM.forward:69
msgid "Args:"
msgstr ""

#: of transformers.MarianForCausalLM.forward:9
msgid ""
"input_ids (:obj:`torch.LongTensor` of shape :obj:`(batch_size, "
"sequence_length)`):"
msgstr ""

#: of transformers.MarianForCausalLM.forward:16
msgid ""
"attention_mask (:obj:`torch.Tensor` of shape :obj:`(batch_size, "
"sequence_length)`, `optional`):"
msgstr ""

#: of transformers.MarianForCausalLM.forward:19
msgid ""
"encoder_hidden_states  (:obj:`torch.FloatTensor` of shape "
":obj:`(batch_size, sequence_length, hidden_size)`, `optional`):"
msgstr ""

#: of transformers.MarianForCausalLM.forward:19
msgid ""
"Sequence of hidden-states at the output of the last layer of the encoder."
" Used in the cross-attention if the model is configured as a decoder."
msgstr ""

#: of transformers.MarianForCausalLM.forward:22
msgid ""
"encoder_attention_mask (:obj:`torch.FloatTensor` of shape "
":obj:`(batch_size, sequence_length)`, `optional`):"
msgstr ""

#: of transformers.MarianForCausalLM.forward:22
msgid ""
"Mask to avoid performing attention on the padding token indices of the "
"encoder input. This mask is used in the cross-attention if the model is "
"configured as a decoder. Mask values selected in ``[0, 1]``:"
msgstr ""

#: of transformers.MarianForCausalLM.forward:28
msgid ""
"head_mask (:obj:`torch.Tensor` of shape :obj:`(decoder_layers, "
"decoder_attention_heads)`, `optional`):"
msgstr ""

#: of transformers.MarianForCausalLM.forward:25
msgid ""
"Mask to nullify selected heads of the attention modules. Mask values "
"selected in ``[0, 1]``:"
msgstr ""

#: of transformers.MarianForCausalLM.forward:34
msgid ""
"cross_attn_head_mask (:obj:`torch.Tensor` of shape :obj:`(decoder_layers,"
" decoder_attention_heads)`, `optional`):"
msgstr ""

#: of transformers.MarianForCausalLM.forward:31
#: transformers.TFMarianMTModel.call:47 transformers.TFMarianModel.call:47
msgid ""
"Mask to nullify selected heads of the cross-attention modules. Mask "
"values selected in ``[0, 1]``:"
msgstr ""

#: of transformers.MarianForCausalLM.forward:48
msgid ""
"past_key_values (:obj:`tuple(tuple(torch.FloatTensor))`, `optional`, "
"returned when ``use_cache=True`` is passed or when "
"``config.use_cache=True``):"
msgstr ""

#: of transformers.MarianForCausalLM.forward:37
msgid ""
"Tuple of :obj:`tuple(torch.FloatTensor)` of length "
":obj:`config.n_layers`, with each tuple having 2 tensors of shape "
":obj:`(batch_size, num_heads, sequence_length, embed_size_per_head)`) and"
" 2 additional tensors of shape :obj:`(batch_size, num_heads, "
"encoder_sequence_length, embed_size_per_head)`. The two additional "
"tensors are only required when the model is used as a decoder in a "
"Sequence to Sequence model."
msgstr ""

#: of transformers.MarianForCausalLM.forward:47
msgid ""
"If :obj:`past_key_values` are used, the user can optionally input only "
"the last ``decoder_input_ids`` (those that don't have their past key "
"value states given to this model) of shape :obj:`(batch_size, 1)` instead"
" of all ``decoder_input_ids`` of shape :obj:`(batch_size, "
"sequence_length)`."
msgstr ""

#: of transformers.MarianForCausalLM.forward:53
msgid ""
"labels (:obj:`torch.LongTensor` of shape :obj:`(batch_size, "
"sequence_length)`, `optional`):"
msgstr ""

#: of transformers.MarianForCausalLM.forward:59
msgid "use_cache (:obj:`bool`, `optional`):"
msgstr ""

#: of transformers.MarianForCausalLM.forward:62
msgid "output_attentions (:obj:`bool`, `optional`):"
msgstr ""

#: of transformers.MarianForCausalLM.forward:65
msgid "output_hidden_states (:obj:`bool`, `optional`):"
msgstr ""

#: of transformers.MarianForCausalLM.forward:69
msgid "return_dict (:obj:`bool`, `optional`):"
msgstr ""

#: of transformers.MarianForCausalLM.forward:71
msgid ""
"A "
":class:`~transformers.modeling_outputs.CausalLMOutputWithCrossAttentions`"
" or a tuple of :obj:`torch.FloatTensor` (if ``return_dict=False`` is "
"passed or when ``config.return_dict=False``) comprising various elements "
"depending on the configuration (:class:`~transformers.MarianConfig`) and "
"inputs.  - **loss** (:obj:`torch.FloatTensor` of shape :obj:`(1,)`, "
"`optional`, returned when :obj:`labels` is provided) -- Language modeling"
" loss (for next-token prediction). - **logits** (:obj:`torch.FloatTensor`"
" of shape :obj:`(batch_size, sequence_length, config.vocab_size)`) -- "
"Prediction scores of the language modeling head (scores for each "
"vocabulary token before SoftMax). - **hidden_states** "
"(:obj:`tuple(torch.FloatTensor)`, `optional`, returned when "
"``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of "
":obj:`torch.FloatTensor` (one for the output of the embeddings + one for "
"the output of each layer)   of shape :obj:`(batch_size, sequence_length, "
"hidden_size)`.    Hidden-states of the model at the output of each layer "
"plus the initial embedding outputs. - **attentions** "
"(:obj:`tuple(torch.FloatTensor)`, `optional`, returned when "
"``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`torch.FloatTensor` "
"(one for each layer) of shape :obj:`(batch_size, num_heads,   "
"sequence_length, sequence_length)`.    Attentions weights after the "
"attention softmax, used to compute the weighted average in the self-"
"attention   heads. - **cross_attentions** "
"(:obj:`tuple(torch.FloatTensor)`, `optional`, returned when "
"``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`torch.FloatTensor` "
"(one for each layer) of shape :obj:`(batch_size, num_heads,   "
"sequence_length, sequence_length)`.    Cross attentions weights after the"
" attention softmax, used to compute the weighted average in the   cross-"
"attention heads. - **past_key_values** "
"(:obj:`tuple(tuple(torch.FloatTensor))`, `optional`, returned when "
"``use_cache=True`` is passed or when ``config.use_cache=True``) -- Tuple "
"of :obj:`torch.FloatTensor` tuples of length :obj:`config.n_layers`, with"
" each tuple containing the   cached key, value states of the self-"
"attention and the cross-attention layers if model is used in   encoder-"
"decoder setting. Only relevant if ``config.is_decoder = True``.    "
"Contains pre-computed hidden-states (key and values in the attention "
"blocks) that can be used (see   :obj:`past_key_values` input) to speed up"
" sequential decoding.   Example::      >>> from transformers import "
"MarianTokenizer, MarianForCausalLM      >>> tokenizer = "
"MarianTokenizer.from_pretrained('facebook/bart-large')     >>> model = "
"MarianForCausalLM.from_pretrained('facebook/bart-large', "
"add_cross_attention=False)     >>> assert model.config.is_decoder, "
"f\"{model.__class__} has to be configured as a decoder.\"     >>> inputs "
"= tokenizer(\"Hello, my dog is cute\", return_tensors=\"pt\")     >>> "
"outputs = model(**inputs)      >>> last_hidden_states = "
"outputs.last_hidden_state"
msgstr ""

#: of transformers.MarianForCausalLM.forward:71
msgid ""
"A "
":class:`~transformers.modeling_outputs.CausalLMOutputWithCrossAttentions`"
" or a tuple of :obj:`torch.FloatTensor` (if ``return_dict=False`` is "
"passed or when ``config.return_dict=False``) comprising various elements "
"depending on the configuration (:class:`~transformers.MarianConfig`) and "
"inputs."
msgstr ""

#: of transformers.MarianForCausalLM.forward:75
msgid ""
"**loss** (:obj:`torch.FloatTensor` of shape :obj:`(1,)`, `optional`, "
"returned when :obj:`labels` is provided) -- Language modeling loss (for "
"next-token prediction)."
msgstr ""

#: of transformers.MarianForCausalLM.forward:77
msgid ""
"**hidden_states** (:obj:`tuple(torch.FloatTensor)`, `optional`, returned "
"when ``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of "
":obj:`torch.FloatTensor` (one for the output of the embeddings + one for "
"the output of each layer) of shape :obj:`(batch_size, sequence_length, "
"hidden_size)`."
msgstr ""

#: of transformers.MarianForCausalLM.forward:80
msgid ""
"Hidden-states of the model at the output of each layer plus the initial "
"embedding outputs."
msgstr ""

#: of transformers.MarianForCausalLM.forward:81
msgid ""
"**attentions** (:obj:`tuple(torch.FloatTensor)`, `optional`, returned "
"when ``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`torch.FloatTensor` "
"(one for each layer) of shape :obj:`(batch_size, num_heads, "
"sequence_length, sequence_length)`."
msgstr ""

#: of transformers.MarianForCausalLM.forward:84
msgid ""
"Attentions weights after the attention softmax, used to compute the "
"weighted average in the self-attention heads."
msgstr ""

#: of transformers.MarianForCausalLM.forward:89
msgid ""
"Cross attentions weights after the attention softmax, used to compute the"
" weighted average in the cross-attention heads."
msgstr ""

#: of transformers.MarianForCausalLM.forward:91
msgid ""
"**past_key_values** (:obj:`tuple(tuple(torch.FloatTensor))`, `optional`, "
"returned when ``use_cache=True`` is passed or when "
"``config.use_cache=True``) -- Tuple of :obj:`torch.FloatTensor` tuples of"
" length :obj:`config.n_layers`, with each tuple containing the cached "
"key, value states of the self-attention and the cross-attention layers if"
" model is used in encoder-decoder setting. Only relevant if "
"``config.is_decoder = True``."
msgstr ""

#: of transformers.MarianForCausalLM.forward:95
msgid ""
"Contains pre-computed hidden-states (key and values in the attention "
"blocks) that can be used (see :obj:`past_key_values` input) to speed up "
"sequential decoding."
msgstr ""

#: of transformers.MarianForCausalLM.forward:110
msgid ""
":class:`~transformers.modeling_outputs.CausalLMOutputWithCrossAttentions`"
" or :obj:`tuple(torch.FloatTensor)`"
msgstr ""

#: ../../source/model_doc/marian.rst:208
msgid "TFMarianModel"
msgstr ""

#: of transformers.TFMarianModel:1
msgid ""
"The bare MARIAN Model outputting raw hidden-states without any specific "
"head on top. This model inherits from "
":class:`~transformers.TFPreTrainedModel`. Check the superclass "
"documentation for the generic methods the library implements for all its "
"model (such as downloading or saving, resizing the input embeddings, "
"pruning heads etc.)"
msgstr ""

#: of transformers.TFMarianMTModel:6 transformers.TFMarianModel:6
msgid ""
"This model is also a `tf.keras.Model "
"<https://www.tensorflow.org/api_docs/python/tf/keras/Model>`__ subclass. "
"Use it as a regular TF 2.0 Keras Model and refer to the TF 2.0 "
"documentation for all matter related to general usage and behavior."
msgstr ""

#: of transformers.TFMarianMTModel:12 transformers.TFMarianModel:12
msgid "TF 2.0 models accepts two formats as inputs:"
msgstr ""

#: of transformers.TFMarianMTModel:14 transformers.TFMarianModel:14
msgid "having all inputs as keyword arguments (like PyTorch models), or"
msgstr ""

#: of transformers.TFMarianMTModel:15 transformers.TFMarianModel:15
msgid ""
"having all inputs as a list, tuple or dict in the first positional "
"arguments."
msgstr ""

#: of transformers.TFMarianMTModel:17 transformers.TFMarianModel:17
msgid ""
"This second option is useful when using :meth:`tf.keras.Model.fit` method"
" which currently requires having all the tensors in the first argument of"
" the model call function: :obj:`model(inputs)`."
msgstr ""

#: of transformers.TFMarianMTModel:20 transformers.TFMarianModel:20
msgid ""
"If you choose this second option, there are three possibilities you can "
"use to gather all the input Tensors in the first positional argument :"
msgstr ""

#: of transformers.TFMarianMTModel:23 transformers.TFMarianModel:23
msgid ""
"a single Tensor with :obj:`input_ids` only and nothing else: "
":obj:`model(input_ids)`"
msgstr ""

#: of transformers.TFMarianMTModel:24 transformers.TFMarianModel:24
msgid ""
"a list of varying length with one or several input Tensors IN THE ORDER "
"given in the docstring: :obj:`model([input_ids, attention_mask])` or "
":obj:`model([input_ids, attention_mask, token_type_ids])`"
msgstr ""

#: of transformers.TFMarianMTModel:26 transformers.TFMarianModel:26
msgid ""
"a dictionary with one or several input Tensors associated to the input "
"names given in the docstring: :obj:`model({\"input_ids\": input_ids, "
"\"token_type_ids\": token_type_ids})`"
msgstr ""

#: of transformers.TFMarianMTModel:29 transformers.TFMarianModel:29
msgid ""
"Model configuration class with all the parameters of the model. "
"Initializing with a config file does not load the weights associated with"
" the model, only the configuration. Check out the "
":meth:`~transformers.TFPreTrainedModel.from_pretrained` method to load "
"the model weights."
msgstr ""

#: of transformers.TFMarianModel.call:1
msgid ""
"The :class:`~transformers.TFMarianModel` forward method, overrides the "
":func:`__call__` special method."
msgstr ""

#: of transformers.TFMarianMTModel.call:8 transformers.TFMarianModel.call:8
msgid ""
"Indices of input sequence tokens in the vocabulary.  Indices can be "
"obtained using :class:`~transformers.MarianTokenizer`. See "
":meth:`transformers.PreTrainedTokenizer.encode` and "
":meth:`transformers.PreTrainedTokenizer.__call__` for details.  `What are"
" input IDs? <../glossary.html#input-ids>`__"
msgstr ""

#: of transformers.TFMarianMTModel.call:8 transformers.TFMarianModel.call:8
msgid "Indices of input sequence tokens in the vocabulary."
msgstr ""

#: of transformers.TFMarianMTModel.call:35 transformers.TFMarianModel.call:35
msgid ""
"will be made by default and ignore pad tokens. It is not recommended to "
"set this for most use cases."
msgstr ""

#: of transformers.TFMarianMTModel.call:47 transformers.TFMarianModel.call:47
msgid ""
"Mask to nullify selected heads of the cross-attention modules. Mask "
"values selected in ``[0, 1]``:  - 1 indicates the head is **not masked**,"
" - 0 indicates the head is **masked**."
msgstr ""

#: of transformers.TFMarianMTModel.call:52 transformers.TFMarianModel.call:52
msgid ""
"hidden states at the output of the last layer of the encoder. Used in the"
" cross-attention of the decoder. of shape :obj:`(batch_size, "
"sequence_length, hidden_size)` is a sequence of"
msgstr ""

#: of transformers.TFMarianMTModel.call:55 transformers.TFMarianModel.call:55
msgid ""
"contains precomputed key and value hidden states of the attention blocks."
" Can be used to speed up decoding. If :obj:`past_key_values` are used, "
"the user can optionally input only the last :obj:`decoder_input_ids` "
"(those that don't have their past key value states given to this model) "
"of shape :obj:`(batch_size, 1)` instead of all :obj:`decoder_input_ids` "
"of shape :obj:`(batch_size, sequence_length)`."
msgstr ""

#: of transformers.TFMarianMTModel.call:60 transformers.TFMarianModel.call:60
msgid ""
"If set to :obj:`True`, :obj:`past_key_values` key value states are "
"returned and can be used to speed up decoding (see "
":obj:`past_key_values`). Set to :obj:`False` during training, :obj:`True`"
" during generation"
msgstr ""

#: of transformers.TFMarianMTModel.call:63 transformers.TFMarianModel.call:63
msgid ""
"Whether or not to return the attentions tensors of all attention layers. "
"See ``attentions`` under returned tensors for more detail. This argument "
"can be used only in eager mode, in graph mode the value in the config "
"will be used instead."
msgstr ""

#: of transformers.TFMarianMTModel.call:67 transformers.TFMarianModel.call:67
msgid ""
"Whether or not to return the hidden states of all layers. See "
"``hidden_states`` under returned tensors for more detail. This argument "
"can be used only in eager mode, in graph mode the value in the config "
"will be used instead."
msgstr ""

#: of transformers.TFMarianMTModel.call:71 transformers.TFMarianModel.call:71
msgid ""
"Whether or not to return a :class:`~transformers.file_utils.ModelOutput` "
"instead of a plain tuple. This argument can be used in eager mode, in "
"graph mode the value will always be set to True."
msgstr ""

#: of transformers.TFMarianMTModel.call:74 transformers.TFMarianModel.call:74
msgid ""
"Whether or not to use the model in training mode (some modules like "
"dropout modules have different behaviors between training and "
"evaluation)."
msgstr ""

#: of transformers.TFMarianModel.call:78
msgid ""
"A :class:`~transformers.modeling_tf_outputs.TFSeq2SeqModelOutput` or a "
"tuple of :obj:`tf.Tensor` (if ``return_dict=False`` is passed or when "
"``config.return_dict=False``) comprising various elements depending on "
"the configuration (:class:`~transformers.MarianConfig`) and inputs.  - "
"**last_hidden_state** (:obj:`tf.Tensor` of shape :obj:`(batch_size, "
"sequence_length, hidden_size)`) -- Sequence of hidden-states at the "
"output of the last layer of the decoder of the model.    If "
":obj:`past_key_values` is used only the last hidden-state of the "
"sequences of shape :obj:`(batch_size,   1, hidden_size)` is output. - "
"**past_key_values** (:obj:`List[tf.Tensor]`, `optional`, returned when "
"``use_cache=True`` is passed or when ``config.use_cache=True``) -- List "
"of :obj:`tf.Tensor` of length :obj:`config.n_layers`, with each tensor of"
" shape :obj:`(2, batch_size,   num_heads, sequence_length, "
"embed_size_per_head)`).    Contains pre-computed hidden-states (key and "
"values in the attention blocks) of the decoder that can be   used (see "
":obj:`past_key_values` input) to speed up sequential decoding. - "
"**decoder_hidden_states** (:obj:`tuple(tf.Tensor)`, `optional`, returned "
"when ``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of :obj:`tf.Tensor` (one "
"for the output of the embeddings + one for the output of each layer) of"
"   shape :obj:`(batch_size, sequence_length, hidden_size)`.    Hidden-"
"states of the decoder at the output of each layer plus the initial "
"embedding outputs. - **decoder_attentions** (:obj:`tuple(tf.Tensor)`, "
"`optional`, returned when ``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`tf.Tensor` (one for "
"each layer) of shape :obj:`(batch_size, num_heads, sequence_length,   "
"sequence_length)`.    Attentions weights of the decoder, after the "
"attention softmax, used to compute the weighted average in the   self-"
"attention heads. - **cross_attentions** (:obj:`tuple(tf.Tensor)`, "
"`optional`, returned when ``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`tf.Tensor` (one for "
"each layer) of shape :obj:`(batch_size, num_heads, sequence_length,   "
"sequence_length)`.    Attentions weights of the decoder's cross-attention"
" layer, after the attention softmax, used to compute the   weighted "
"average in the cross-attention heads. - **encoder_last_hidden_state** "
"(:obj:`tf.Tensor` of shape :obj:`(batch_size, sequence_length, "
"hidden_size)`, `optional`) -- Sequence of hidden-states at the output of "
"the last layer of the encoder of the model. - **encoder_hidden_states** "
"(:obj:`tuple(tf.Tensor)`, `optional`, returned when "
"``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of :obj:`tf.Tensor` (one "
"for the output of the embeddings + one for the output of each layer) of"
"   shape :obj:`(batch_size, sequence_length, hidden_size)`.    Hidden-"
"states of the encoder at the output of each layer plus the initial "
"embedding outputs. - **encoder_attentions** (:obj:`tuple(tf.Tensor)`, "
"`optional`, returned when ``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`tf.Tensor` (one for "
"each layer) of shape :obj:`(batch_size, num_heads, sequence_length,   "
"sequence_length)`.    Attentions weights of the encoder, after the "
"attention softmax, used to compute the weighted average in the   self-"
"attention heads."
msgstr ""

#: of transformers.TFMarianModel.call:78
msgid ""
"A :class:`~transformers.modeling_tf_outputs.TFSeq2SeqModelOutput` or a "
"tuple of :obj:`tf.Tensor` (if ``return_dict=False`` is passed or when "
"``config.return_dict=False``) comprising various elements depending on "
"the configuration (:class:`~transformers.MarianConfig`) and inputs."
msgstr ""

#: of transformers.TFMarianModel.call:82
msgid ""
"**last_hidden_state** (:obj:`tf.Tensor` of shape :obj:`(batch_size, "
"sequence_length, hidden_size)`) -- Sequence of hidden-states at the "
"output of the last layer of the decoder of the model."
msgstr ""

#: of transformers.TFMarianMTModel.call:88 transformers.TFMarianModel.call:86
msgid ""
"**past_key_values** (:obj:`List[tf.Tensor]`, `optional`, returned when "
"``use_cache=True`` is passed or when ``config.use_cache=True``) -- List "
"of :obj:`tf.Tensor` of length :obj:`config.n_layers`, with each tensor of"
" shape :obj:`(2, batch_size, num_heads, sequence_length, "
"embed_size_per_head)`)."
msgstr ""

#: of transformers.TFMarianMTModel.call:91 transformers.TFMarianModel.call:89
msgid ""
"Contains pre-computed hidden-states (key and values in the attention "
"blocks) of the decoder that can be used (see :obj:`past_key_values` "
"input) to speed up sequential decoding."
msgstr ""

#: of transformers.TFMarianMTModel.call:93 transformers.TFMarianModel.call:91
msgid ""
"**decoder_hidden_states** (:obj:`tuple(tf.Tensor)`, `optional`, returned "
"when ``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of :obj:`tf.Tensor` (one "
"for the output of the embeddings + one for the output of each layer) of "
"shape :obj:`(batch_size, sequence_length, hidden_size)`."
msgstr ""

#: of transformers.TFMarianMTModel.call:97 transformers.TFMarianModel.call:95
msgid ""
"**decoder_attentions** (:obj:`tuple(tf.Tensor)`, `optional`, returned "
"when ``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`tf.Tensor` (one for "
"each layer) of shape :obj:`(batch_size, num_heads, sequence_length, "
"sequence_length)`."
msgstr ""

#: of transformers.TFMarianMTModel.call:102 transformers.TFMarianModel.call:100
msgid ""
"**cross_attentions** (:obj:`tuple(tf.Tensor)`, `optional`, returned when "
"``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`tf.Tensor` (one for "
"each layer) of shape :obj:`(batch_size, num_heads, sequence_length, "
"sequence_length)`."
msgstr ""

#: of transformers.TFMarianMTModel.call:107 transformers.TFMarianModel.call:105
msgid ""
"**encoder_last_hidden_state** (:obj:`tf.Tensor` of shape "
":obj:`(batch_size, sequence_length, hidden_size)`, `optional`) -- "
"Sequence of hidden-states at the output of the last layer of the encoder "
"of the model."
msgstr ""

#: of transformers.TFMarianMTModel.call:108 transformers.TFMarianModel.call:106
msgid ""
"**encoder_hidden_states** (:obj:`tuple(tf.Tensor)`, `optional`, returned "
"when ``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of :obj:`tf.Tensor` (one "
"for the output of the embeddings + one for the output of each layer) of "
"shape :obj:`(batch_size, sequence_length, hidden_size)`."
msgstr ""

#: of transformers.TFMarianMTModel.call:112 transformers.TFMarianModel.call:110
msgid ""
"**encoder_attentions** (:obj:`tuple(tf.Tensor)`, `optional`, returned "
"when ``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`tf.Tensor` (one for "
"each layer) of shape :obj:`(batch_size, num_heads, sequence_length, "
"sequence_length)`."
msgstr ""

#: of transformers.TFMarianModel.call:115
msgid ""
":class:`~transformers.modeling_tf_outputs.TFSeq2SeqModelOutput` or "
":obj:`tuple(tf.Tensor)`"
msgstr ""

#: ../../source/model_doc/marian.rst:215
msgid "TFMarianMTModel"
msgstr ""

#: of transformers.TFMarianMTModel:1
msgid ""
"The MARIAN Model with a language modeling head. Can be used for "
"summarization. This model inherits from "
":class:`~transformers.TFPreTrainedModel`. Check the superclass "
"documentation for the generic methods the library implements for all its "
"model (such as downloading or saving, resizing the input embeddings, "
"pruning heads etc.)"
msgstr ""

#: of transformers.TFMarianMTModel.call:1
msgid ""
"The :class:`~transformers.TFMarianMTModel` forward method, overrides the "
":func:`__call__` special method."
msgstr ""

#: of transformers.TFMarianMTModel.call:82
msgid ""
"A :class:`~transformers.modeling_tf_outputs.TFSeq2SeqLMOutput` or a tuple"
" of :obj:`tf.Tensor` (if ``return_dict=False`` is passed or when "
"``config.return_dict=False``) comprising various elements depending on "
"the configuration (:class:`~transformers.MarianConfig`) and inputs.  - "
"**loss** (:obj:`tf.Tensor` of shape :obj:`(n,)`, `optional`, where n is "
"the number of non-masked labels, returned when :obj:`labels` is provided)"
" -- Language modeling loss. - **logits** (:obj:`tf.Tensor` of shape "
":obj:`(batch_size, sequence_length, config.vocab_size)`) -- Prediction "
"scores of the language modeling head (scores for each vocabulary token "
"before SoftMax). - **past_key_values** (:obj:`List[tf.Tensor]`, "
"`optional`, returned when ``use_cache=True`` is passed or when "
"``config.use_cache=True``) -- List of :obj:`tf.Tensor` of length "
":obj:`config.n_layers`, with each tensor of shape :obj:`(2, batch_size,"
"   num_heads, sequence_length, embed_size_per_head)`).    Contains pre-"
"computed hidden-states (key and values in the attention blocks) of the "
"decoder that can be   used (see :obj:`past_key_values` input) to speed up"
" sequential decoding. - **decoder_hidden_states** "
"(:obj:`tuple(tf.Tensor)`, `optional`, returned when "
"``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of :obj:`tf.Tensor` (one "
"for the output of the embeddings + one for the output of each layer) of"
"   shape :obj:`(batch_size, sequence_length, hidden_size)`.    Hidden-"
"states of the decoder at the output of each layer plus the initial "
"embedding outputs. - **decoder_attentions** (:obj:`tuple(tf.Tensor)`, "
"`optional`, returned when ``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`tf.Tensor` (one for "
"each layer) of shape :obj:`(batch_size, num_heads, sequence_length,   "
"sequence_length)`.    Attentions weights of the decoder, after the "
"attention softmax, used to compute the weighted average in the   self-"
"attention heads. - **cross_attentions** (:obj:`tuple(tf.Tensor)`, "
"`optional`, returned when ``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`tf.Tensor` (one for "
"each layer) of shape :obj:`(batch_size, num_heads, sequence_length,   "
"sequence_length)`.    Attentions weights of the decoder's cross-attention"
" layer, after the attention softmax, used to compute the   weighted "
"average in the cross-attention heads. - **encoder_last_hidden_state** "
"(:obj:`tf.Tensor` of shape :obj:`(batch_size, sequence_length, "
"hidden_size)`, `optional`) -- Sequence of hidden-states at the output of "
"the last layer of the encoder of the model. - **encoder_hidden_states** "
"(:obj:`tuple(tf.Tensor)`, `optional`, returned when "
"``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of :obj:`tf.Tensor` (one "
"for the output of the embeddings + one for the output of each layer) of"
"   shape :obj:`(batch_size, sequence_length, hidden_size)`.    Hidden-"
"states of the encoder at the output of each layer plus the initial "
"embedding outputs. - **encoder_attentions** (:obj:`tuple(tf.Tensor)`, "
"`optional`, returned when ``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`tf.Tensor` (one for "
"each layer) of shape :obj:`(batch_size, num_heads, sequence_length,   "
"sequence_length)`.    Attentions weights of the encoder, after the "
"attention softmax, used to compute the weighted average in the   self-"
"attention heads.    TF version of marian-nmt's transformer.h (c++). "
"Designed for the OPUS-NMT translation checkpoints. Available models are "
"listed `here <https://huggingface.co/models?search=Helsinki-NLP>`__.  "
"Examples::      >>> from transformers import MarianTokenizer, "
"TFMarianMTModel     >>> from typing import List     >>> src = 'fr'  # "
"source language     >>> trg = 'en'  # target language     >>> sample_text"
" = \"oÃ¹ est l'arrÃªt de bus ?\"     >>> model_name = f'Helsinki-NLP/opus-"
"mt-{src}-{trg}'      >>> model = "
"TFMarianMTModel.from_pretrained(model_name)     >>> tokenizer = "
"MarianTokenizer.from_pretrained(model_name)     >>> batch = "
"tokenizer([sample_text], return_tensors=\"tf\")     >>> gen = "
"model.generate(**batch)     >>> tokenizer.batch_decode(gen, "
"skip_special_tokens=True)     \"Where is the bus stop ?\""
msgstr ""

#: of transformers.TFMarianMTModel.call:82
msgid ""
"A :class:`~transformers.modeling_tf_outputs.TFSeq2SeqLMOutput` or a tuple"
" of :obj:`tf.Tensor` (if ``return_dict=False`` is passed or when "
"``config.return_dict=False``) comprising various elements depending on "
"the configuration (:class:`~transformers.MarianConfig`) and inputs."
msgstr ""

#: of transformers.TFMarianMTModel.call:86
msgid ""
"**loss** (:obj:`tf.Tensor` of shape :obj:`(n,)`, `optional`, where n is "
"the number of non-masked labels, returned when :obj:`labels` is provided)"
" -- Language modeling loss."
msgstr ""

#: of transformers.TFMarianMTModel.call:87
msgid ""
"**logits** (:obj:`tf.Tensor` of shape :obj:`(batch_size, sequence_length,"
" config.vocab_size)`) -- Prediction scores of the language modeling head "
"(scores for each vocabulary token before SoftMax)."
msgstr ""

#: of transformers.TFMarianMTModel.call:120
msgid ""
"TF version of marian-nmt's transformer.h (c++). Designed for the OPUS-NMT"
" translation checkpoints. Available models are listed `here "
"<https://huggingface.co/models?search=Helsinki-NLP>`__."
msgstr ""

#: of transformers.TFMarianMTModel.call:138
msgid ""
":class:`~transformers.modeling_tf_outputs.TFSeq2SeqLMOutput` or "
":obj:`tuple(tf.Tensor)`"
msgstr ""

#: ../../source/model_doc/marian.rst:222
msgid "FlaxMarianModel"
msgstr ""

#: of transformers.FlaxMarianModel:1
msgid ""
"The bare Marian Model transformer outputting raw hidden-states without "
"any specific head on top. This model inherits from "
":class:`~transformers.FlaxPreTrainedModel`. Check the superclass "
"documentation for the generic methods the library implements for all its "
"model (such as downloading or saving, resizing the input embeddings, "
"pruning heads etc.)"
msgstr ""

#: of transformers.FlaxMarianMTModel:6 transformers.FlaxMarianModel:6
msgid ""
"This model is also a Flax Linen `flax.nn.Module "
"<https://flax.readthedocs.io/en/latest/_autosummary/flax.nn.module.html>`__"
" subclass. Use it as a regular Flax Module and refer to the Flax "
"documentation for all matter related to general usage and behavior."
msgstr ""

#: of transformers.FlaxMarianMTModel:10 transformers.FlaxMarianModel:10
msgid "Finally, this model supports inherent JAX features such as:"
msgstr ""

#: of transformers.FlaxMarianMTModel:12 transformers.FlaxMarianModel:12
msgid ""
"`Just-In-Time (JIT) compilation "
"<https://jax.readthedocs.io/en/latest/jax.html#just-in-time-compilation-"
"jit>`__"
msgstr ""

#: of transformers.FlaxMarianMTModel:13 transformers.FlaxMarianModel:13
msgid ""
"`Automatic Differentiation <https://jax.readthedocs.io/en/latest/jax.html"
"#automatic-differentiation>`__"
msgstr ""

#: of transformers.FlaxMarianMTModel:14 transformers.FlaxMarianModel:14
msgid ""
"`Vectorization <https://jax.readthedocs.io/en/latest/jax.html"
"#vectorization-vmap>`__"
msgstr ""

#: of transformers.FlaxMarianMTModel:15 transformers.FlaxMarianModel:15
msgid ""
"`Parallelization <https://jax.readthedocs.io/en/latest/jax.html"
"#parallelization-pmap>`__"
msgstr ""

#: of transformers.FlaxMarianMTModel:17 transformers.FlaxMarianModel:17
msgid ""
"Model configuration class with all the parameters of the model. "
"Initializing with a config file does not load the weights associated with"
" the model, only the configuration. Check out the "
":meth:`~transformers.FlaxPreTrainedModel.from_pretrained` method to load "
"the model weights."
msgstr ""

#: of transformers.FlaxMarianMTModel.__call__:1
#: transformers.FlaxMarianModel.__call__:1
msgid ""
"The :class:`~transformers.FlaxMarianPreTrainedModel` forward method, "
"overrides the :func:`__call__` special method."
msgstr ""

#: of transformers.FlaxMarianMTModel.__call__:24
#: transformers.FlaxMarianModel.__call__:24
msgid ""
"Indices of decoder input sequence tokens in the vocabulary.  Indices can "
"be obtained using :class:`~transformers.MarianTokenizer`. See "
":meth:`transformers.PreTrainedTokenizer.encode` and "
":meth:`transformers.PreTrainedTokenizer.__call__` for details.  `What are"
" decoder input IDs? <../glossary.html#decoder-input-ids>`__  For "
"translation and summarization training, :obj:`decoder_input_ids` should "
"be provided. If no :obj:`decoder_input_ids` is provided, the model will "
"create this tensor by shifting the :obj:`input_ids` to the right for "
"denoising pre-training following the paper."
msgstr ""

#: of transformers.FlaxMarianMTModel.__call__:32
#: transformers.FlaxMarianModel.__call__:32
msgid ""
"For translation and summarization training, :obj:`decoder_input_ids` "
"should be provided. If no :obj:`decoder_input_ids` is provided, the model"
" will create this tensor by shifting the :obj:`input_ids` to the right "
"for denoising pre-training following the paper."
msgstr ""

#: of transformers.FlaxMarianMTModel.__call__:36
#: transformers.FlaxMarianModel.__call__:36
msgid ""
"Default behavior: generate a tensor that ignores pad tokens in "
":obj:`decoder_input_ids`. Causal mask will also be used by default.  If "
"you want to change padding behavior, you should modify to your needs. See"
" diagram 1 in `the paper <https://arxiv.org/abs/1910.13461>`__ for more "
"information on the default strategy."
msgstr ""

#: of transformers.FlaxMarianMTModel.__call__:39
#: transformers.FlaxMarianModel.__call__:39
msgid ""
"If you want to change padding behavior, you should modify to your needs. "
"See diagram 1 in `the paper <https://arxiv.org/abs/1910.13461>`__ for "
"more information on the default strategy."
msgstr ""

#: of transformers.FlaxMarianMTModel.__call__:42
#: transformers.FlaxMarianModel.__call__:42
msgid ""
"Indices of positions of each input sequence tokens in the position "
"embeddings. Selected in the range ``[0, config.max_position_embeddings - "
"1]``."
msgstr ""

#: of transformers.FlaxMarianMTModel.__call__:45
#: transformers.FlaxMarianModel.__call__:45
msgid ""
"Indices of positions of each decoder input sequence tokens in the "
"position embeddings. Selected in the range ``[0, "
"config.max_position_embeddings - 1]``."
msgstr ""

#: of transformers.FlaxMarianModel.__call__:57
msgid ""
"A :class:`~transformers.modeling_flax_outputs.FlaxSeq2SeqModelOutput` or "
"a tuple of :obj:`torch.FloatTensor` (if ``return_dict=False`` is passed "
"or when ``config.return_dict=False``) comprising various elements "
"depending on the configuration (:class:`~transformers.MarianConfig`) and "
"inputs.  - **last_hidden_state** (:obj:`jnp.ndarray` of shape "
":obj:`(batch_size, sequence_length, hidden_size)`) -- Sequence of hidden-"
"states at the output of the last layer of the decoder of the model.    If"
" :obj:`past_key_values` is used only the last hidden-state of the "
"sequences of shape :obj:`(batch_size,   1, hidden_size)` is output. - "
"**past_key_values** (:obj:`tuple(tuple(jnp.ndarray))`, `optional`, "
"returned when ``use_cache=True`` is passed or when "
"``config.use_cache=True``) -- Tuple of :obj:`tuple(jnp.ndarray)` of "
"length :obj:`config.n_layers`, with each tuple having 2 tensors of   "
"shape :obj:`(batch_size, num_heads, sequence_length, "
"embed_size_per_head)`) and 2 additional tensors of   shape "
":obj:`(batch_size, num_heads, encoder_sequence_length, "
"embed_size_per_head)`.    Contains pre-computed hidden-states (key and "
"values in the self-attention blocks and in the cross-attention   blocks) "
"that can be used (see :obj:`past_key_values` input) to speed up "
"sequential decoding. - **decoder_hidden_states** "
"(:obj:`tuple(jnp.ndarray)`, `optional`, returned when "
"``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of :obj:`jnp.ndarray` (one"
" for the output of the embeddings + one for the output of each layer) of"
"   shape :obj:`(batch_size, sequence_length, hidden_size)`.    Hidden-"
"states of the decoder at the output of each layer plus the initial "
"embedding outputs. - **decoder_attentions** (:obj:`tuple(jnp.ndarray)`, "
"`optional`, returned when ``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`jnp.ndarray` (one "
"for each layer) of shape :obj:`(batch_size, num_heads, sequence_length,"
"   sequence_length)`.    Attentions weights of the decoder, after the "
"attention softmax, used to compute the weighted average in the   self-"
"attention heads. - **cross_attentions** (:obj:`tuple(jnp.ndarray)`, "
"`optional`, returned when ``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`jnp.ndarray` (one "
"for each layer) of shape :obj:`(batch_size, num_heads, sequence_length,"
"   sequence_length)`.    Attentions weights of the decoder's cross-"
"attention layer, after the attention softmax, used to compute the   "
"weighted average in the cross-attention heads. - "
"**encoder_last_hidden_state** (:obj:`jnp.ndarray` of shape "
":obj:`(batch_size, sequence_length, hidden_size)`, `optional`) -- "
"Sequence of hidden-states at the output of the last layer of the encoder "
"of the model. - **encoder_hidden_states** (:obj:`tuple(jnp.ndarray)`, "
"`optional`, returned when ``output_hidden_states=True`` is passed or when"
" ``config.output_hidden_states=True``) -- Tuple of :obj:`jnp.ndarray` "
"(one for the output of the embeddings + one for the output of each layer)"
" of   shape :obj:`(batch_size, sequence_length, hidden_size)`.    Hidden-"
"states of the encoder at the output of each layer plus the initial "
"embedding outputs. - **encoder_attentions** (:obj:`tuple(jnp.ndarray)`, "
"`optional`, returned when ``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`jnp.ndarray` (one "
"for each layer) of shape :obj:`(batch_size, num_heads, sequence_length,"
"   sequence_length)`.    Attentions weights of the encoder, after the "
"attention softmax, used to compute the weighted average in the   self-"
"attention heads."
msgstr ""

#: of transformers.FlaxMarianModel.__call__:57
msgid ""
"A :class:`~transformers.modeling_flax_outputs.FlaxSeq2SeqModelOutput` or "
"a tuple of :obj:`torch.FloatTensor` (if ``return_dict=False`` is passed "
"or when ``config.return_dict=False``) comprising various elements "
"depending on the configuration (:class:`~transformers.MarianConfig`) and "
"inputs."
msgstr ""

#: of transformers.FlaxMarianModel.__call__:61
msgid ""
"**last_hidden_state** (:obj:`jnp.ndarray` of shape :obj:`(batch_size, "
"sequence_length, hidden_size)`) -- Sequence of hidden-states at the "
"output of the last layer of the decoder of the model."
msgstr ""

#: of transformers.FlaxMarianModel.__call__:65
msgid ""
"**past_key_values** (:obj:`tuple(tuple(jnp.ndarray))`, `optional`, "
"returned when ``use_cache=True`` is passed or when "
"``config.use_cache=True``) -- Tuple of :obj:`tuple(jnp.ndarray)` of "
"length :obj:`config.n_layers`, with each tuple having 2 tensors of shape "
":obj:`(batch_size, num_heads, sequence_length, embed_size_per_head)`) and"
" 2 additional tensors of shape :obj:`(batch_size, num_heads, "
"encoder_sequence_length, embed_size_per_head)`."
msgstr ""

#: of transformers.FlaxMarianModel.__call__:71
msgid ""
"**decoder_hidden_states** (:obj:`tuple(jnp.ndarray)`, `optional`, "
"returned when ``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of :obj:`jnp.ndarray` (one"
" for the output of the embeddings + one for the output of each layer) of "
"shape :obj:`(batch_size, sequence_length, hidden_size)`."
msgstr ""

#: of transformers.FlaxMarianModel.__call__:75
msgid ""
"**decoder_attentions** (:obj:`tuple(jnp.ndarray)`, `optional`, returned "
"when ``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`jnp.ndarray` (one "
"for each layer) of shape :obj:`(batch_size, num_heads, sequence_length, "
"sequence_length)`."
msgstr ""

#: of transformers.FlaxMarianModel.__call__:80
msgid ""
"**cross_attentions** (:obj:`tuple(jnp.ndarray)`, `optional`, returned "
"when ``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`jnp.ndarray` (one "
"for each layer) of shape :obj:`(batch_size, num_heads, sequence_length, "
"sequence_length)`."
msgstr ""

#: of transformers.FlaxMarianModel.__call__:85
msgid ""
"**encoder_last_hidden_state** (:obj:`jnp.ndarray` of shape "
":obj:`(batch_size, sequence_length, hidden_size)`, `optional`) -- "
"Sequence of hidden-states at the output of the last layer of the encoder "
"of the model."
msgstr ""

#: of transformers.FlaxMarianModel.__call__:86
msgid ""
"**encoder_hidden_states** (:obj:`tuple(jnp.ndarray)`, `optional`, "
"returned when ``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of :obj:`jnp.ndarray` (one"
" for the output of the embeddings + one for the output of each layer) of "
"shape :obj:`(batch_size, sequence_length, hidden_size)`."
msgstr ""

#: of transformers.FlaxMarianModel.__call__:90
msgid ""
"**encoder_attentions** (:obj:`tuple(jnp.ndarray)`, `optional`, returned "
"when ``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`jnp.ndarray` (one "
"for each layer) of shape :obj:`(batch_size, num_heads, sequence_length, "
"sequence_length)`."
msgstr ""

#: of transformers.FlaxMarianModel.__call__:95
msgid ""
":class:`~transformers.modeling_flax_outputs.FlaxSeq2SeqModelOutput` or "
":obj:`tuple(torch.FloatTensor)`"
msgstr ""

#: ../../source/model_doc/marian.rst:229
msgid "FlaxMarianMTModel"
msgstr ""

#: of transformers.FlaxMarianMTModel:1
msgid ""
"The MARIAN Model with a language modeling head. Can be used for "
"translation. This model inherits from "
":class:`~transformers.FlaxPreTrainedModel`. Check the superclass "
"documentation for the generic methods the library implements for all its "
"model (such as downloading or saving, resizing the input embeddings, "
"pruning heads etc.)"
msgstr ""

#: of transformers.FlaxMarianMTModel.__call__:57
msgid "Returns:"
msgstr ""

