# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, The Hugging Face Team, Licenced under the Apache
# License, Version 2.0
# This file is distributed under the same license as the transformers
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: transformers \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-30 16:44+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/model_doc/mpnet.rst:14
msgid "MPNet"
msgstr ""

#: ../../source/model_doc/mpnet.rst:17
msgid "Overview"
msgstr ""

#: ../../source/model_doc/mpnet.rst:19
msgid ""
"The MPNet model was proposed in `MPNet: Masked and Permuted Pre-training "
"for Language Understanding <https://arxiv.org/abs/2004.09297>`__ by "
"Kaitao Song, Xu Tan, Tao Qin, Jianfeng Lu, Tie-Yan Liu."
msgstr ""

#: ../../source/model_doc/mpnet.rst:22
msgid ""
"MPNet adopts a novel pre-training method, named masked and permuted "
"language modeling, to inherit the advantages of masked language modeling "
"and permuted language modeling for natural language understanding."
msgstr ""

#: ../../source/model_doc/mpnet.rst:25
msgid "The abstract from the paper is the following:"
msgstr ""

#: ../../source/model_doc/mpnet.rst:27
msgid ""
"*BERT adopts masked language modeling (MLM) for pre-training and is one "
"of the most successful pre-training models. Since BERT neglects "
"dependency among predicted tokens, XLNet introduces permuted language "
"modeling (PLM) for pre-training to address this problem. However, XLNet "
"does not leverage the full position information of a sentence and thus "
"suffers from position discrepancy between pre-training and fine-tuning. "
"In this paper, we propose MPNet, a novel pre-training method that "
"inherits the advantages of BERT and XLNet and avoids their limitations. "
"MPNet leverages the dependency among predicted tokens through permuted "
"language modeling (vs. MLM in BERT), and takes auxiliary position "
"information as input to make the model see a full sentence and thus "
"reducing the position discrepancy (vs. PLM in XLNet). We pre-train MPNet "
"on a large-scale dataset (over 160GB text corpora) and fine-tune on a "
"variety of down-streaming tasks (GLUE, SQuAD, etc). Experimental results "
"show that MPNet outperforms MLM and PLM by a large margin, and achieves "
"better results on these tasks compared with previous state-of-the-art "
"pre-trained methods (e.g., BERT, XLNet, RoBERTa) under the same model "
"setting.*"
msgstr ""

#: ../../source/model_doc/mpnet.rst:39
msgid "Tips:"
msgstr ""

#: ../../source/model_doc/mpnet.rst:41
msgid ""
"MPNet doesn't have :obj:`token_type_ids`, you don't need to indicate "
"which token belongs to which segment. just separate your segments with "
"the separation token :obj:`tokenizer.sep_token` (or :obj:`[sep]`)."
msgstr ""

#: ../../source/model_doc/mpnet.rst:44
msgid ""
"The original code can be found `here "
"<https://github.com/microsoft/MPNet>`__."
msgstr ""

#: ../../source/model_doc/mpnet.rst:47
msgid "MPNetConfig"
msgstr ""

#: of transformers.MPNetConfig:1
msgid ""
"This is the configuration class to store the configuration of a "
":class:`~transformers.MPNetModel` or a "
":class:`~transformers.TFMPNetModel`. It is used to instantiate a MPNet "
"model according to the specified arguments, defining the model "
"architecture. Instantiating a configuration with the defaults will yield "
"a similar configuration to that of the MPNet `mpnet-base "
"<https://huggingface.co/mpnet-base>`__ architecture."
msgstr ""

#: of transformers.MPNetConfig:6
msgid ""
"Configuration objects inherit from "
":class:`~transformers.PretrainedConfig` and can be used to control the "
"model outputs. Read the documentation from "
":class:`~transformers.PretrainedConfig` for more information."
msgstr ""

#: of transformers.MPNetConfig transformers.MPNetForMaskedLM.forward
#: transformers.MPNetForMultipleChoice
#: transformers.MPNetForMultipleChoice.forward
#: transformers.MPNetForQuestionAnswering
#: transformers.MPNetForQuestionAnswering.forward
#: transformers.MPNetForSequenceClassification
#: transformers.MPNetForSequenceClassification.forward
#: transformers.MPNetForTokenClassification
#: transformers.MPNetForTokenClassification.forward transformers.MPNetModel
#: transformers.MPNetModel.forward transformers.MPNetTokenizer
#: transformers.MPNetTokenizer.build_inputs_with_special_tokens
#: transformers.MPNetTokenizer.create_token_type_ids_from_sequences
#: transformers.MPNetTokenizer.get_special_tokens_mask
#: transformers.MPNetTokenizer.save_vocabulary transformers.MPNetTokenizerFast
#: transformers.MPNetTokenizerFast.build_inputs_with_special_tokens
#: transformers.MPNetTokenizerFast.create_token_type_ids_from_sequences
#: transformers.MPNetTokenizerFast.save_vocabulary
#: transformers.TFMPNetForMaskedLM transformers.TFMPNetForMaskedLM.call
#: transformers.TFMPNetForMultipleChoice
#: transformers.TFMPNetForMultipleChoice.call
#: transformers.TFMPNetForQuestionAnswering
#: transformers.TFMPNetForQuestionAnswering.call
#: transformers.TFMPNetForSequenceClassification
#: transformers.TFMPNetForSequenceClassification.call
#: transformers.TFMPNetForTokenClassification
#: transformers.TFMPNetForTokenClassification.call transformers.TFMPNetModel
#: transformers.TFMPNetModel.call
msgid "Parameters"
msgstr ""

#: of transformers.MPNetConfig:9
msgid ""
"Vocabulary size of the MPNet model. Defines the number of different "
"tokens that can be represented by the :obj:`inputs_ids` passed when "
"calling :class:`~transformers.MPNetModel` or "
":class:`~transformers.TFMPNetModel`."
msgstr ""

#: of transformers.MPNetConfig:13
msgid "Dimensionality of the encoder layers and the pooler layer."
msgstr ""

#: of transformers.MPNetConfig:15
msgid "Number of hidden layers in the Transformer encoder."
msgstr ""

#: of transformers.MPNetConfig:17
msgid ""
"Number of attention heads for each attention layer in the Transformer "
"encoder."
msgstr ""

#: of transformers.MPNetConfig:19
msgid ""
"Dimensionality of the \"intermediate\" (often named feed-forward) layer "
"in the Transformer encoder."
msgstr ""

#: of transformers.MPNetConfig:21
msgid ""
"The non-linear activation function (function or string) in the encoder "
"and pooler. If string, :obj:`\"gelu\"`, :obj:`\"relu\"`, :obj:`\"silu\"` "
"and :obj:`\"gelu_new\"` are supported."
msgstr ""

#: of transformers.MPNetConfig:24
msgid ""
"The dropout probability for all fully connected layers in the embeddings,"
" encoder, and pooler."
msgstr ""

#: of transformers.MPNetConfig:26
msgid "The dropout ratio for the attention probabilities."
msgstr ""

#: of transformers.MPNetConfig:28
msgid ""
"The maximum sequence length that this model might ever be used with. "
"Typically set this to something large just in case (e.g., 512 or 1024 or "
"2048)."
msgstr ""

#: of transformers.MPNetConfig:31
msgid ""
"The standard deviation of the truncated_normal_initializer for "
"initializing all weight matrices."
msgstr ""

#: of transformers.MPNetConfig:33
msgid "The epsilon used by the layer normalization layers."
msgstr ""

#: of transformers.MPNetConfig:35
msgid "The number of buckets to use for each attention layer."
msgstr ""

#: of transformers.MPNetConfig:38
msgid "Examples::"
msgstr ""

#: ../../source/model_doc/mpnet.rst:54
msgid "MPNetTokenizer"
msgstr ""

#: of transformers.MPNetTokenizer:1
msgid ""
"This tokenizer inherits from :class:`~transformers.BertTokenizer` which "
"contains most of the methods. Users should refer to the superclass for "
"more information regarding methods."
msgstr ""

#: of transformers.MPNetTokenizer:4
msgid "Path to the vocabulary file."
msgstr ""

#: of transformers.MPNetTokenizer:6 transformers.MPNetTokenizerFast:8
msgid "Whether or not to lowercase the input when tokenizing."
msgstr ""

#: of transformers.MPNetTokenizer:8
msgid "Whether or not to do basic tokenization before WordPiece."
msgstr ""

#: of transformers.MPNetTokenizer:10
msgid ""
"Collection of tokens which will never be split during tokenization. Only "
"has an effect when :obj:`do_basic_tokenize=True`"
msgstr ""

#: of transformers.MPNetTokenizer:13
msgid ""
"The beginning of sequence token that was used during pre-training. Can be"
" used a sequence classifier token.  .. note::      When building a "
"sequence using special tokens, this is not the token that is used for the"
" beginning of     sequence. The token used is the :obj:`cls_token`."
msgstr ""

#: of transformers.MPNetTokenizer:13
msgid ""
"The beginning of sequence token that was used during pre-training. Can be"
" used a sequence classifier token."
msgstr ""

#: of transformers.MPNetTokenizer:17 transformers.MPNetTokenizerFast:14
msgid ""
"When building a sequence using special tokens, this is not the token that"
" is used for the beginning of sequence. The token used is the "
":obj:`cls_token`."
msgstr ""

#: of transformers.MPNetTokenizer:20 transformers.MPNetTokenizerFast:17
msgid ""
"The end of sequence token.  .. note::      When building a sequence using"
" special tokens, this is not the token that is used for the end of     "
"sequence. The token used is the :obj:`sep_token`."
msgstr ""

#: of transformers.MPNetTokenizer:20 transformers.MPNetTokenizerFast:17
msgid "The end of sequence token."
msgstr ""

#: of transformers.MPNetTokenizer:24 transformers.MPNetTokenizerFast:21
msgid ""
"When building a sequence using special tokens, this is not the token that"
" is used for the end of sequence. The token used is the :obj:`sep_token`."
msgstr ""

#: of transformers.MPNetTokenizer:27 transformers.MPNetTokenizerFast:24
msgid ""
"The separator token, which is used when building a sequence from multiple"
" sequences, e.g. two sequences for sequence classification or for a text "
"and a question for question answering. It is also used as the last token "
"of a sequence built with special tokens."
msgstr ""

#: of transformers.MPNetTokenizer:31 transformers.MPNetTokenizerFast:28
msgid ""
"The classifier token which is used when doing sequence classification "
"(classification of the whole sequence instead of per-token "
"classification). It is the first token of the sequence when built with "
"special tokens."
msgstr ""

#: of transformers.MPNetTokenizer:34 transformers.MPNetTokenizerFast:31
msgid ""
"The unknown token. A token that is not in the vocabulary cannot be "
"converted to an ID and is set to be this token instead."
msgstr ""

#: of transformers.MPNetTokenizer:37 transformers.MPNetTokenizerFast:34
msgid ""
"The token used for padding, for example when batching sequences of "
"different lengths."
msgstr ""

#: of transformers.MPNetTokenizer:39 transformers.MPNetTokenizerFast:36
msgid ""
"The token used for masking values. This is the token used when training "
"this model with masked language modeling. This is the token which the "
"model will try to predict."
msgstr ""

#: of transformers.MPNetTokenizer:42
msgid ""
"Whether or not to tokenize Chinese characters.  This should likely be "
"deactivated for Japanese (see this `issue "
"<https://github.com/huggingface/transformers/issues/328>`__)."
msgstr ""

#: of transformers.MPNetTokenizer:42
msgid "Whether or not to tokenize Chinese characters."
msgstr ""

#: of transformers.MPNetTokenizer:44
msgid ""
"This should likely be deactivated for Japanese (see this `issue "
"<https://github.com/huggingface/transformers/issues/328>`__)."
msgstr ""

#: of transformers.MPNetTokenizer:47 transformers.MPNetTokenizerFast:42
msgid ""
"(:obj:`bool`, `optional`): Whether or not to strip all accents. If this "
"option is not specified, then it will be determined by the value for "
":obj:`lowercase` (as in the original BERT)."
msgstr ""

#: of transformers.MPNetTokenizer.build_inputs_with_special_tokens:1
msgid ""
"Build model inputs from a sequence or a pair of sequence for sequence "
"classification tasks by concatenating and adding special tokens. A MPNet "
"sequence has the following format:"
msgstr ""

#: of transformers.MPNetTokenizer.build_inputs_with_special_tokens:4
msgid "single sequence: ``<s> X </s>``"
msgstr ""

#: of transformers.MPNetTokenizer.build_inputs_with_special_tokens:5
msgid "pair of sequences: ``<s> A </s></s> B </s>``"
msgstr ""

#: of transformers.MPNetTokenizer.build_inputs_with_special_tokens:7
msgid "List of IDs to which the special tokens will be added"
msgstr ""

#: of transformers.MPNetTokenizer.build_inputs_with_special_tokens:9
#: transformers.MPNetTokenizer.create_token_type_ids_from_sequences:6
#: transformers.MPNetTokenizer.get_special_tokens_mask:6
msgid "Optional second list of IDs for sequence pairs."
msgstr ""

#: of transformers.MPNetForMaskedLM.forward
#: transformers.MPNetForMultipleChoice.forward
#: transformers.MPNetForQuestionAnswering.forward
#: transformers.MPNetForSequenceClassification.forward
#: transformers.MPNetForTokenClassification.forward
#: transformers.MPNetModel.forward
#: transformers.MPNetTokenizer.build_inputs_with_special_tokens
#: transformers.MPNetTokenizer.create_token_type_ids_from_sequences
#: transformers.MPNetTokenizer.get_special_tokens_mask
#: transformers.MPNetTokenizer.save_vocabulary
#: transformers.MPNetTokenizerFast.build_inputs_with_special_tokens
#: transformers.MPNetTokenizerFast.create_token_type_ids_from_sequences
#: transformers.MPNetTokenizerFast.save_vocabulary
#: transformers.TFMPNetForMaskedLM.call
#: transformers.TFMPNetForMultipleChoice.call
#: transformers.TFMPNetForQuestionAnswering.call
#: transformers.TFMPNetForSequenceClassification.call
#: transformers.TFMPNetForTokenClassification.call
#: transformers.TFMPNetModel.call
msgid "Returns"
msgstr ""

#: of transformers.MPNetTokenizer.build_inputs_with_special_tokens:12
msgid ""
"list of `input IDs <../glossary.html#input-ids>`__ with the appropriate "
"special tokens."
msgstr ""

#: of transformers.MPNetForMaskedLM.forward
#: transformers.MPNetForMultipleChoice.forward
#: transformers.MPNetForQuestionAnswering.forward
#: transformers.MPNetForSequenceClassification.forward
#: transformers.MPNetForTokenClassification.forward
#: transformers.MPNetModel.forward
#: transformers.MPNetTokenizer.build_inputs_with_special_tokens
#: transformers.MPNetTokenizer.create_token_type_ids_from_sequences
#: transformers.MPNetTokenizer.get_special_tokens_mask
#: transformers.MPNetTokenizer.save_vocabulary
#: transformers.MPNetTokenizerFast.build_inputs_with_special_tokens
#: transformers.MPNetTokenizerFast.create_token_type_ids_from_sequences
#: transformers.MPNetTokenizerFast.save_vocabulary
#: transformers.TFMPNetForMaskedLM.call
#: transformers.TFMPNetForMultipleChoice.call
#: transformers.TFMPNetForQuestionAnswering.call
#: transformers.TFMPNetForSequenceClassification.call
#: transformers.TFMPNetForTokenClassification.call
#: transformers.TFMPNetModel.call
msgid "Return type"
msgstr ""

#: of transformers.MPNetTokenizer.build_inputs_with_special_tokens:13
#: transformers.MPNetTokenizer.create_token_type_ids_from_sequences:10
#: transformers.MPNetTokenizer.get_special_tokens_mask:12
#: transformers.MPNetTokenizerFast.build_inputs_with_special_tokens:12
#: transformers.MPNetTokenizerFast.create_token_type_ids_from_sequences:10
msgid ":obj:`List[int]`"
msgstr ""

#: of transformers.MPNetTokenizer.create_token_type_ids_from_sequences:1
msgid ""
"Creates a mask from the two sequences passed to be used in a sequence-"
"pair classification task. MPNet does not make use of token type ids, "
"therefore a list of zeros is returned."
msgstr ""

#: of transformers.MPNetTokenizer.create_token_type_ids_from_sequences:4
#: transformers.MPNetTokenizer.get_special_tokens_mask:4
#: transformers.MPNetTokenizerFast.create_token_type_ids_from_sequences:4
msgid "List of ids."
msgstr ""

#: of transformers.MPNetTokenizer.create_token_type_ids_from_sequences:9
#: transformers.MPNetTokenizerFast.create_token_type_ids_from_sequences:9
msgid "List of zeros."
msgstr ""

#: of transformers.MPNetTokenizer.get_special_tokens_mask:1
msgid ""
"Retrieves sequence ids from a token list that has no special tokens "
"added. This method is called when adding special tokens using the "
"tokenizer ``prepare_for_model`` methods."
msgstr ""

#: of transformers.MPNetTokenizer.get_special_tokens_mask:8
msgid ""
"Set to True if the token list is already formatted with special tokens "
"for the model"
msgstr ""

#: of transformers.MPNetTokenizer.get_special_tokens_mask:11
msgid ""
"A list of integers in the range [0, 1]: 1 for a special token, 0 for a "
"sequence token."
msgstr ""

#: of transformers.MPNetTokenizer.save_vocabulary:1
#: transformers.MPNetTokenizerFast.save_vocabulary:1
msgid "Save only the vocabulary of the tokenizer (vocabulary + added tokens)."
msgstr ""

#: of transformers.MPNetTokenizer.save_vocabulary:3
#: transformers.MPNetTokenizerFast.save_vocabulary:3
msgid ""
"This method won't save the configuration and special token mappings of "
"the tokenizer. Use "
":meth:`~transformers.PreTrainedTokenizerFast._save_pretrained` to save "
"the whole state of the tokenizer."
msgstr ""

#: of transformers.MPNetTokenizer.save_vocabulary:6
#: transformers.MPNetTokenizerFast.save_vocabulary:6
msgid "The directory in which to save the vocabulary."
msgstr ""

#: of transformers.MPNetTokenizer.save_vocabulary:8
#: transformers.MPNetTokenizerFast.save_vocabulary:8
msgid "An optional prefix to add to the named of the saved files."
msgstr ""

#: of transformers.MPNetTokenizer.save_vocabulary:11
#: transformers.MPNetTokenizerFast.save_vocabulary:11
msgid "Paths to the files saved."
msgstr ""

#: of transformers.MPNetTokenizer.save_vocabulary:12
#: transformers.MPNetTokenizerFast.save_vocabulary:12
msgid ":obj:`Tuple(str)`"
msgstr ""

#: ../../source/model_doc/mpnet.rst:62
msgid "MPNetTokenizerFast"
msgstr ""

#: of transformers.MPNetTokenizerFast:1
msgid ""
"Construct a \"fast\" MPNet tokenizer (backed by HuggingFace's "
"`tokenizers` library). Based on WordPiece."
msgstr ""

#: of transformers.MPNetTokenizerFast:3
msgid ""
"This tokenizer inherits from "
":class:`~transformers.PreTrainedTokenizerFast` which contains most of the"
" main methods. Users should refer to this superclass for more information"
" regarding those methods."
msgstr ""

#: of transformers.MPNetTokenizerFast:6
msgid "File containing the vocabulary."
msgstr ""

#: of transformers.MPNetTokenizerFast:10
msgid ""
"The beginning of sequence token that was used during pretraining. Can be "
"used a sequence classifier token.  .. note::      When building a "
"sequence using special tokens, this is not the token that is used for the"
" beginning of     sequence. The token used is the :obj:`cls_token`."
msgstr ""

#: of transformers.MPNetTokenizerFast:10
msgid ""
"The beginning of sequence token that was used during pretraining. Can be "
"used a sequence classifier token."
msgstr ""

#: of transformers.MPNetTokenizerFast:39
msgid ""
"Whether or not to tokenize Chinese characters. This should likely be "
"deactivated for Japanese (see `this issue "
"<https://github.com/huggingface/transformers/issues/328>`__)."
msgstr ""

#: of transformers.MPNetTokenizerFast.build_inputs_with_special_tokens:1
msgid ""
"Build model inputs from a sequence or a pair of sequence for sequence "
"classification tasks by concatenating and adding special tokens."
msgstr ""

#: of transformers.MPNetTokenizerFast.build_inputs_with_special_tokens:4
msgid ""
"This implementation does not add special tokens and this method should be"
" overridden in a subclass."
msgstr ""

#: of transformers.MPNetTokenizerFast.build_inputs_with_special_tokens:6
msgid "The first tokenized sequence."
msgstr ""

#: of transformers.MPNetTokenizerFast.build_inputs_with_special_tokens:8
msgid "The second tokenized sequence."
msgstr ""

#: of transformers.MPNetTokenizerFast.build_inputs_with_special_tokens:11
msgid "The model input with special tokens."
msgstr ""

#: of transformers.MPNetTokenizerFast.create_token_type_ids_from_sequences:1
msgid ""
"Creates a mask from the two sequences passed to be used in a sequence-"
"pair classification task. MPNet does not make use of token type ids, "
"therefore a list of zeros is returned"
msgstr ""

#: of transformers.MPNetTokenizerFast.create_token_type_ids_from_sequences:6
msgid "Optional second list of IDs for sequence pairs"
msgstr ""

#: of transformers.MPNetTokenizerFast.mask_token:1
msgid ""
"Mask token, to use when training a model with masked-language modeling. "
"Log an error if used while not having been set."
msgstr ""

#: of transformers.MPNetTokenizerFast.mask_token:4
msgid ""
"MPNet tokenizer has a special mask token to be usable in the fill-mask "
"pipeline. The mask token will greedily comprise the space before the "
"`<mask>`."
msgstr ""

#: of transformers.MPNetTokenizerFast.mask_token
msgid "type"
msgstr ""

#: of transformers.MPNetTokenizerFast.mask_token:7
msgid ":obj:`str`"
msgstr ""

#: ../../source/model_doc/mpnet.rst:69
msgid "MPNetModel"
msgstr ""

#: of transformers.MPNetModel:1 transformers.TFMPNetModel:1
msgid ""
"The bare MPNet Model transformer outputting raw hidden-states without any"
" specific head on top."
msgstr ""

#: of transformers.MPNetForMultipleChoice:5
#: transformers.MPNetForQuestionAnswering:5
#: transformers.MPNetForSequenceClassification:5
#: transformers.MPNetForTokenClassification:5 transformers.MPNetModel:3
msgid ""
"This model inherits from :class:`~transformers.PreTrainedModel`. Check "
"the superclass documentation for the generic methods the library "
"implements for all its model (such as downloading or saving, resizing the"
" input embeddings, pruning heads etc.)"
msgstr ""

#: of transformers.MPNetForMultipleChoice:9
#: transformers.MPNetForQuestionAnswering:9
#: transformers.MPNetForSequenceClassification:9
#: transformers.MPNetForTokenClassification:9 transformers.MPNetModel:7
msgid ""
"This model is also a PyTorch `torch.nn.Module "
"<https://pytorch.org/docs/stable/nn.html#torch.nn.Module>`__ subclass. "
"Use it as a regular PyTorch Module and refer to the PyTorch documentation"
" for all matter related to general usage and behavior."
msgstr ""

#: of transformers.MPNetForMultipleChoice:13
#: transformers.MPNetForQuestionAnswering:13
#: transformers.MPNetForSequenceClassification:13
#: transformers.MPNetForTokenClassification:13 transformers.MPNetModel:11
#: transformers.TFMPNetForMaskedLM:30 transformers.TFMPNetForMultipleChoice:32
#: transformers.TFMPNetForQuestionAnswering:32
#: transformers.TFMPNetForSequenceClassification:32
#: transformers.TFMPNetForTokenClassification:32 transformers.TFMPNetModel:30
msgid ""
"Model configuration class with all the parameters of the model. "
"Initializing with a config file does not load the weights associated with"
" the model, only the configuration. Check out the "
":meth:`~transformers.PreTrainedModel.from_pretrained` method to load the "
"model weights."
msgstr ""

#: of transformers.MPNetModel.forward:1
msgid ""
"The :class:`~transformers.MPNetModel` forward method, overrides the "
":func:`__call__` special method."
msgstr ""

#: of transformers.MPNetForMaskedLM.forward:4
#: transformers.MPNetForMultipleChoice.forward:4
#: transformers.MPNetForQuestionAnswering.forward:4
#: transformers.MPNetForSequenceClassification.forward:4
#: transformers.MPNetForTokenClassification.forward:4
#: transformers.MPNetModel.forward:4 transformers.TFMPNetForMaskedLM.call:4
#: transformers.TFMPNetForMultipleChoice.call:4
#: transformers.TFMPNetForQuestionAnswering.call:4
#: transformers.TFMPNetForSequenceClassification.call:4
#: transformers.TFMPNetForTokenClassification.call:4
#: transformers.TFMPNetModel.call:4
msgid ""
"Although the recipe for forward pass needs to be defined within this "
"function, one should call the :class:`Module` instance afterwards instead"
" of this since the former takes care of running the pre and post "
"processing steps while the latter silently ignores them."
msgstr ""

#: of transformers.MPNetForMaskedLM.forward:8
#: transformers.MPNetForMultipleChoice.forward:8
#: transformers.MPNetForQuestionAnswering.forward:8
#: transformers.MPNetForSequenceClassification.forward:8
#: transformers.MPNetForTokenClassification.forward:8
#: transformers.MPNetModel.forward:8
msgid ""
"Indices of input sequence tokens in the vocabulary.  Indices can be "
"obtained using :class:`transformers.MPNetTokenizer`. See "
":meth:`transformers.PreTrainedTokenizer.encode` and "
":meth:`transformers.PreTrainedTokenizer.__call__` for details.  `What are"
" input IDs? <../glossary.html#input-ids>`__"
msgstr ""

#: of transformers.MPNetForMaskedLM.forward:8
#: transformers.MPNetForMultipleChoice.forward:8
#: transformers.MPNetForQuestionAnswering.forward:8
#: transformers.MPNetForSequenceClassification.forward:8
#: transformers.MPNetForTokenClassification.forward:8
#: transformers.MPNetModel.forward:8 transformers.TFMPNetForMaskedLM.call:8
#: transformers.TFMPNetForMultipleChoice.call:8
#: transformers.TFMPNetForQuestionAnswering.call:8
#: transformers.TFMPNetForSequenceClassification.call:8
#: transformers.TFMPNetForTokenClassification.call:8
#: transformers.TFMPNetModel.call:8
msgid "Indices of input sequence tokens in the vocabulary."
msgstr ""

#: of transformers.MPNetForMaskedLM.forward:10
#: transformers.MPNetForMultipleChoice.forward:10
#: transformers.MPNetForQuestionAnswering.forward:10
#: transformers.MPNetForSequenceClassification.forward:10
#: transformers.MPNetForTokenClassification.forward:10
#: transformers.MPNetModel.forward:10
msgid ""
"Indices can be obtained using :class:`transformers.MPNetTokenizer`. See "
":meth:`transformers.PreTrainedTokenizer.encode` and "
":meth:`transformers.PreTrainedTokenizer.__call__` for details."
msgstr ""

#: of transformers.MPNetForMaskedLM.forward:14
#: transformers.MPNetForMultipleChoice.forward:14
#: transformers.MPNetForQuestionAnswering.forward:14
#: transformers.MPNetForSequenceClassification.forward:14
#: transformers.MPNetForTokenClassification.forward:14
#: transformers.MPNetModel.forward:14 transformers.TFMPNetForMaskedLM.call:14
#: transformers.TFMPNetForMultipleChoice.call:14
#: transformers.TFMPNetForQuestionAnswering.call:14
#: transformers.TFMPNetForSequenceClassification.call:14
#: transformers.TFMPNetForTokenClassification.call:14
#: transformers.TFMPNetModel.call:14
msgid "`What are input IDs? <../glossary.html#input-ids>`__"
msgstr ""

#: of transformers.MPNetForMaskedLM.forward:16
#: transformers.MPNetForMultipleChoice.forward:16
#: transformers.MPNetForQuestionAnswering.forward:16
#: transformers.MPNetForSequenceClassification.forward:16
#: transformers.MPNetForTokenClassification.forward:16
#: transformers.MPNetModel.forward:16 transformers.TFMPNetForMaskedLM.call:16
#: transformers.TFMPNetForMultipleChoice.call:16
#: transformers.TFMPNetForQuestionAnswering.call:16
#: transformers.TFMPNetForSequenceClassification.call:16
#: transformers.TFMPNetForTokenClassification.call:16
#: transformers.TFMPNetModel.call:16
msgid ""
"Mask to avoid performing attention on padding token indices. Mask values "
"selected in ``[0, 1]``:  - 1 for tokens that are **not masked**, - 0 for "
"tokens that are **masked**.  `What are attention masks? <../glossary.html"
"#attention-mask>`__"
msgstr ""

#: of transformers.MPNetForMaskedLM.forward:16
#: transformers.MPNetForMultipleChoice.forward:16
#: transformers.MPNetForQuestionAnswering.forward:16
#: transformers.MPNetForSequenceClassification.forward:16
#: transformers.MPNetForTokenClassification.forward:16
#: transformers.MPNetModel.forward:16 transformers.TFMPNetForMaskedLM.call:16
#: transformers.TFMPNetForMultipleChoice.call:16
#: transformers.TFMPNetForQuestionAnswering.call:16
#: transformers.TFMPNetForSequenceClassification.call:16
#: transformers.TFMPNetForTokenClassification.call:16
#: transformers.TFMPNetModel.call:16
msgid ""
"Mask to avoid performing attention on padding token indices. Mask values "
"selected in ``[0, 1]``:"
msgstr ""

#: of transformers.MPNetForMaskedLM.forward:18
#: transformers.MPNetForMultipleChoice.forward:18
#: transformers.MPNetForQuestionAnswering.forward:18
#: transformers.MPNetForSequenceClassification.forward:18
#: transformers.MPNetForTokenClassification.forward:18
#: transformers.MPNetModel.forward:18 transformers.TFMPNetForMaskedLM.call:18
#: transformers.TFMPNetForMultipleChoice.call:18
#: transformers.TFMPNetForQuestionAnswering.call:18
#: transformers.TFMPNetForSequenceClassification.call:18
#: transformers.TFMPNetForTokenClassification.call:18
#: transformers.TFMPNetModel.call:18
msgid "1 for tokens that are **not masked**,"
msgstr ""

#: of transformers.MPNetForMaskedLM.forward:19
#: transformers.MPNetForMultipleChoice.forward:19
#: transformers.MPNetForQuestionAnswering.forward:19
#: transformers.MPNetForSequenceClassification.forward:19
#: transformers.MPNetForTokenClassification.forward:19
#: transformers.MPNetModel.forward:19 transformers.TFMPNetForMaskedLM.call:19
#: transformers.TFMPNetForMultipleChoice.call:19
#: transformers.TFMPNetForQuestionAnswering.call:19
#: transformers.TFMPNetForSequenceClassification.call:19
#: transformers.TFMPNetForTokenClassification.call:19
#: transformers.TFMPNetModel.call:19
msgid "0 for tokens that are **masked**."
msgstr ""

#: of transformers.MPNetForMaskedLM.forward:21
#: transformers.MPNetForMultipleChoice.forward:21
#: transformers.MPNetForQuestionAnswering.forward:21
#: transformers.MPNetForSequenceClassification.forward:21
#: transformers.MPNetForTokenClassification.forward:21
#: transformers.MPNetModel.forward:21 transformers.TFMPNetForMaskedLM.call:21
#: transformers.TFMPNetForMultipleChoice.call:21
#: transformers.TFMPNetForQuestionAnswering.call:21
#: transformers.TFMPNetForSequenceClassification.call:21
#: transformers.TFMPNetForTokenClassification.call:21
#: transformers.TFMPNetModel.call:21
msgid "`What are attention masks? <../glossary.html#attention-mask>`__"
msgstr ""

#: of transformers.MPNetForMaskedLM.forward:23
#: transformers.MPNetForMultipleChoice.forward:23
#: transformers.MPNetForQuestionAnswering.forward:23
#: transformers.MPNetForSequenceClassification.forward:23
#: transformers.MPNetForTokenClassification.forward:23
#: transformers.MPNetModel.forward:23
msgid ""
"Indices of positions of each input sequence tokens in the position "
"embeddings. Selected in the range ``[0, config.max_position_embeddings - "
"1]``.  `What are position IDs? <../glossary.html#position-ids>`_"
msgstr ""

#: of transformers.MPNetForMaskedLM.forward:23
#: transformers.MPNetForMultipleChoice.forward:23
#: transformers.MPNetForQuestionAnswering.forward:23
#: transformers.MPNetForSequenceClassification.forward:23
#: transformers.MPNetForTokenClassification.forward:23
#: transformers.MPNetModel.forward:23 transformers.TFMPNetForMaskedLM.call:23
#: transformers.TFMPNetForMultipleChoice.call:23
#: transformers.TFMPNetForQuestionAnswering.call:23
#: transformers.TFMPNetForSequenceClassification.call:23
#: transformers.TFMPNetForTokenClassification.call:23
#: transformers.TFMPNetModel.call:23
msgid ""
"Indices of positions of each input sequence tokens in the position "
"embeddings. Selected in the range ``[0, config.max_position_embeddings - "
"1]``."
msgstr ""

#: of transformers.MPNetForMaskedLM.forward:26
#: transformers.MPNetForMultipleChoice.forward:26
#: transformers.MPNetForQuestionAnswering.forward:26
#: transformers.MPNetForSequenceClassification.forward:26
#: transformers.MPNetForTokenClassification.forward:26
#: transformers.MPNetModel.forward:26
msgid "`What are position IDs? <../glossary.html#position-ids>`_"
msgstr ""

#: of transformers.MPNetForMaskedLM.forward:28
#: transformers.MPNetForMultipleChoice.forward:28
#: transformers.MPNetForQuestionAnswering.forward:28
#: transformers.MPNetForSequenceClassification.forward:28
#: transformers.MPNetForTokenClassification.forward:28
#: transformers.MPNetModel.forward:28 transformers.TFMPNetForMaskedLM.call:28
#: transformers.TFMPNetForMultipleChoice.call:28
#: transformers.TFMPNetForQuestionAnswering.call:28
#: transformers.TFMPNetForSequenceClassification.call:28
#: transformers.TFMPNetForTokenClassification.call:28
#: transformers.TFMPNetModel.call:28
msgid ""
"Mask to nullify selected heads of the self-attention modules. Mask values"
" selected in ``[0, 1]``:  - 1 indicates the head is **not masked**, - 0 "
"indicates the head is **masked**."
msgstr ""

#: of transformers.MPNetForMaskedLM.forward:28
#: transformers.MPNetForMultipleChoice.forward:28
#: transformers.MPNetForQuestionAnswering.forward:28
#: transformers.MPNetForSequenceClassification.forward:28
#: transformers.MPNetForTokenClassification.forward:28
#: transformers.MPNetModel.forward:28 transformers.TFMPNetForMaskedLM.call:28
#: transformers.TFMPNetForMultipleChoice.call:28
#: transformers.TFMPNetForQuestionAnswering.call:28
#: transformers.TFMPNetForSequenceClassification.call:28
#: transformers.TFMPNetForTokenClassification.call:28
#: transformers.TFMPNetModel.call:28
msgid ""
"Mask to nullify selected heads of the self-attention modules. Mask values"
" selected in ``[0, 1]``:"
msgstr ""

#: of transformers.MPNetForMaskedLM.forward:30
#: transformers.MPNetForMultipleChoice.forward:30
#: transformers.MPNetForQuestionAnswering.forward:30
#: transformers.MPNetForSequenceClassification.forward:30
#: transformers.MPNetForTokenClassification.forward:30
#: transformers.MPNetModel.forward:30 transformers.TFMPNetForMaskedLM.call:30
#: transformers.TFMPNetForMultipleChoice.call:30
#: transformers.TFMPNetForQuestionAnswering.call:30
#: transformers.TFMPNetForSequenceClassification.call:30
#: transformers.TFMPNetForTokenClassification.call:30
#: transformers.TFMPNetModel.call:30
msgid "1 indicates the head is **not masked**,"
msgstr ""

#: of transformers.MPNetForMaskedLM.forward:31
#: transformers.MPNetForMultipleChoice.forward:31
#: transformers.MPNetForQuestionAnswering.forward:31
#: transformers.MPNetForSequenceClassification.forward:31
#: transformers.MPNetForTokenClassification.forward:31
#: transformers.MPNetModel.forward:31 transformers.TFMPNetForMaskedLM.call:31
#: transformers.TFMPNetForMultipleChoice.call:31
#: transformers.TFMPNetForQuestionAnswering.call:31
#: transformers.TFMPNetForSequenceClassification.call:31
#: transformers.TFMPNetForTokenClassification.call:31
#: transformers.TFMPNetModel.call:31
msgid "0 indicates the head is **masked**."
msgstr ""

#: of transformers.MPNetForMaskedLM.forward:33
#: transformers.MPNetForMultipleChoice.forward:33
#: transformers.MPNetForQuestionAnswering.forward:33
#: transformers.MPNetForSequenceClassification.forward:33
#: transformers.MPNetForTokenClassification.forward:33
#: transformers.MPNetModel.forward:33
msgid ""
"Optionally, instead of passing :obj:`input_ids` you can choose to "
"directly pass an embedded representation. This is useful if you want more"
" control over how to convert `input_ids` indices into associated vectors "
"than the model's internal embedding lookup matrix."
msgstr ""

#: of transformers.MPNetForMaskedLM.forward:37
#: transformers.MPNetForMultipleChoice.forward:37
#: transformers.MPNetForQuestionAnswering.forward:37
#: transformers.MPNetForSequenceClassification.forward:37
#: transformers.MPNetForTokenClassification.forward:37
#: transformers.MPNetModel.forward:37
msgid ""
"Whether or not to return the attentions tensors of all attention layers. "
"See ``attentions`` under returned tensors for more detail."
msgstr ""

#: of transformers.MPNetForMaskedLM.forward:40
#: transformers.MPNetForMultipleChoice.forward:40
#: transformers.MPNetForQuestionAnswering.forward:40
#: transformers.MPNetForSequenceClassification.forward:40
#: transformers.MPNetForTokenClassification.forward:40
#: transformers.MPNetModel.forward:40
msgid ""
"Whether or not to return the hidden states of all layers. See "
"``hidden_states`` under returned tensors for more detail."
msgstr ""

#: of transformers.MPNetForMaskedLM.forward:43
#: transformers.MPNetForMultipleChoice.forward:43
#: transformers.MPNetForQuestionAnswering.forward:43
#: transformers.MPNetForSequenceClassification.forward:43
#: transformers.MPNetForTokenClassification.forward:43
#: transformers.MPNetModel.forward:43
msgid ""
"Whether or not to return a :class:`~transformers.file_utils.ModelOutput` "
"instead of a plain tuple."
msgstr ""

#: of transformers.MPNetModel.forward:46
msgid ""
"A :class:`~transformers.modeling_outputs.BaseModelOutputWithPooling` or a"
" tuple of :obj:`torch.FloatTensor` (if ``return_dict=False`` is passed or"
" when ``config.return_dict=False``) comprising various elements depending"
" on the configuration (:class:`~transformers.MPNetConfig`) and inputs.  -"
" **last_hidden_state** (:obj:`torch.FloatTensor` of shape "
":obj:`(batch_size, sequence_length, hidden_size)`) -- Sequence of hidden-"
"states at the output of the last layer of the model. - **pooler_output** "
"(:obj:`torch.FloatTensor` of shape :obj:`(batch_size, hidden_size)`) -- "
"Last layer hidden-state of the first token of the sequence "
"(classification token) further processed by a   Linear layer and a Tanh "
"activation function. The Linear layer weights are trained from the next "
"sentence   prediction (classification) objective during pretraining. - "
"**hidden_states** (:obj:`tuple(torch.FloatTensor)`, `optional`, returned "
"when ``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of "
":obj:`torch.FloatTensor` (one for the output of the embeddings + one for "
"the output of each layer)   of shape :obj:`(batch_size, sequence_length, "
"hidden_size)`.    Hidden-states of the model at the output of each layer "
"plus the initial embedding outputs. - **attentions** "
"(:obj:`tuple(torch.FloatTensor)`, `optional`, returned when "
"``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`torch.FloatTensor` "
"(one for each layer) of shape :obj:`(batch_size, num_heads,   "
"sequence_length, sequence_length)`.    Attentions weights after the "
"attention softmax, used to compute the weighted average in the self-"
"attention   heads."
msgstr ""

#: of transformers.MPNetModel.forward:46
msgid ""
"A :class:`~transformers.modeling_outputs.BaseModelOutputWithPooling` or a"
" tuple of :obj:`torch.FloatTensor` (if ``return_dict=False`` is passed or"
" when ``config.return_dict=False``) comprising various elements depending"
" on the configuration (:class:`~transformers.MPNetConfig`) and inputs."
msgstr ""

#: of transformers.MPNetModel.forward:50
msgid ""
"**last_hidden_state** (:obj:`torch.FloatTensor` of shape "
":obj:`(batch_size, sequence_length, hidden_size)`) -- Sequence of hidden-"
"states at the output of the last layer of the model."
msgstr ""

#: of transformers.MPNetModel.forward:51
msgid ""
"**pooler_output** (:obj:`torch.FloatTensor` of shape :obj:`(batch_size, "
"hidden_size)`) -- Last layer hidden-state of the first token of the "
"sequence (classification token) further processed by a Linear layer and a"
" Tanh activation function. The Linear layer weights are trained from the "
"next sentence prediction (classification) objective during pretraining."
msgstr ""

#: of transformers.MPNetForMaskedLM.forward:56
#: transformers.MPNetForMultipleChoice.forward:58
#: transformers.MPNetForQuestionAnswering.forward:61
#: transformers.MPNetForSequenceClassification.forward:56
#: transformers.MPNetForTokenClassification.forward:55
#: transformers.MPNetModel.forward:54
msgid ""
"**hidden_states** (:obj:`tuple(torch.FloatTensor)`, `optional`, returned "
"when ``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of "
":obj:`torch.FloatTensor` (one for the output of the embeddings + one for "
"the output of each layer) of shape :obj:`(batch_size, sequence_length, "
"hidden_size)`."
msgstr ""

#: of transformers.MPNetForMaskedLM.forward:59
#: transformers.MPNetForMultipleChoice.forward:61
#: transformers.MPNetForQuestionAnswering.forward:64
#: transformers.MPNetForSequenceClassification.forward:59
#: transformers.MPNetForTokenClassification.forward:58
#: transformers.MPNetModel.forward:57 transformers.TFMPNetForMaskedLM.call:65
#: transformers.TFMPNetForMultipleChoice.call:67
#: transformers.TFMPNetForQuestionAnswering.call:70
#: transformers.TFMPNetForSequenceClassification.call:65
#: transformers.TFMPNetForTokenClassification.call:64
#: transformers.TFMPNetModel.call:60
msgid ""
"Hidden-states of the model at the output of each layer plus the initial "
"embedding outputs."
msgstr ""

#: of transformers.MPNetForMaskedLM.forward:60
#: transformers.MPNetForMultipleChoice.forward:62
#: transformers.MPNetForQuestionAnswering.forward:65
#: transformers.MPNetForSequenceClassification.forward:60
#: transformers.MPNetForTokenClassification.forward:59
#: transformers.MPNetModel.forward:58
msgid ""
"**attentions** (:obj:`tuple(torch.FloatTensor)`, `optional`, returned "
"when ``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`torch.FloatTensor` "
"(one for each layer) of shape :obj:`(batch_size, num_heads, "
"sequence_length, sequence_length)`."
msgstr ""

#: of transformers.MPNetForMaskedLM.forward:63
#: transformers.MPNetForMultipleChoice.forward:65
#: transformers.MPNetForQuestionAnswering.forward:68
#: transformers.MPNetForSequenceClassification.forward:63
#: transformers.MPNetForTokenClassification.forward:62
#: transformers.MPNetModel.forward:61 transformers.TFMPNetForMaskedLM.call:69
#: transformers.TFMPNetForMultipleChoice.call:71
#: transformers.TFMPNetForQuestionAnswering.call:74
#: transformers.TFMPNetForSequenceClassification.call:69
#: transformers.TFMPNetForTokenClassification.call:68
#: transformers.TFMPNetModel.call:64
msgid ""
"Attentions weights after the attention softmax, used to compute the "
"weighted average in the self-attention heads."
msgstr ""

#: of transformers.MPNetModel.forward:63
msgid ""
":class:`~transformers.modeling_outputs.BaseModelOutputWithPooling` or "
":obj:`tuple(torch.FloatTensor)`"
msgstr ""

#: of transformers.MPNetForMaskedLM.forward:67
#: transformers.MPNetForMultipleChoice.forward:69
#: transformers.MPNetForQuestionAnswering.forward:72
#: transformers.MPNetForSequenceClassification.forward:67
#: transformers.MPNetForTokenClassification.forward:66
#: transformers.MPNetModel.forward:65 transformers.TFMPNetForMaskedLM.call:73
#: transformers.TFMPNetForMultipleChoice.call:75
#: transformers.TFMPNetForQuestionAnswering.call:78
#: transformers.TFMPNetForSequenceClassification.call:73
#: transformers.TFMPNetForTokenClassification.call:72
#: transformers.TFMPNetModel.call:68
msgid "Example::"
msgstr ""

#: ../../source/model_doc/mpnet.rst:76
msgid "MPNetForMaskedLM"
msgstr ""

#: of transformers.MPNetForMaskedLM.forward:1
msgid ""
"The :class:`~transformers.MPNetForMaskedLM` forward method, overrides the"
" :func:`__call__` special method."
msgstr ""

#: of transformers.MPNetForMaskedLM.forward:45
#: transformers.TFMPNetForMaskedLM.call:51
msgid ""
"Labels for computing the masked language modeling loss. Indices should be"
" in ``[-100, 0, ..., config.vocab_size]`` (see ``input_ids`` docstring) "
"Tokens with indices set to ``-100`` are ignored (masked), the loss is "
"only computed for the tokens with labels in ``[0, ..., "
"config.vocab_size]``"
msgstr ""

#: of transformers.MPNetForMaskedLM.forward:50
msgid ""
"A :class:`~transformers.modeling_outputs.MaskedLMOutput` or a tuple of "
":obj:`torch.FloatTensor` (if ``return_dict=False`` is passed or when "
"``config.return_dict=False``) comprising various elements depending on "
"the configuration (:class:`~transformers.MPNetConfig`) and inputs.  - "
"**loss** (:obj:`torch.FloatTensor` of shape :obj:`(1,)`, `optional`, "
"returned when :obj:`labels` is provided) -- Masked language modeling "
"(MLM) loss. - **logits** (:obj:`torch.FloatTensor` of shape "
":obj:`(batch_size, sequence_length, config.vocab_size)`) -- Prediction "
"scores of the language modeling head (scores for each vocabulary token "
"before SoftMax). - **hidden_states** (:obj:`tuple(torch.FloatTensor)`, "
"`optional`, returned when ``output_hidden_states=True`` is passed or when"
" ``config.output_hidden_states=True``) -- Tuple of "
":obj:`torch.FloatTensor` (one for the output of the embeddings + one for "
"the output of each layer)   of shape :obj:`(batch_size, sequence_length, "
"hidden_size)`.    Hidden-states of the model at the output of each layer "
"plus the initial embedding outputs. - **attentions** "
"(:obj:`tuple(torch.FloatTensor)`, `optional`, returned when "
"``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`torch.FloatTensor` "
"(one for each layer) of shape :obj:`(batch_size, num_heads,   "
"sequence_length, sequence_length)`.    Attentions weights after the "
"attention softmax, used to compute the weighted average in the self-"
"attention   heads."
msgstr ""

#: of transformers.MPNetForMaskedLM.forward:50
msgid ""
"A :class:`~transformers.modeling_outputs.MaskedLMOutput` or a tuple of "
":obj:`torch.FloatTensor` (if ``return_dict=False`` is passed or when "
"``config.return_dict=False``) comprising various elements depending on "
"the configuration (:class:`~transformers.MPNetConfig`) and inputs."
msgstr ""

#: of transformers.MPNetForMaskedLM.forward:54
msgid ""
"**loss** (:obj:`torch.FloatTensor` of shape :obj:`(1,)`, `optional`, "
"returned when :obj:`labels` is provided) -- Masked language modeling "
"(MLM) loss."
msgstr ""

#: of transformers.MPNetForMaskedLM.forward:55
msgid ""
"**logits** (:obj:`torch.FloatTensor` of shape :obj:`(batch_size, "
"sequence_length, config.vocab_size)`) -- Prediction scores of the "
"language modeling head (scores for each vocabulary token before SoftMax)."
msgstr ""

#: of transformers.MPNetForMaskedLM.forward:65
msgid ""
":class:`~transformers.modeling_outputs.MaskedLMOutput` or "
":obj:`tuple(torch.FloatTensor)`"
msgstr ""

#: ../../source/model_doc/mpnet.rst:83
msgid "MPNetForSequenceClassification"
msgstr ""

#: of transformers.MPNetForSequenceClassification:1
#: transformers.TFMPNetForSequenceClassification:1
msgid ""
"MPNet Model transformer with a sequence classification/regression head on"
" top (a linear layer on top of the pooled output) e.g. for GLUE tasks."
msgstr ""

#: of transformers.MPNetForSequenceClassification.forward:1
msgid ""
"The :class:`~transformers.MPNetForSequenceClassification` forward method,"
" overrides the :func:`__call__` special method."
msgstr ""

#: of transformers.MPNetForSequenceClassification.forward:45
#: transformers.TFMPNetForSequenceClassification.call:51
msgid ""
"Labels for computing the sequence classification/regression loss. Indices"
" should be in :obj:`[0, ..., config.num_labels - 1]`. If "
":obj:`config.num_labels == 1` a regression loss is computed (Mean-Square "
"loss), If :obj:`config.num_labels > 1` a classification loss is computed "
"(Cross-Entropy)."
msgstr ""

#: of transformers.MPNetForSequenceClassification.forward:50
msgid ""
"A :class:`~transformers.modeling_outputs.SequenceClassifierOutput` or a "
"tuple of :obj:`torch.FloatTensor` (if ``return_dict=False`` is passed or "
"when ``config.return_dict=False``) comprising various elements depending "
"on the configuration (:class:`~transformers.MPNetConfig`) and inputs.  - "
"**loss** (:obj:`torch.FloatTensor` of shape :obj:`(1,)`, `optional`, "
"returned when :obj:`labels` is provided) -- Classification (or regression"
" if config.num_labels==1) loss. - **logits** (:obj:`torch.FloatTensor` of"
" shape :obj:`(batch_size, config.num_labels)`) -- Classification (or "
"regression if config.num_labels==1) scores (before SoftMax). - "
"**hidden_states** (:obj:`tuple(torch.FloatTensor)`, `optional`, returned "
"when ``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of "
":obj:`torch.FloatTensor` (one for the output of the embeddings + one for "
"the output of each layer)   of shape :obj:`(batch_size, sequence_length, "
"hidden_size)`.    Hidden-states of the model at the output of each layer "
"plus the initial embedding outputs. - **attentions** "
"(:obj:`tuple(torch.FloatTensor)`, `optional`, returned when "
"``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`torch.FloatTensor` "
"(one for each layer) of shape :obj:`(batch_size, num_heads,   "
"sequence_length, sequence_length)`.    Attentions weights after the "
"attention softmax, used to compute the weighted average in the self-"
"attention   heads."
msgstr ""

#: of transformers.MPNetForSequenceClassification.forward:50
msgid ""
"A :class:`~transformers.modeling_outputs.SequenceClassifierOutput` or a "
"tuple of :obj:`torch.FloatTensor` (if ``return_dict=False`` is passed or "
"when ``config.return_dict=False``) comprising various elements depending "
"on the configuration (:class:`~transformers.MPNetConfig`) and inputs."
msgstr ""

#: of transformers.MPNetForSequenceClassification.forward:54
msgid ""
"**loss** (:obj:`torch.FloatTensor` of shape :obj:`(1,)`, `optional`, "
"returned when :obj:`labels` is provided) -- Classification (or regression"
" if config.num_labels==1) loss."
msgstr ""

#: of transformers.MPNetForSequenceClassification.forward:55
msgid ""
"**logits** (:obj:`torch.FloatTensor` of shape :obj:`(batch_size, "
"config.num_labels)`) -- Classification (or regression if "
"config.num_labels==1) scores (before SoftMax)."
msgstr ""

#: of transformers.MPNetForSequenceClassification.forward:65
msgid ""
":class:`~transformers.modeling_outputs.SequenceClassifierOutput` or "
":obj:`tuple(torch.FloatTensor)`"
msgstr ""

#: ../../source/model_doc/mpnet.rst:90
msgid "MPNetForMultipleChoice"
msgstr ""

#: of transformers.MPNetForMultipleChoice:1
#: transformers.TFMPNetForMultipleChoice:1
msgid ""
"MPNet Model with a multiple choice classification head on top (a linear "
"layer on top of the pooled output and a softmax) e.g. for RocStories/SWAG"
" tasks."
msgstr ""

#: of transformers.MPNetForMultipleChoice.forward:1
msgid ""
"The :class:`~transformers.MPNetForMultipleChoice` forward method, "
"overrides the :func:`__call__` special method."
msgstr ""

#: of transformers.MPNetForMultipleChoice.forward:45
msgid ""
"Labels for computing the multiple choice classification loss. Indices "
"should be in ``[0, ..., num_choices-1]`` where :obj:`num_choices` is the "
"size of the second dimension of the input tensors. (See :obj:`input_ids` "
"above)"
msgstr ""

#: of transformers.MPNetForMultipleChoice.forward:50
msgid ""
"A :class:`~transformers.modeling_outputs.MultipleChoiceModelOutput` or a "
"tuple of :obj:`torch.FloatTensor` (if ``return_dict=False`` is passed or "
"when ``config.return_dict=False``) comprising various elements depending "
"on the configuration (:class:`~transformers.MPNetConfig`) and inputs.  - "
"**loss** (:obj:`torch.FloatTensor` of shape `(1,)`, `optional`, returned "
"when :obj:`labels` is provided) -- Classification loss. - **logits** "
"(:obj:`torch.FloatTensor` of shape :obj:`(batch_size, num_choices)`) -- "
"`num_choices` is the second dimension of the input tensors. (see "
"`input_ids` above).    Classification scores (before SoftMax). - "
"**hidden_states** (:obj:`tuple(torch.FloatTensor)`, `optional`, returned "
"when ``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of "
":obj:`torch.FloatTensor` (one for the output of the embeddings + one for "
"the output of each layer)   of shape :obj:`(batch_size, sequence_length, "
"hidden_size)`.    Hidden-states of the model at the output of each layer "
"plus the initial embedding outputs. - **attentions** "
"(:obj:`tuple(torch.FloatTensor)`, `optional`, returned when "
"``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`torch.FloatTensor` "
"(one for each layer) of shape :obj:`(batch_size, num_heads,   "
"sequence_length, sequence_length)`.    Attentions weights after the "
"attention softmax, used to compute the weighted average in the self-"
"attention   heads."
msgstr ""

#: of transformers.MPNetForMultipleChoice.forward:50
msgid ""
"A :class:`~transformers.modeling_outputs.MultipleChoiceModelOutput` or a "
"tuple of :obj:`torch.FloatTensor` (if ``return_dict=False`` is passed or "
"when ``config.return_dict=False``) comprising various elements depending "
"on the configuration (:class:`~transformers.MPNetConfig`) and inputs."
msgstr ""

#: of transformers.MPNetForMultipleChoice.forward:54
msgid ""
"**loss** (:obj:`torch.FloatTensor` of shape `(1,)`, `optional`, returned "
"when :obj:`labels` is provided) -- Classification loss."
msgstr ""

#: of transformers.MPNetForMultipleChoice.forward:55
msgid ""
"**logits** (:obj:`torch.FloatTensor` of shape :obj:`(batch_size, "
"num_choices)`) -- `num_choices` is the second dimension of the input "
"tensors. (see `input_ids` above)."
msgstr ""

#: of transformers.MPNetForMultipleChoice.forward:57
#: transformers.TFMPNetForMultipleChoice.call:63
msgid "Classification scores (before SoftMax)."
msgstr ""

#: of transformers.MPNetForMultipleChoice.forward:67
msgid ""
":class:`~transformers.modeling_outputs.MultipleChoiceModelOutput` or "
":obj:`tuple(torch.FloatTensor)`"
msgstr ""

#: ../../source/model_doc/mpnet.rst:97
msgid "MPNetForTokenClassification"
msgstr ""

#: of transformers.MPNetForTokenClassification:1
#: transformers.TFMPNetForTokenClassification:1
msgid ""
"MPNet Model with a token classification head on top (a linear layer on "
"top of the hidden-states output) e.g. for Named-Entity-Recognition (NER) "
"tasks."
msgstr ""

#: of transformers.MPNetForTokenClassification.forward:1
msgid ""
"The :class:`~transformers.MPNetForTokenClassification` forward method, "
"overrides the :func:`__call__` special method."
msgstr ""

#: of transformers.MPNetForTokenClassification.forward:45
#: transformers.TFMPNetForTokenClassification.call:51
msgid ""
"Labels for computing the token classification loss. Indices should be in "
"``[0, ..., config.num_labels - 1]``."
msgstr ""

#: of transformers.MPNetForTokenClassification.forward:49
msgid ""
"A :class:`~transformers.modeling_outputs.TokenClassifierOutput` or a "
"tuple of :obj:`torch.FloatTensor` (if ``return_dict=False`` is passed or "
"when ``config.return_dict=False``) comprising various elements depending "
"on the configuration (:class:`~transformers.MPNetConfig`) and inputs.  - "
"**loss** (:obj:`torch.FloatTensor` of shape :obj:`(1,)`, `optional`, "
"returned when ``labels`` is provided)  -- Classification loss. - "
"**logits** (:obj:`torch.FloatTensor` of shape :obj:`(batch_size, "
"sequence_length, config.num_labels)`) -- Classification scores (before "
"SoftMax). - **hidden_states** (:obj:`tuple(torch.FloatTensor)`, "
"`optional`, returned when ``output_hidden_states=True`` is passed or when"
" ``config.output_hidden_states=True``) -- Tuple of "
":obj:`torch.FloatTensor` (one for the output of the embeddings + one for "
"the output of each layer)   of shape :obj:`(batch_size, sequence_length, "
"hidden_size)`.    Hidden-states of the model at the output of each layer "
"plus the initial embedding outputs. - **attentions** "
"(:obj:`tuple(torch.FloatTensor)`, `optional`, returned when "
"``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`torch.FloatTensor` "
"(one for each layer) of shape :obj:`(batch_size, num_heads,   "
"sequence_length, sequence_length)`.    Attentions weights after the "
"attention softmax, used to compute the weighted average in the self-"
"attention   heads."
msgstr ""

#: of transformers.MPNetForTokenClassification.forward:49
msgid ""
"A :class:`~transformers.modeling_outputs.TokenClassifierOutput` or a "
"tuple of :obj:`torch.FloatTensor` (if ``return_dict=False`` is passed or "
"when ``config.return_dict=False``) comprising various elements depending "
"on the configuration (:class:`~transformers.MPNetConfig`) and inputs."
msgstr ""

#: of transformers.MPNetForTokenClassification.forward:53
msgid ""
"**loss** (:obj:`torch.FloatTensor` of shape :obj:`(1,)`, `optional`, "
"returned when ``labels`` is provided)  -- Classification loss."
msgstr ""

#: of transformers.MPNetForTokenClassification.forward:54
msgid ""
"**logits** (:obj:`torch.FloatTensor` of shape :obj:`(batch_size, "
"sequence_length, config.num_labels)`) -- Classification scores (before "
"SoftMax)."
msgstr ""

#: of transformers.MPNetForTokenClassification.forward:64
msgid ""
":class:`~transformers.modeling_outputs.TokenClassifierOutput` or "
":obj:`tuple(torch.FloatTensor)`"
msgstr ""

#: ../../source/model_doc/mpnet.rst:104
msgid "MPNetForQuestionAnswering"
msgstr ""

#: of transformers.MPNetForQuestionAnswering:1
#: transformers.TFMPNetForQuestionAnswering:1
msgid ""
"MPNet Model with a span classification head on top for extractive "
"question-answering tasks like SQuAD (a linear layers on top of the "
"hidden-states output to compute `span start logits` and `span end "
"logits`)."
msgstr ""

#: of transformers.MPNetForQuestionAnswering.forward:1
msgid ""
"The :class:`~transformers.MPNetForQuestionAnswering` forward method, "
"overrides the :func:`__call__` special method."
msgstr ""

#: of transformers.MPNetForQuestionAnswering.forward:45
#: transformers.TFMPNetForQuestionAnswering.call:51
msgid ""
"Labels for position (index) of the start of the labelled span for "
"computing the token classification loss. Positions are clamped to the "
"length of the sequence (:obj:`sequence_length`). Position outside of the "
"sequence are not taken into account for computing the loss."
msgstr ""

#: of transformers.MPNetForQuestionAnswering.forward:49
#: transformers.TFMPNetForQuestionAnswering.call:55
msgid ""
"Labels for position (index) of the end of the labelled span for computing"
" the token classification loss. Positions are clamped to the length of "
"the sequence (:obj:`sequence_length`). Position outside of the sequence "
"are not taken into account for computing the loss."
msgstr ""

#: of transformers.MPNetForQuestionAnswering.forward:54
msgid ""
"A :class:`~transformers.modeling_outputs.QuestionAnsweringModelOutput` or"
" a tuple of :obj:`torch.FloatTensor` (if ``return_dict=False`` is passed "
"or when ``config.return_dict=False``) comprising various elements "
"depending on the configuration (:class:`~transformers.MPNetConfig`) and "
"inputs.  - **loss** (:obj:`torch.FloatTensor` of shape :obj:`(1,)`, "
"`optional`, returned when :obj:`labels` is provided) -- Total span "
"extraction loss is the sum of a Cross-Entropy for the start and end "
"positions. - **start_logits** (:obj:`torch.FloatTensor` of shape "
":obj:`(batch_size, sequence_length)`) -- Span-start scores (before "
"SoftMax). - **end_logits** (:obj:`torch.FloatTensor` of shape "
":obj:`(batch_size, sequence_length)`) -- Span-end scores (before "
"SoftMax). - **hidden_states** (:obj:`tuple(torch.FloatTensor)`, "
"`optional`, returned when ``output_hidden_states=True`` is passed or when"
" ``config.output_hidden_states=True``) -- Tuple of "
":obj:`torch.FloatTensor` (one for the output of the embeddings + one for "
"the output of each layer)   of shape :obj:`(batch_size, sequence_length, "
"hidden_size)`.    Hidden-states of the model at the output of each layer "
"plus the initial embedding outputs. - **attentions** "
"(:obj:`tuple(torch.FloatTensor)`, `optional`, returned when "
"``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`torch.FloatTensor` "
"(one for each layer) of shape :obj:`(batch_size, num_heads,   "
"sequence_length, sequence_length)`.    Attentions weights after the "
"attention softmax, used to compute the weighted average in the self-"
"attention   heads."
msgstr ""

#: of transformers.MPNetForQuestionAnswering.forward:54
msgid ""
"A :class:`~transformers.modeling_outputs.QuestionAnsweringModelOutput` or"
" a tuple of :obj:`torch.FloatTensor` (if ``return_dict=False`` is passed "
"or when ``config.return_dict=False``) comprising various elements "
"depending on the configuration (:class:`~transformers.MPNetConfig`) and "
"inputs."
msgstr ""

#: of transformers.MPNetForQuestionAnswering.forward:58
msgid ""
"**loss** (:obj:`torch.FloatTensor` of shape :obj:`(1,)`, `optional`, "
"returned when :obj:`labels` is provided) -- Total span extraction loss is"
" the sum of a Cross-Entropy for the start and end positions."
msgstr ""

#: of transformers.MPNetForQuestionAnswering.forward:59
msgid ""
"**start_logits** (:obj:`torch.FloatTensor` of shape :obj:`(batch_size, "
"sequence_length)`) -- Span-start scores (before SoftMax)."
msgstr ""

#: of transformers.MPNetForQuestionAnswering.forward:60
msgid ""
"**end_logits** (:obj:`torch.FloatTensor` of shape :obj:`(batch_size, "
"sequence_length)`) -- Span-end scores (before SoftMax)."
msgstr ""

#: of transformers.MPNetForQuestionAnswering.forward:70
msgid ""
":class:`~transformers.modeling_outputs.QuestionAnsweringModelOutput` or "
":obj:`tuple(torch.FloatTensor)`"
msgstr ""

#: ../../source/model_doc/mpnet.rst:111
msgid "TFMPNetModel"
msgstr ""

#: of transformers.TFMPNetForMaskedLM:3 transformers.TFMPNetForMultipleChoice:5
#: transformers.TFMPNetForQuestionAnswering:5
#: transformers.TFMPNetForSequenceClassification:5
#: transformers.TFMPNetForTokenClassification:5 transformers.TFMPNetModel:3
msgid ""
"This model inherits from :class:`~transformers.TFPreTrainedModel`. Check "
"the superclass documentation for the generic methods the library "
"implements for all its model (such as downloading or saving, resizing the"
" input embeddings, pruning heads etc.)"
msgstr ""

#: of transformers.TFMPNetForMaskedLM:7 transformers.TFMPNetForMultipleChoice:9
#: transformers.TFMPNetForQuestionAnswering:9
#: transformers.TFMPNetForSequenceClassification:9
#: transformers.TFMPNetForTokenClassification:9 transformers.TFMPNetModel:7
msgid ""
"This model is also a `tf.keras.Model "
"<https://www.tensorflow.org/api_docs/python/tf/keras/Model>`__ subclass. "
"Use it as a regular TF 2.0 Keras Model and refer to the TF 2.0 "
"documentation for all matter related to general usage and behavior."
msgstr ""

#: of transformers.TFMPNetForMaskedLM:13
#: transformers.TFMPNetForMultipleChoice:15
#: transformers.TFMPNetForQuestionAnswering:15
#: transformers.TFMPNetForSequenceClassification:15
#: transformers.TFMPNetForTokenClassification:15 transformers.TFMPNetModel:13
msgid "TF 2.0 models accepts two formats as inputs:"
msgstr ""

#: of transformers.TFMPNetForMaskedLM:15
#: transformers.TFMPNetForMultipleChoice:17
#: transformers.TFMPNetForQuestionAnswering:17
#: transformers.TFMPNetForSequenceClassification:17
#: transformers.TFMPNetForTokenClassification:17 transformers.TFMPNetModel:15
msgid "having all inputs as keyword arguments (like PyTorch models), or"
msgstr ""

#: of transformers.TFMPNetForMaskedLM:16
#: transformers.TFMPNetForMultipleChoice:18
#: transformers.TFMPNetForQuestionAnswering:18
#: transformers.TFMPNetForSequenceClassification:18
#: transformers.TFMPNetForTokenClassification:18 transformers.TFMPNetModel:16
msgid ""
"having all inputs as a list, tuple or dict in the first positional "
"arguments."
msgstr ""

#: of transformers.TFMPNetForMaskedLM:18
#: transformers.TFMPNetForMultipleChoice:20
#: transformers.TFMPNetForQuestionAnswering:20
#: transformers.TFMPNetForSequenceClassification:20
#: transformers.TFMPNetForTokenClassification:20 transformers.TFMPNetModel:18
msgid ""
"This second option is useful when using :meth:`tf.keras.Model.fit` method"
" which currently requires having all the tensors in the first argument of"
" the model call function: :obj:`model(inputs)`."
msgstr ""

#: of transformers.TFMPNetForMaskedLM:21
#: transformers.TFMPNetForMultipleChoice:23
#: transformers.TFMPNetForQuestionAnswering:23
#: transformers.TFMPNetForSequenceClassification:23
#: transformers.TFMPNetForTokenClassification:23 transformers.TFMPNetModel:21
msgid ""
"If you choose this second option, there are three possibilities you can "
"use to gather all the input Tensor in the first positional argument :"
msgstr ""

#: of transformers.TFMPNetForMaskedLM:24
#: transformers.TFMPNetForMultipleChoice:26
#: transformers.TFMPNetForQuestionAnswering:26
#: transformers.TFMPNetForSequenceClassification:26
#: transformers.TFMPNetForTokenClassification:26 transformers.TFMPNetModel:24
msgid ""
"a single Tensor with :obj:`input_ids` only and nothing else: "
":obj:`model(inputs_ids)`"
msgstr ""

#: of transformers.TFMPNetForMaskedLM:25
#: transformers.TFMPNetForMultipleChoice:27
#: transformers.TFMPNetForQuestionAnswering:27
#: transformers.TFMPNetForSequenceClassification:27
#: transformers.TFMPNetForTokenClassification:27 transformers.TFMPNetModel:25
msgid ""
"a list of varying length with one or several input Tensors IN THE ORDER "
"given in the docstring: :obj:`model([input_ids, attention_mask])`"
msgstr ""

#: of transformers.TFMPNetForMaskedLM:27
#: transformers.TFMPNetForMultipleChoice:29
#: transformers.TFMPNetForQuestionAnswering:29
#: transformers.TFMPNetForSequenceClassification:29
#: transformers.TFMPNetForTokenClassification:29 transformers.TFMPNetModel:27
msgid ""
"a dictionary with one or several input Tensors associated to the input "
"names given in the docstring: :obj:`model({\"input_ids\": input_ids, "
"\"attention_mask\": attention_mask})`"
msgstr ""

#: of transformers.TFMPNetModel.call:1
msgid ""
"The :class:`~transformers.TFMPNetModel` forward method, overrides the "
":func:`__call__` special method."
msgstr ""

#: of transformers.TFMPNetForMaskedLM.call:8
#: transformers.TFMPNetForMultipleChoice.call:8
#: transformers.TFMPNetForQuestionAnswering.call:8
#: transformers.TFMPNetForSequenceClassification.call:8
#: transformers.TFMPNetForTokenClassification.call:8
#: transformers.TFMPNetModel.call:8
msgid ""
"Indices of input sequence tokens in the vocabulary.  Indices can be "
"obtained using :class:`~transformers.MPNetTokenizer`. See "
":func:`transformers.PreTrainedTokenizer.__call__` and "
":func:`transformers.PreTrainedTokenizer.encode` for details.  `What are "
"input IDs? <../glossary.html#input-ids>`__"
msgstr ""

#: of transformers.TFMPNetForMaskedLM.call:10
#: transformers.TFMPNetForMultipleChoice.call:10
#: transformers.TFMPNetForQuestionAnswering.call:10
#: transformers.TFMPNetForSequenceClassification.call:10
#: transformers.TFMPNetForTokenClassification.call:10
#: transformers.TFMPNetModel.call:10
msgid ""
"Indices can be obtained using :class:`~transformers.MPNetTokenizer`. See "
":func:`transformers.PreTrainedTokenizer.__call__` and "
":func:`transformers.PreTrainedTokenizer.encode` for details."
msgstr ""

#: of transformers.TFMPNetForMaskedLM.call:23
#: transformers.TFMPNetForMultipleChoice.call:23
#: transformers.TFMPNetForQuestionAnswering.call:23
#: transformers.TFMPNetForSequenceClassification.call:23
#: transformers.TFMPNetForTokenClassification.call:23
#: transformers.TFMPNetModel.call:23
msgid ""
"Indices of positions of each input sequence tokens in the position "
"embeddings. Selected in the range ``[0, config.max_position_embeddings - "
"1]``.  `What are position IDs? <../glossary.html#position-ids>`__"
msgstr ""

#: of transformers.TFMPNetForMaskedLM.call:26
#: transformers.TFMPNetForMultipleChoice.call:26
#: transformers.TFMPNetForQuestionAnswering.call:26
#: transformers.TFMPNetForSequenceClassification.call:26
#: transformers.TFMPNetForTokenClassification.call:26
#: transformers.TFMPNetModel.call:26
msgid "`What are position IDs? <../glossary.html#position-ids>`__"
msgstr ""

#: of transformers.TFMPNetForMaskedLM.call:33
#: transformers.TFMPNetForMultipleChoice.call:33
#: transformers.TFMPNetForQuestionAnswering.call:33
#: transformers.TFMPNetForSequenceClassification.call:33
#: transformers.TFMPNetForTokenClassification.call:33
#: transformers.TFMPNetModel.call:33
msgid ""
"Optionally, instead of passing :obj:`input_ids` you can choose to "
"directly pass an embedded representation. This is useful if you want more"
" control over how to convert :obj:`input_ids` indices into associated "
"vectors than the model's internal embedding lookup matrix."
msgstr ""

#: of transformers.TFMPNetForMaskedLM.call:37
#: transformers.TFMPNetForMultipleChoice.call:37
#: transformers.TFMPNetForQuestionAnswering.call:37
#: transformers.TFMPNetForSequenceClassification.call:37
#: transformers.TFMPNetForTokenClassification.call:37
#: transformers.TFMPNetModel.call:37
msgid ""
"Whether or not to return the attentions tensors of all attention layers. "
"See ``attentions`` under returned tensors for more detail. This argument "
"can be used only in eager mode, in graph mode the value in the config "
"will be used instead."
msgstr ""

#: of transformers.TFMPNetForMaskedLM.call:41
#: transformers.TFMPNetForMultipleChoice.call:41
#: transformers.TFMPNetForQuestionAnswering.call:41
#: transformers.TFMPNetForSequenceClassification.call:41
#: transformers.TFMPNetForTokenClassification.call:41
#: transformers.TFMPNetModel.call:41
msgid ""
"Whether or not to return the hidden states of all layers. See "
"``hidden_states`` under returned tensors for more detail. This argument "
"can be used only in eager mode, in graph mode the value in the config "
"will be used instead."
msgstr ""

#: of transformers.TFMPNetForMaskedLM.call:45
#: transformers.TFMPNetForMultipleChoice.call:45
#: transformers.TFMPNetForQuestionAnswering.call:45
#: transformers.TFMPNetForSequenceClassification.call:45
#: transformers.TFMPNetForTokenClassification.call:45
#: transformers.TFMPNetModel.call:45
msgid ""
"Whether or not to return a :class:`~transformers.file_utils.ModelOutput` "
"instead of a plain tuple. This argument can be used in eager mode, in "
"graph mode the value will always be set to True."
msgstr ""

#: of transformers.TFMPNetForMaskedLM.call:48
#: transformers.TFMPNetForMultipleChoice.call:48
#: transformers.TFMPNetForQuestionAnswering.call:48
#: transformers.TFMPNetForSequenceClassification.call:48
#: transformers.TFMPNetForTokenClassification.call:48
#: transformers.TFMPNetModel.call:48
msgid ""
"Whether or not to use the model in training mode (some modules like "
"dropout modules have different behaviors between training and "
"evaluation)."
msgstr ""

#: of transformers.TFMPNetModel.call:52
msgid ""
"A :class:`~transformers.modeling_tf_outputs.TFBaseModelOutput` or a tuple"
" of :obj:`tf.Tensor` (if ``return_dict=False`` is passed or when "
"``config.return_dict=False``) comprising various elements depending on "
"the configuration (:class:`~transformers.MPNetConfig`) and inputs.  - "
"**last_hidden_state** (:obj:`tf.Tensor` of shape :obj:`(batch_size, "
"sequence_length, hidden_size)`) -- Sequence of hidden-states at the "
"output of the last layer of the model. - **hidden_states** "
"(:obj:`tuple(tf.FloatTensor)`, `optional`, returned when "
"``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of :obj:`tf.Tensor` (one "
"for the output of the embeddings + one for the output of each layer) of"
"   shape :obj:`(batch_size, sequence_length, hidden_size)`.    Hidden-"
"states of the model at the output of each layer plus the initial "
"embedding outputs. - **attentions** (:obj:`tuple(tf.Tensor)`, `optional`,"
" returned when ``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`tf.Tensor` (one for "
"each layer) of shape :obj:`(batch_size, num_heads, sequence_length,   "
"sequence_length)`.    Attentions weights after the attention softmax, "
"used to compute the weighted average in the self-attention   heads."
msgstr ""

#: of transformers.TFMPNetModel.call:52
msgid ""
"A :class:`~transformers.modeling_tf_outputs.TFBaseModelOutput` or a tuple"
" of :obj:`tf.Tensor` (if ``return_dict=False`` is passed or when "
"``config.return_dict=False``) comprising various elements depending on "
"the configuration (:class:`~transformers.MPNetConfig`) and inputs."
msgstr ""

#: of transformers.TFMPNetModel.call:56
msgid ""
"**last_hidden_state** (:obj:`tf.Tensor` of shape :obj:`(batch_size, "
"sequence_length, hidden_size)`) -- Sequence of hidden-states at the "
"output of the last layer of the model."
msgstr ""

#: of transformers.TFMPNetModel.call:57
msgid ""
"**hidden_states** (:obj:`tuple(tf.FloatTensor)`, `optional`, returned "
"when ``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of :obj:`tf.Tensor` (one "
"for the output of the embeddings + one for the output of each layer) of "
"shape :obj:`(batch_size, sequence_length, hidden_size)`."
msgstr ""

#: of transformers.TFMPNetForMaskedLM.call:66
#: transformers.TFMPNetForMultipleChoice.call:68
#: transformers.TFMPNetForQuestionAnswering.call:71
#: transformers.TFMPNetForSequenceClassification.call:66
#: transformers.TFMPNetForTokenClassification.call:65
#: transformers.TFMPNetModel.call:61
msgid ""
"**attentions** (:obj:`tuple(tf.Tensor)`, `optional`, returned when "
"``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`tf.Tensor` (one for "
"each layer) of shape :obj:`(batch_size, num_heads, sequence_length, "
"sequence_length)`."
msgstr ""

#: of transformers.TFMPNetModel.call:66
msgid ""
":class:`~transformers.modeling_tf_outputs.TFBaseModelOutput` or "
":obj:`tuple(tf.Tensor)`"
msgstr ""

#: ../../source/model_doc/mpnet.rst:118
msgid "TFMPNetForMaskedLM"
msgstr ""

#: of transformers.TFMPNetForMaskedLM:1
msgid "MPNet Model with a `language modeling` head on top."
msgstr ""

#: of transformers.TFMPNetForMaskedLM.call:1
msgid ""
"The :class:`~transformers.TFMPNetForMaskedLM` forward method, overrides "
"the :func:`__call__` special method."
msgstr ""

#: of transformers.TFMPNetForMaskedLM.call:56
msgid ""
"A :class:`~transformers.modeling_tf_outputs.TFMaskedLMOutput` or a tuple "
"of :obj:`tf.Tensor` (if ``return_dict=False`` is passed or when "
"``config.return_dict=False``) comprising various elements depending on "
"the configuration (:class:`~transformers.MPNetConfig`) and inputs.  - "
"**loss** (:obj:`tf.Tensor` of shape :obj:`(n,)`, `optional`, where n is "
"the number of non-masked labels, returned when :obj:`labels` is provided)"
" -- Masked language modeling (MLM) loss. - **logits** (:obj:`tf.Tensor` "
"of shape :obj:`(batch_size, sequence_length, config.vocab_size)`) -- "
"Prediction scores of the language modeling head (scores for each "
"vocabulary token before SoftMax). - **hidden_states** "
"(:obj:`tuple(tf.Tensor)`, `optional`, returned when "
"``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of :obj:`tf.Tensor` (one "
"for the output of the embeddings + one for the output of each layer) of"
"   shape :obj:`(batch_size, sequence_length, hidden_size)`.    Hidden-"
"states of the model at the output of each layer plus the initial "
"embedding outputs. - **attentions** (:obj:`tuple(tf.Tensor)`, `optional`,"
" returned when ``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`tf.Tensor` (one for "
"each layer) of shape :obj:`(batch_size, num_heads, sequence_length,   "
"sequence_length)`.    Attentions weights after the attention softmax, "
"used to compute the weighted average in the self-attention   heads."
msgstr ""

#: of transformers.TFMPNetForMaskedLM.call:56
msgid ""
"A :class:`~transformers.modeling_tf_outputs.TFMaskedLMOutput` or a tuple "
"of :obj:`tf.Tensor` (if ``return_dict=False`` is passed or when "
"``config.return_dict=False``) comprising various elements depending on "
"the configuration (:class:`~transformers.MPNetConfig`) and inputs."
msgstr ""

#: of transformers.TFMPNetForMaskedLM.call:60
msgid ""
"**loss** (:obj:`tf.Tensor` of shape :obj:`(n,)`, `optional`, where n is "
"the number of non-masked labels, returned when :obj:`labels` is provided)"
" -- Masked language modeling (MLM) loss."
msgstr ""

#: of transformers.TFMPNetForMaskedLM.call:61
msgid ""
"**logits** (:obj:`tf.Tensor` of shape :obj:`(batch_size, sequence_length,"
" config.vocab_size)`) -- Prediction scores of the language modeling head "
"(scores for each vocabulary token before SoftMax)."
msgstr ""

#: of transformers.TFMPNetForMaskedLM.call:62
#: transformers.TFMPNetForMultipleChoice.call:64
#: transformers.TFMPNetForQuestionAnswering.call:67
#: transformers.TFMPNetForSequenceClassification.call:62
#: transformers.TFMPNetForTokenClassification.call:61
msgid ""
"**hidden_states** (:obj:`tuple(tf.Tensor)`, `optional`, returned when "
"``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of :obj:`tf.Tensor` (one "
"for the output of the embeddings + one for the output of each layer) of "
"shape :obj:`(batch_size, sequence_length, hidden_size)`."
msgstr ""

#: of transformers.TFMPNetForMaskedLM.call:71
msgid ""
":class:`~transformers.modeling_tf_outputs.TFMaskedLMOutput` or "
":obj:`tuple(tf.Tensor)`"
msgstr ""

#: ../../source/model_doc/mpnet.rst:125
msgid "TFMPNetForSequenceClassification"
msgstr ""

#: of transformers.TFMPNetForSequenceClassification.call:1
msgid ""
"The :class:`~transformers.TFMPNetForSequenceClassification` forward "
"method, overrides the :func:`__call__` special method."
msgstr ""

#: of transformers.TFMPNetForSequenceClassification.call:56
msgid ""
"A :class:`~transformers.modeling_tf_outputs.TFSequenceClassifierOutput` "
"or a tuple of :obj:`tf.Tensor` (if ``return_dict=False`` is passed or "
"when ``config.return_dict=False``) comprising various elements depending "
"on the configuration (:class:`~transformers.MPNetConfig`) and inputs.  - "
"**loss** (:obj:`tf.Tensor` of shape :obj:`(batch_size, )`, `optional`, "
"returned when :obj:`labels` is provided) -- Classification (or regression"
" if config.num_labels==1) loss. - **logits** (:obj:`tf.Tensor` of shape "
":obj:`(batch_size, config.num_labels)`) -- Classification (or regression "
"if config.num_labels==1) scores (before SoftMax). - **hidden_states** "
"(:obj:`tuple(tf.Tensor)`, `optional`, returned when "
"``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of :obj:`tf.Tensor` (one "
"for the output of the embeddings + one for the output of each layer) of"
"   shape :obj:`(batch_size, sequence_length, hidden_size)`.    Hidden-"
"states of the model at the output of each layer plus the initial "
"embedding outputs. - **attentions** (:obj:`tuple(tf.Tensor)`, `optional`,"
" returned when ``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`tf.Tensor` (one for "
"each layer) of shape :obj:`(batch_size, num_heads, sequence_length,   "
"sequence_length)`.    Attentions weights after the attention softmax, "
"used to compute the weighted average in the self-attention   heads."
msgstr ""

#: of transformers.TFMPNetForSequenceClassification.call:56
msgid ""
"A :class:`~transformers.modeling_tf_outputs.TFSequenceClassifierOutput` "
"or a tuple of :obj:`tf.Tensor` (if ``return_dict=False`` is passed or "
"when ``config.return_dict=False``) comprising various elements depending "
"on the configuration (:class:`~transformers.MPNetConfig`) and inputs."
msgstr ""

#: of transformers.TFMPNetForSequenceClassification.call:60
msgid ""
"**loss** (:obj:`tf.Tensor` of shape :obj:`(batch_size, )`, `optional`, "
"returned when :obj:`labels` is provided) -- Classification (or regression"
" if config.num_labels==1) loss."
msgstr ""

#: of transformers.TFMPNetForSequenceClassification.call:61
msgid ""
"**logits** (:obj:`tf.Tensor` of shape :obj:`(batch_size, "
"config.num_labels)`) -- Classification (or regression if "
"config.num_labels==1) scores (before SoftMax)."
msgstr ""

#: of transformers.TFMPNetForSequenceClassification.call:71
msgid ""
":class:`~transformers.modeling_tf_outputs.TFSequenceClassifierOutput` or "
":obj:`tuple(tf.Tensor)`"
msgstr ""

#: ../../source/model_doc/mpnet.rst:132
msgid "TFMPNetForMultipleChoice"
msgstr ""

#: of transformers.TFMPNetForMultipleChoice.call:1
msgid ""
"The :class:`~transformers.TFMPNetForMultipleChoice` forward method, "
"overrides the :func:`__call__` special method."
msgstr ""

#: of transformers.TFMPNetForMultipleChoice.call:51
msgid ""
"Labels for computing the multiple choice classification loss. Indices "
"should be in ``[0, ..., num_choices]`` where :obj:`num_choices` is the "
"size of the second dimension of the input tensors. (See :obj:`input_ids` "
"above)"
msgstr ""

#: of transformers.TFMPNetForMultipleChoice.call:56
msgid ""
"A :class:`~transformers.modeling_tf_outputs.TFMultipleChoiceModelOutput` "
"or a tuple of :obj:`tf.Tensor` (if ``return_dict=False`` is passed or "
"when ``config.return_dict=False``) comprising various elements depending "
"on the configuration (:class:`~transformers.MPNetConfig`) and inputs.  - "
"**loss** (:obj:`tf.Tensor` of shape `(batch_size, )`, `optional`, "
"returned when :obj:`labels` is provided) -- Classification loss. - "
"**logits** (:obj:`tf.Tensor` of shape :obj:`(batch_size, num_choices)`) "
"-- `num_choices` is the second dimension of the input tensors. (see "
"`input_ids` above).    Classification scores (before SoftMax). - "
"**hidden_states** (:obj:`tuple(tf.Tensor)`, `optional`, returned when "
"``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of :obj:`tf.Tensor` (one "
"for the output of the embeddings + one for the output of each layer) of"
"   shape :obj:`(batch_size, sequence_length, hidden_size)`.    Hidden-"
"states of the model at the output of each layer plus the initial "
"embedding outputs. - **attentions** (:obj:`tuple(tf.Tensor)`, `optional`,"
" returned when ``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`tf.Tensor` (one for "
"each layer) of shape :obj:`(batch_size, num_heads, sequence_length,   "
"sequence_length)`.    Attentions weights after the attention softmax, "
"used to compute the weighted average in the self-attention   heads."
msgstr ""

#: of transformers.TFMPNetForMultipleChoice.call:56
msgid ""
"A :class:`~transformers.modeling_tf_outputs.TFMultipleChoiceModelOutput` "
"or a tuple of :obj:`tf.Tensor` (if ``return_dict=False`` is passed or "
"when ``config.return_dict=False``) comprising various elements depending "
"on the configuration (:class:`~transformers.MPNetConfig`) and inputs."
msgstr ""

#: of transformers.TFMPNetForMultipleChoice.call:60
msgid ""
"**loss** (:obj:`tf.Tensor` of shape `(batch_size, )`, `optional`, "
"returned when :obj:`labels` is provided) -- Classification loss."
msgstr ""

#: of transformers.TFMPNetForMultipleChoice.call:61
msgid ""
"**logits** (:obj:`tf.Tensor` of shape :obj:`(batch_size, num_choices)`) "
"-- `num_choices` is the second dimension of the input tensors. (see "
"`input_ids` above)."
msgstr ""

#: of transformers.TFMPNetForMultipleChoice.call:73
msgid ""
":class:`~transformers.modeling_tf_outputs.TFMultipleChoiceModelOutput` or"
" :obj:`tuple(tf.Tensor)`"
msgstr ""

#: ../../source/model_doc/mpnet.rst:139
msgid "TFMPNetForTokenClassification"
msgstr ""

#: of transformers.TFMPNetForTokenClassification.call:1
msgid ""
"The :class:`~transformers.TFMPNetForTokenClassification` forward method, "
"overrides the :func:`__call__` special method."
msgstr ""

#: of transformers.TFMPNetForTokenClassification.call:55
msgid ""
"A :class:`~transformers.modeling_tf_outputs.TFTokenClassifierOutput` or a"
" tuple of :obj:`tf.Tensor` (if ``return_dict=False`` is passed or when "
"``config.return_dict=False``) comprising various elements depending on "
"the configuration (:class:`~transformers.MPNetConfig`) and inputs.  - "
"**loss** (:obj:`tf.Tensor` of shape :obj:`(n,)`, `optional`, where n is "
"the number of unmasked labels, returned when ``labels`` is provided)  -- "
"Classification loss. - **logits** (:obj:`tf.Tensor` of shape "
":obj:`(batch_size, sequence_length, config.num_labels)`) -- "
"Classification scores (before SoftMax). - **hidden_states** "
"(:obj:`tuple(tf.Tensor)`, `optional`, returned when "
"``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of :obj:`tf.Tensor` (one "
"for the output of the embeddings + one for the output of each layer) of"
"   shape :obj:`(batch_size, sequence_length, hidden_size)`.    Hidden-"
"states of the model at the output of each layer plus the initial "
"embedding outputs. - **attentions** (:obj:`tuple(tf.Tensor)`, `optional`,"
" returned when ``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`tf.Tensor` (one for "
"each layer) of shape :obj:`(batch_size, num_heads, sequence_length,   "
"sequence_length)`.    Attentions weights after the attention softmax, "
"used to compute the weighted average in the self-attention   heads."
msgstr ""

#: of transformers.TFMPNetForTokenClassification.call:55
msgid ""
"A :class:`~transformers.modeling_tf_outputs.TFTokenClassifierOutput` or a"
" tuple of :obj:`tf.Tensor` (if ``return_dict=False`` is passed or when "
"``config.return_dict=False``) comprising various elements depending on "
"the configuration (:class:`~transformers.MPNetConfig`) and inputs."
msgstr ""

#: of transformers.TFMPNetForTokenClassification.call:59
msgid ""
"**loss** (:obj:`tf.Tensor` of shape :obj:`(n,)`, `optional`, where n is "
"the number of unmasked labels, returned when ``labels`` is provided)  -- "
"Classification loss."
msgstr ""

#: of transformers.TFMPNetForTokenClassification.call:60
msgid ""
"**logits** (:obj:`tf.Tensor` of shape :obj:`(batch_size, sequence_length,"
" config.num_labels)`) -- Classification scores (before SoftMax)."
msgstr ""

#: of transformers.TFMPNetForTokenClassification.call:70
msgid ""
":class:`~transformers.modeling_tf_outputs.TFTokenClassifierOutput` or "
":obj:`tuple(tf.Tensor)`"
msgstr ""

#: ../../source/model_doc/mpnet.rst:146
msgid "TFMPNetForQuestionAnswering"
msgstr ""

#: of transformers.TFMPNetForQuestionAnswering.call:1
msgid ""
"The :class:`~transformers.TFMPNetForQuestionAnswering` forward method, "
"overrides the :func:`__call__` special method."
msgstr ""

#: of transformers.TFMPNetForQuestionAnswering.call:60
msgid ""
"A "
":class:`~transformers.modeling_tf_outputs.TFQuestionAnsweringModelOutput`"
" or a tuple of :obj:`tf.Tensor` (if ``return_dict=False`` is passed or "
"when ``config.return_dict=False``) comprising various elements depending "
"on the configuration (:class:`~transformers.MPNetConfig`) and inputs.  - "
"**loss** (:obj:`tf.Tensor` of shape :obj:`(batch_size, )`, `optional`, "
"returned when :obj:`start_positions` and :obj:`end_positions` are "
"provided) -- Total span extraction loss is the sum of a Cross-Entropy for"
" the start and end positions. - **start_logits** (:obj:`tf.Tensor` of "
"shape :obj:`(batch_size, sequence_length)`) -- Span-start scores (before "
"SoftMax). - **end_logits** (:obj:`tf.Tensor` of shape :obj:`(batch_size, "
"sequence_length)`) -- Span-end scores (before SoftMax). - "
"**hidden_states** (:obj:`tuple(tf.Tensor)`, `optional`, returned when "
"``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of :obj:`tf.Tensor` (one "
"for the output of the embeddings + one for the output of each layer) of"
"   shape :obj:`(batch_size, sequence_length, hidden_size)`.    Hidden-"
"states of the model at the output of each layer plus the initial "
"embedding outputs. - **attentions** (:obj:`tuple(tf.Tensor)`, `optional`,"
" returned when ``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`tf.Tensor` (one for "
"each layer) of shape :obj:`(batch_size, num_heads, sequence_length,   "
"sequence_length)`.    Attentions weights after the attention softmax, "
"used to compute the weighted average in the self-attention   heads."
msgstr ""

#: of transformers.TFMPNetForQuestionAnswering.call:60
msgid ""
"A "
":class:`~transformers.modeling_tf_outputs.TFQuestionAnsweringModelOutput`"
" or a tuple of :obj:`tf.Tensor` (if ``return_dict=False`` is passed or "
"when ``config.return_dict=False``) comprising various elements depending "
"on the configuration (:class:`~transformers.MPNetConfig`) and inputs."
msgstr ""

#: of transformers.TFMPNetForQuestionAnswering.call:64
msgid ""
"**loss** (:obj:`tf.Tensor` of shape :obj:`(batch_size, )`, `optional`, "
"returned when :obj:`start_positions` and :obj:`end_positions` are "
"provided) -- Total span extraction loss is the sum of a Cross-Entropy for"
" the start and end positions."
msgstr ""

#: of transformers.TFMPNetForQuestionAnswering.call:65
msgid ""
"**start_logits** (:obj:`tf.Tensor` of shape :obj:`(batch_size, "
"sequence_length)`) -- Span-start scores (before SoftMax)."
msgstr ""

#: of transformers.TFMPNetForQuestionAnswering.call:66
msgid ""
"**end_logits** (:obj:`tf.Tensor` of shape :obj:`(batch_size, "
"sequence_length)`) -- Span-end scores (before SoftMax)."
msgstr ""

#: of transformers.TFMPNetForQuestionAnswering.call:76
msgid ""
":class:`~transformers.modeling_tf_outputs.TFQuestionAnsweringModelOutput`"
" or :obj:`tuple(tf.Tensor)`"
msgstr ""

