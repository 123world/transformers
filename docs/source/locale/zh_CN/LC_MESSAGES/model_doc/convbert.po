# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, The Hugging Face Team, Licenced under the Apache
# License, Version 2.0
# This file is distributed under the same license as the transformers
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: transformers \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-30 16:44+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/model_doc/convbert.rst:14
msgid "ConvBERT"
msgstr ""

#: ../../source/model_doc/convbert.rst:17
msgid "Overview"
msgstr ""

#: ../../source/model_doc/convbert.rst:19
msgid ""
"The ConvBERT model was proposed in `ConvBERT: Improving BERT with Span-"
"based Dynamic Convolution <https://arxiv.org/abs/2008.02496>`__ by Zihang"
" Jiang, Weihao Yu, Daquan Zhou, Yunpeng Chen, Jiashi Feng, Shuicheng Yan."
msgstr ""

#: ../../source/model_doc/convbert.rst:23
msgid "The abstract from the paper is the following:"
msgstr ""

#: ../../source/model_doc/convbert.rst:25
msgid ""
"*Pre-trained language models like BERT and its variants have recently "
"achieved impressive performance in various natural language understanding"
" tasks. However, BERT heavily relies on the global self-attention block "
"and thus suffers large memory footprint and computation cost. Although "
"all its attention heads query on the whole input sequence for generating "
"the attention map from a global perspective, we observe some heads only "
"need to learn local dependencies, which means the existence of "
"computation redundancy. We therefore propose a novel span-based dynamic "
"convolution to replace these self-attention heads to directly model local"
" dependencies. The novel convolution heads, together with the rest self-"
"attention heads, form a new mixed attention block that is more efficient "
"at both global and local context learning. We equip BERT with this mixed "
"attention design and build a ConvBERT model. Experiments have shown that "
"ConvBERT significantly outperforms BERT and its variants in various "
"downstream tasks, with lower training cost and fewer model parameters. "
"Remarkably, ConvBERTbase model achieves 86.4 GLUE score, 0.7 higher than "
"ELECTRAbase, while using less than 1/4 training cost. Code and pre-"
"trained models will be released.*"
msgstr ""

#: ../../source/model_doc/convbert.rst:37
msgid "ConvBERT training tips are similar to those of BERT."
msgstr ""

#: ../../source/model_doc/convbert.rst:39
msgid ""
"This model was contributed by `abhishek "
"<https://huggingface.co/abhishek>`__. The original implementation can be "
"found here: https://github.com/yitu-opensource/ConvBert"
msgstr ""

#: ../../source/model_doc/convbert.rst:43
msgid "ConvBertConfig"
msgstr ""

#: of transformers.ConvBertConfig:1
msgid ""
"This is the configuration class to store the configuration of a "
":class:`~transformers.ConvBertModel`. It is used to instantiate an "
"ConvBERT model according to the specified arguments, defining the model "
"architecture. Instantiating a configuration with the defaults will yield "
"a similar configuration to that of the ConvBERT `conv-bert-base "
"<https://huggingface.co/YituTech/conv-bert-base>`__ architecture. "
"Configuration objects inherit from "
":class:`~transformers.PretrainedConfig` and can be used to control the "
"model outputs. Read the documentation from "
":class:`~transformers.PretrainedConfig` for more information."
msgstr ""

#: of transformers.ConvBertConfig transformers.ConvBertForMaskedLM
#: transformers.ConvBertForMaskedLM.forward
#: transformers.ConvBertForMultipleChoice
#: transformers.ConvBertForMultipleChoice.forward
#: transformers.ConvBertForQuestionAnswering
#: transformers.ConvBertForQuestionAnswering.forward
#: transformers.ConvBertForSequenceClassification
#: transformers.ConvBertForSequenceClassification.forward
#: transformers.ConvBertForTokenClassification
#: transformers.ConvBertForTokenClassification.forward
#: transformers.ConvBertModel transformers.ConvBertModel.forward
#: transformers.ConvBertTokenizer.build_inputs_with_special_tokens
#: transformers.ConvBertTokenizer.create_token_type_ids_from_sequences
#: transformers.ConvBertTokenizer.get_special_tokens_mask
#: transformers.ConvBertTokenizer.save_vocabulary
#: transformers.TFConvBertForMaskedLM transformers.TFConvBertForMaskedLM.call
#: transformers.TFConvBertForMultipleChoice
#: transformers.TFConvBertForMultipleChoice.call
#: transformers.TFConvBertForQuestionAnswering
#: transformers.TFConvBertForQuestionAnswering.call
#: transformers.TFConvBertForSequenceClassification
#: transformers.TFConvBertForSequenceClassification.call
#: transformers.TFConvBertForTokenClassification
#: transformers.TFConvBertForTokenClassification.call
#: transformers.TFConvBertModel transformers.TFConvBertModel.call
msgid "Parameters"
msgstr ""

#: of transformers.ConvBertConfig:8
msgid ""
"Vocabulary size of the ConvBERT model. Defines the number of different "
"tokens that can be represented by the :obj:`inputs_ids` passed when "
"calling :class:`~transformers.ConvBertModel` or "
":class:`~transformers.TFConvBertModel`."
msgstr ""

#: of transformers.ConvBertConfig:12
msgid "Dimensionality of the encoder layers and the pooler layer."
msgstr ""

#: of transformers.ConvBertConfig:14
msgid "Number of hidden layers in the Transformer encoder."
msgstr ""

#: of transformers.ConvBertConfig:16
msgid ""
"Number of attention heads for each attention layer in the Transformer "
"encoder."
msgstr ""

#: of transformers.ConvBertConfig:18
msgid ""
"Dimensionality of the \"intermediate\" (i.e., feed-forward) layer in the "
"Transformer encoder."
msgstr ""

#: of transformers.ConvBertConfig:20
msgid ""
"The non-linear activation function (function or string) in the encoder "
"and pooler. If string, :obj:`\"gelu\"`, :obj:`\"relu\"`, :obj:`\"selu\"` "
"and :obj:`\"gelu_new\"` are supported."
msgstr ""

#: of transformers.ConvBertConfig:23
msgid ""
"The dropout probabilitiy for all fully connected layers in the "
"embeddings, encoder, and pooler."
msgstr ""

#: of transformers.ConvBertConfig:25
msgid "The dropout ratio for the attention probabilities."
msgstr ""

#: of transformers.ConvBertConfig:27
msgid ""
"The maximum sequence length that this model might ever be used with. "
"Typically set this to something large just in case (e.g., 512 or 1024 or "
"2048)."
msgstr ""

#: of transformers.ConvBertConfig:30
msgid ""
"The vocabulary size of the :obj:`token_type_ids` passed when calling "
":class:`~transformers.ConvBertModel` or "
":class:`~transformers.TFConvBertModel`."
msgstr ""

#: of transformers.ConvBertConfig:33
msgid ""
"The standard deviation of the truncated_normal_initializer for "
"initializing all weight matrices."
msgstr ""

#: of transformers.ConvBertConfig:35
msgid "The epsilon used by the layer normalization layers."
msgstr ""

#: of transformers.ConvBertConfig:37
msgid "Ratio gamma to reduce the number of attention heads."
msgstr ""

#: of transformers.ConvBertConfig:39
msgid "The number of groups for grouped linear layers for ConvBert model"
msgstr ""

#: of transformers.ConvBertConfig:41
msgid "The size of the convolutional kernel."
msgstr ""

#: of transformers.ConvBertConfig:43
msgid "The dropout ratio for the classification head."
msgstr ""

#: of transformers.ConvBertConfig:52
#: transformers.ConvBertForMaskedLM.forward:78
#: transformers.ConvBertForMultipleChoice.forward:80
#: transformers.ConvBertForQuestionAnswering.forward:83
#: transformers.ConvBertForSequenceClassification.forward:78
#: transformers.ConvBertForTokenClassification.forward:77
#: transformers.ConvBertModel.forward:78
#: transformers.TFConvBertForMaskedLM.call:81
#: transformers.TFConvBertForMultipleChoice.call:83
#: transformers.TFConvBertForQuestionAnswering.call:86
#: transformers.TFConvBertForSequenceClassification.call:81
#: transformers.TFConvBertForTokenClassification.call:80
#: transformers.TFConvBertModel.call:76
msgid "Example::"
msgstr ""

#: ../../source/model_doc/convbert.rst:50
msgid "ConvBertTokenizer"
msgstr ""

#: of transformers.ConvBertTokenizer:1
msgid ""
"Construct a ConvBERT tokenizer. :class:`~transformers.ConvBertTokenizer` "
"is identical to :class:`~transformers.BertTokenizer` and runs end-to-end "
"tokenization: punctuation splitting and wordpiece. Refer to superclass "
":class:`~transformers.BertTokenizer` for usage examples and documentation"
" concerning parameters."
msgstr ""

#: of transformers.ConvBertTokenizer.build_inputs_with_special_tokens:1
msgid ""
"Build model inputs from a sequence or a pair of sequence for sequence "
"classification tasks by concatenating and adding special tokens. A BERT "
"sequence has the following format:"
msgstr ""

#: of transformers.ConvBertTokenizer.build_inputs_with_special_tokens:4
msgid "single sequence: ``[CLS] X [SEP]``"
msgstr ""

#: of transformers.ConvBertTokenizer.build_inputs_with_special_tokens:5
msgid "pair of sequences: ``[CLS] A [SEP] B [SEP]``"
msgstr ""

#: of transformers.ConvBertTokenizer.build_inputs_with_special_tokens:7
msgid "List of IDs to which the special tokens will be added."
msgstr ""

#: of transformers.ConvBertTokenizer.build_inputs_with_special_tokens:9
#: transformers.ConvBertTokenizer.create_token_type_ids_from_sequences:13
#: transformers.ConvBertTokenizer.get_special_tokens_mask:6
msgid "Optional second list of IDs for sequence pairs."
msgstr ""

#: of transformers.ConvBertForMaskedLM.forward
#: transformers.ConvBertForMultipleChoice.forward
#: transformers.ConvBertForQuestionAnswering.forward
#: transformers.ConvBertForSequenceClassification.forward
#: transformers.ConvBertForTokenClassification.forward
#: transformers.ConvBertModel.forward
#: transformers.ConvBertTokenizer.build_inputs_with_special_tokens
#: transformers.ConvBertTokenizer.create_token_type_ids_from_sequences
#: transformers.ConvBertTokenizer.get_special_tokens_mask
#: transformers.ConvBertTokenizer.save_vocabulary
#: transformers.TFConvBertForMaskedLM.call
#: transformers.TFConvBertForMultipleChoice.call
#: transformers.TFConvBertForQuestionAnswering.call
#: transformers.TFConvBertForSequenceClassification.call
#: transformers.TFConvBertForTokenClassification.call
#: transformers.TFConvBertModel.call
msgid "Returns"
msgstr ""

#: of transformers.ConvBertTokenizer.build_inputs_with_special_tokens:12
msgid ""
"List of `input IDs <../glossary.html#input-ids>`__ with the appropriate "
"special tokens."
msgstr ""

#: of transformers.ConvBertForMaskedLM.forward
#: transformers.ConvBertForMultipleChoice.forward
#: transformers.ConvBertForQuestionAnswering.forward
#: transformers.ConvBertForSequenceClassification.forward
#: transformers.ConvBertForTokenClassification.forward
#: transformers.ConvBertModel.forward
#: transformers.ConvBertTokenizer.build_inputs_with_special_tokens
#: transformers.ConvBertTokenizer.create_token_type_ids_from_sequences
#: transformers.ConvBertTokenizer.get_special_tokens_mask
#: transformers.ConvBertTokenizer.save_vocabulary
#: transformers.TFConvBertForMaskedLM.call
#: transformers.TFConvBertForMultipleChoice.call
#: transformers.TFConvBertForQuestionAnswering.call
#: transformers.TFConvBertForSequenceClassification.call
#: transformers.TFConvBertForTokenClassification.call
#: transformers.TFConvBertModel.call
msgid "Return type"
msgstr ""

#: of transformers.ConvBertTokenizer.build_inputs_with_special_tokens:13
#: transformers.ConvBertTokenizer.create_token_type_ids_from_sequences:18
#: transformers.ConvBertTokenizer.get_special_tokens_mask:12
msgid ":obj:`List[int]`"
msgstr ""

#: of transformers.ConvBertTokenizer.create_token_type_ids_from_sequences:1
msgid ""
"Create a mask from the two sequences passed to be used in a sequence-pair"
" classification task. A BERT sequence pair mask has the following format:"
msgstr ""

#: of transformers.ConvBertTokenizer.create_token_type_ids_from_sequences:9
msgid ""
"If :obj:`token_ids_1` is :obj:`None`, this method only returns the first "
"portion of the mask (0s)."
msgstr ""

#: of transformers.ConvBertTokenizer.create_token_type_ids_from_sequences:11
#: transformers.ConvBertTokenizer.get_special_tokens_mask:4
msgid "List of IDs."
msgstr ""

#: of transformers.ConvBertTokenizer.create_token_type_ids_from_sequences:16
msgid ""
"List of `token type IDs <../glossary.html#token-type-ids>`_ according to "
"the given sequence(s)."
msgstr ""

#: of transformers.ConvBertTokenizer.get_special_tokens_mask:1
msgid ""
"Retrieve sequence ids from a token list that has no special tokens added."
" This method is called when adding special tokens using the tokenizer "
"``prepare_for_model`` method."
msgstr ""

#: of transformers.ConvBertTokenizer.get_special_tokens_mask:8
msgid ""
"Whether or not the token list is already formatted with special tokens "
"for the model."
msgstr ""

#: of transformers.ConvBertTokenizer.get_special_tokens_mask:11
msgid ""
"A list of integers in the range [0, 1]: 1 for a special token, 0 for a "
"sequence token."
msgstr ""

#: of transformers.ConvBertTokenizer.save_vocabulary:1
msgid "Save only the vocabulary of the tokenizer (vocabulary + added tokens)."
msgstr ""

#: of transformers.ConvBertTokenizer.save_vocabulary:3
msgid ""
"This method won't save the configuration and special token mappings of "
"the tokenizer. Use "
":meth:`~transformers.PreTrainedTokenizerFast._save_pretrained` to save "
"the whole state of the tokenizer."
msgstr ""

#: of transformers.ConvBertTokenizer.save_vocabulary:6
msgid "The directory in which to save the vocabulary."
msgstr ""

#: of transformers.ConvBertTokenizer.save_vocabulary:8
msgid "An optional prefix to add to the named of the saved files."
msgstr ""

#: of transformers.ConvBertTokenizer.save_vocabulary:11
msgid "Paths to the files saved."
msgstr ""

#: of transformers.ConvBertTokenizer.save_vocabulary:12
msgid ":obj:`Tuple(str)`"
msgstr ""

#: ../../source/model_doc/convbert.rst:58
msgid "ConvBertTokenizerFast"
msgstr ""

#: of transformers.ConvBertTokenizerFast:1
msgid ""
"Construct a \"fast\" ConvBERT tokenizer (backed by HuggingFace's "
"`tokenizers` library)."
msgstr ""

#: of transformers.ConvBertTokenizerFast:3
msgid ""
":class:`~transformers.ConvBertTokenizerFast` is identical to "
":class:`~transformers.BertTokenizerFast` and runs end-to-end "
"tokenization: punctuation splitting and wordpiece."
msgstr ""

#: of transformers.ConvBertTokenizerFast:6
msgid ""
"Refer to superclass :class:`~transformers.BertTokenizerFast` for usage "
"examples and documentation concerning parameters."
msgstr ""

#: ../../source/model_doc/convbert.rst:65
msgid "ConvBertModel"
msgstr ""

#: of transformers.ConvBertModel:1
msgid ""
"The bare ConvBERT Model transformer outputting raw hidden-states without "
"any specific head on top. This model is a PyTorch `torch.nn.Module "
"<https://pytorch.org/docs/stable/nn.html#torch.nn.Module>`_ sub-class. "
"Use it as a regular PyTorch Module and refer to the PyTorch documentation"
" for all matter related to general usage and behavior."
msgstr ""

#: of transformers.ConvBertForMaskedLM:6
#: transformers.ConvBertForMultipleChoice:8
#: transformers.ConvBertForQuestionAnswering:8
#: transformers.ConvBertForSequenceClassification:8
#: transformers.ConvBertForTokenClassification:8 transformers.ConvBertModel:6
#: transformers.TFConvBertForMaskedLM:30
#: transformers.TFConvBertForMultipleChoice:32
#: transformers.TFConvBertForQuestionAnswering:32
#: transformers.TFConvBertForSequenceClassification:31
#: transformers.TFConvBertForTokenClassification:32
#: transformers.TFConvBertModel:30
msgid ""
"Model configuration class with all the parameters of the model. "
"Initializing with a config file does not load the weights associated with"
" the model, only the configuration. Check out the "
":meth:`~transformers.PreTrainedModel.from_pretrained` method to load the "
"model weights."
msgstr ""

#: of transformers.ConvBertModel.forward:1
msgid ""
"The :class:`~transformers.ConvBertModel` forward method, overrides the "
":func:`__call__` special method."
msgstr ""

#: of transformers.ConvBertForMaskedLM.forward:4
#: transformers.ConvBertForMultipleChoice.forward:4
#: transformers.ConvBertForQuestionAnswering.forward:4
#: transformers.ConvBertForSequenceClassification.forward:4
#: transformers.ConvBertForTokenClassification.forward:4
#: transformers.ConvBertModel.forward:4
#: transformers.TFConvBertForMaskedLM.call:4
#: transformers.TFConvBertForMultipleChoice.call:4
#: transformers.TFConvBertForQuestionAnswering.call:4
#: transformers.TFConvBertForSequenceClassification.call:4
#: transformers.TFConvBertForTokenClassification.call:4
#: transformers.TFConvBertModel.call:4
msgid ""
"Although the recipe for forward pass needs to be defined within this "
"function, one should call the :class:`Module` instance afterwards instead"
" of this since the former takes care of running the pre and post "
"processing steps while the latter silently ignores them."
msgstr ""

#: of transformers.ConvBertForMaskedLM.forward:8
#: transformers.ConvBertForMultipleChoice.forward:8
#: transformers.ConvBertForQuestionAnswering.forward:8
#: transformers.ConvBertForSequenceClassification.forward:8
#: transformers.ConvBertForTokenClassification.forward:8
#: transformers.ConvBertModel.forward:8
msgid ""
"Indices of input sequence tokens in the vocabulary.  Indices can be "
"obtained using :class:`transformers.ConvBertTokenizer`. See "
":func:`transformers.PreTrainedTokenizer.encode` and "
":func:`transformers.PreTrainedTokenizer.__call__` for details.  `What are"
" input IDs? <../glossary.html#input-ids>`__"
msgstr ""

#: of transformers.ConvBertForMaskedLM.forward:8
#: transformers.ConvBertForMultipleChoice.forward:8
#: transformers.ConvBertForQuestionAnswering.forward:8
#: transformers.ConvBertForSequenceClassification.forward:8
#: transformers.ConvBertForTokenClassification.forward:8
#: transformers.ConvBertModel.forward:8
#: transformers.TFConvBertForMaskedLM.call:8
#: transformers.TFConvBertForMultipleChoice.call:8
#: transformers.TFConvBertForQuestionAnswering.call:8
#: transformers.TFConvBertForSequenceClassification.call:8
#: transformers.TFConvBertForTokenClassification.call:8
#: transformers.TFConvBertModel.call:8
msgid "Indices of input sequence tokens in the vocabulary."
msgstr ""

#: of transformers.ConvBertForMaskedLM.forward:10
#: transformers.ConvBertForMultipleChoice.forward:10
#: transformers.ConvBertForQuestionAnswering.forward:10
#: transformers.ConvBertForSequenceClassification.forward:10
#: transformers.ConvBertForTokenClassification.forward:10
#: transformers.ConvBertModel.forward:10
msgid ""
"Indices can be obtained using :class:`transformers.ConvBertTokenizer`. "
"See :func:`transformers.PreTrainedTokenizer.encode` and "
":func:`transformers.PreTrainedTokenizer.__call__` for details."
msgstr ""

#: of transformers.ConvBertForMaskedLM.forward:14
#: transformers.ConvBertForMultipleChoice.forward:14
#: transformers.ConvBertForQuestionAnswering.forward:14
#: transformers.ConvBertForSequenceClassification.forward:14
#: transformers.ConvBertForTokenClassification.forward:14
#: transformers.ConvBertModel.forward:14
#: transformers.TFConvBertForMaskedLM.call:14
#: transformers.TFConvBertForMultipleChoice.call:14
#: transformers.TFConvBertForQuestionAnswering.call:14
#: transformers.TFConvBertForSequenceClassification.call:14
#: transformers.TFConvBertForTokenClassification.call:14
#: transformers.TFConvBertModel.call:14
msgid "`What are input IDs? <../glossary.html#input-ids>`__"
msgstr ""

#: of transformers.ConvBertForMaskedLM.forward:16
#: transformers.ConvBertForMultipleChoice.forward:16
#: transformers.ConvBertForQuestionAnswering.forward:16
#: transformers.ConvBertForSequenceClassification.forward:16
#: transformers.ConvBertForTokenClassification.forward:16
#: transformers.ConvBertModel.forward:16
msgid ""
"Mask to avoid performing attention on padding token indices. Mask values "
"selected in ``[0, 1]``:   - 1 for tokens that are **not masked**, - 0 for"
" tokens that are **masked**.  `What are attention masks? "
"<../glossary.html#attention-mask>`__"
msgstr ""

#: of transformers.ConvBertForMaskedLM.forward:16
#: transformers.ConvBertForMultipleChoice.forward:16
#: transformers.ConvBertForQuestionAnswering.forward:16
#: transformers.ConvBertForSequenceClassification.forward:16
#: transformers.ConvBertForTokenClassification.forward:16
#: transformers.ConvBertModel.forward:16
#: transformers.TFConvBertForMaskedLM.call:16
#: transformers.TFConvBertForMultipleChoice.call:16
#: transformers.TFConvBertForQuestionAnswering.call:16
#: transformers.TFConvBertForSequenceClassification.call:16
#: transformers.TFConvBertForTokenClassification.call:16
#: transformers.TFConvBertModel.call:16
msgid ""
"Mask to avoid performing attention on padding token indices. Mask values "
"selected in ``[0, 1]``:"
msgstr ""

#: of transformers.ConvBertForMaskedLM.forward:19
#: transformers.ConvBertForMultipleChoice.forward:19
#: transformers.ConvBertForQuestionAnswering.forward:19
#: transformers.ConvBertForSequenceClassification.forward:19
#: transformers.ConvBertForTokenClassification.forward:19
#: transformers.ConvBertModel.forward:19
#: transformers.TFConvBertForMaskedLM.call:18
#: transformers.TFConvBertForMultipleChoice.call:18
#: transformers.TFConvBertForQuestionAnswering.call:18
#: transformers.TFConvBertForSequenceClassification.call:18
#: transformers.TFConvBertForTokenClassification.call:18
#: transformers.TFConvBertModel.call:18
msgid "1 for tokens that are **not masked**,"
msgstr ""

#: of transformers.ConvBertForMaskedLM.forward:20
#: transformers.ConvBertForMultipleChoice.forward:20
#: transformers.ConvBertForQuestionAnswering.forward:20
#: transformers.ConvBertForSequenceClassification.forward:20
#: transformers.ConvBertForTokenClassification.forward:20
#: transformers.ConvBertModel.forward:20
#: transformers.TFConvBertForMaskedLM.call:19
#: transformers.TFConvBertForMultipleChoice.call:19
#: transformers.TFConvBertForQuestionAnswering.call:19
#: transformers.TFConvBertForSequenceClassification.call:19
#: transformers.TFConvBertForTokenClassification.call:19
#: transformers.TFConvBertModel.call:19
msgid "0 for tokens that are **masked**."
msgstr ""

#: of transformers.ConvBertForMaskedLM.forward:22
#: transformers.ConvBertForMultipleChoice.forward:22
#: transformers.ConvBertForQuestionAnswering.forward:22
#: transformers.ConvBertForSequenceClassification.forward:22
#: transformers.ConvBertForTokenClassification.forward:22
#: transformers.ConvBertModel.forward:22
#: transformers.TFConvBertForMaskedLM.call:21
#: transformers.TFConvBertForMultipleChoice.call:21
#: transformers.TFConvBertForQuestionAnswering.call:21
#: transformers.TFConvBertForSequenceClassification.call:21
#: transformers.TFConvBertForTokenClassification.call:21
#: transformers.TFConvBertModel.call:21
msgid "`What are attention masks? <../glossary.html#attention-mask>`__"
msgstr ""

#: of transformers.ConvBertForMaskedLM.forward:24
#: transformers.ConvBertForMultipleChoice.forward:24
#: transformers.ConvBertForQuestionAnswering.forward:24
#: transformers.ConvBertForSequenceClassification.forward:24
#: transformers.ConvBertForTokenClassification.forward:24
#: transformers.ConvBertModel.forward:24
msgid ""
"Segment token indices to indicate first and second portions of the "
"inputs. Indices are selected in ``[0, 1]``:   - 0 corresponds to a "
"`sentence A` token, - 1 corresponds to a `sentence B` token.  `What are "
"token type IDs? <../glossary.html#token-type-ids>`_"
msgstr ""

#: of transformers.ConvBertForMaskedLM.forward:24
#: transformers.ConvBertForMultipleChoice.forward:24
#: transformers.ConvBertForQuestionAnswering.forward:24
#: transformers.ConvBertForSequenceClassification.forward:24
#: transformers.ConvBertForTokenClassification.forward:24
#: transformers.ConvBertModel.forward:24
#: transformers.TFConvBertForMaskedLM.call:23
#: transformers.TFConvBertForMultipleChoice.call:23
#: transformers.TFConvBertForQuestionAnswering.call:23
#: transformers.TFConvBertForSequenceClassification.call:23
#: transformers.TFConvBertForTokenClassification.call:23
#: transformers.TFConvBertModel.call:23
msgid ""
"Segment token indices to indicate first and second portions of the "
"inputs. Indices are selected in ``[0, 1]``:"
msgstr ""

#: of transformers.ConvBertForMaskedLM.forward:28
#: transformers.ConvBertForMultipleChoice.forward:28
#: transformers.ConvBertForQuestionAnswering.forward:28
#: transformers.ConvBertForSequenceClassification.forward:28
#: transformers.ConvBertForTokenClassification.forward:28
#: transformers.ConvBertModel.forward:28
#: transformers.TFConvBertForMaskedLM.call:26
#: transformers.TFConvBertForMultipleChoice.call:26
#: transformers.TFConvBertForQuestionAnswering.call:26
#: transformers.TFConvBertForSequenceClassification.call:26
#: transformers.TFConvBertForTokenClassification.call:26
#: transformers.TFConvBertModel.call:26
msgid "0 corresponds to a `sentence A` token,"
msgstr ""

#: of transformers.ConvBertForMaskedLM.forward:29
#: transformers.ConvBertForMultipleChoice.forward:29
#: transformers.ConvBertForQuestionAnswering.forward:29
#: transformers.ConvBertForSequenceClassification.forward:29
#: transformers.ConvBertForTokenClassification.forward:29
#: transformers.ConvBertModel.forward:29
#: transformers.TFConvBertForMaskedLM.call:27
#: transformers.TFConvBertForMultipleChoice.call:27
#: transformers.TFConvBertForQuestionAnswering.call:27
#: transformers.TFConvBertForSequenceClassification.call:27
#: transformers.TFConvBertForTokenClassification.call:27
#: transformers.TFConvBertModel.call:27
msgid "1 corresponds to a `sentence B` token."
msgstr ""

#: of transformers.ConvBertForMaskedLM.forward:31
#: transformers.ConvBertForMultipleChoice.forward:31
#: transformers.ConvBertForQuestionAnswering.forward:31
#: transformers.ConvBertForSequenceClassification.forward:31
#: transformers.ConvBertForTokenClassification.forward:31
#: transformers.ConvBertModel.forward:31
msgid "`What are token type IDs? <../glossary.html#token-type-ids>`_"
msgstr ""

#: of transformers.ConvBertForMaskedLM.forward:33
#: transformers.ConvBertForMultipleChoice.forward:33
#: transformers.ConvBertForQuestionAnswering.forward:33
#: transformers.ConvBertForSequenceClassification.forward:33
#: transformers.ConvBertForTokenClassification.forward:33
#: transformers.ConvBertModel.forward:33
msgid ""
"Indices of positions of each input sequence tokens in the position "
"embeddings. Selected in the range ``[0, config.max_position_embeddings - "
"1]``.  `What are position IDs? <../glossary.html#position-ids>`_"
msgstr ""

#: of transformers.ConvBertForMaskedLM.forward:33
#: transformers.ConvBertForMultipleChoice.forward:33
#: transformers.ConvBertForQuestionAnswering.forward:33
#: transformers.ConvBertForSequenceClassification.forward:33
#: transformers.ConvBertForTokenClassification.forward:33
#: transformers.ConvBertModel.forward:33
#: transformers.TFConvBertForMaskedLM.call:31
#: transformers.TFConvBertForMultipleChoice.call:31
#: transformers.TFConvBertForQuestionAnswering.call:31
#: transformers.TFConvBertForSequenceClassification.call:31
#: transformers.TFConvBertForTokenClassification.call:31
#: transformers.TFConvBertModel.call:31
msgid ""
"Indices of positions of each input sequence tokens in the position "
"embeddings. Selected in the range ``[0, config.max_position_embeddings - "
"1]``."
msgstr ""

#: of transformers.ConvBertForMaskedLM.forward:36
#: transformers.ConvBertForMultipleChoice.forward:36
#: transformers.ConvBertForQuestionAnswering.forward:36
#: transformers.ConvBertForSequenceClassification.forward:36
#: transformers.ConvBertForTokenClassification.forward:36
#: transformers.ConvBertModel.forward:36
msgid "`What are position IDs? <../glossary.html#position-ids>`_"
msgstr ""

#: of transformers.ConvBertForMaskedLM.forward:38
#: transformers.ConvBertForMultipleChoice.forward:38
#: transformers.ConvBertForQuestionAnswering.forward:38
#: transformers.ConvBertForSequenceClassification.forward:38
#: transformers.ConvBertForTokenClassification.forward:38
#: transformers.ConvBertModel.forward:38
msgid ""
"Mask to nullify selected heads of the self-attention modules. Mask values"
" selected in ``[0, 1]``:   - 1 indicates the head is **not masked**, - 0 "
"indicates the head is **masked**."
msgstr ""

#: of transformers.ConvBertForMaskedLM.forward:38
#: transformers.ConvBertForMultipleChoice.forward:38
#: transformers.ConvBertForQuestionAnswering.forward:38
#: transformers.ConvBertForSequenceClassification.forward:38
#: transformers.ConvBertForTokenClassification.forward:38
#: transformers.ConvBertModel.forward:38
#: transformers.TFConvBertForMaskedLM.call:36
#: transformers.TFConvBertForMultipleChoice.call:36
#: transformers.TFConvBertForQuestionAnswering.call:36
#: transformers.TFConvBertForSequenceClassification.call:36
#: transformers.TFConvBertForTokenClassification.call:36
#: transformers.TFConvBertModel.call:36
msgid ""
"Mask to nullify selected heads of the self-attention modules. Mask values"
" selected in ``[0, 1]``:"
msgstr ""

#: of transformers.ConvBertForMaskedLM.forward:41
#: transformers.ConvBertForMultipleChoice.forward:41
#: transformers.ConvBertForQuestionAnswering.forward:41
#: transformers.ConvBertForSequenceClassification.forward:41
#: transformers.ConvBertForTokenClassification.forward:41
#: transformers.ConvBertModel.forward:41
#: transformers.TFConvBertForMaskedLM.call:38
#: transformers.TFConvBertForMultipleChoice.call:38
#: transformers.TFConvBertForQuestionAnswering.call:38
#: transformers.TFConvBertForSequenceClassification.call:38
#: transformers.TFConvBertForTokenClassification.call:38
#: transformers.TFConvBertModel.call:38
msgid "1 indicates the head is **not masked**,"
msgstr ""

#: of transformers.ConvBertForMaskedLM.forward:42
#: transformers.ConvBertForMultipleChoice.forward:42
#: transformers.ConvBertForQuestionAnswering.forward:42
#: transformers.ConvBertForSequenceClassification.forward:42
#: transformers.ConvBertForTokenClassification.forward:42
#: transformers.ConvBertModel.forward:42
#: transformers.TFConvBertForMaskedLM.call:39
#: transformers.TFConvBertForMultipleChoice.call:39
#: transformers.TFConvBertForQuestionAnswering.call:39
#: transformers.TFConvBertForSequenceClassification.call:39
#: transformers.TFConvBertForTokenClassification.call:39
#: transformers.TFConvBertModel.call:39
msgid "0 indicates the head is **masked**."
msgstr ""

#: of transformers.ConvBertForMaskedLM.forward:44
#: transformers.ConvBertForMultipleChoice.forward:44
#: transformers.ConvBertForQuestionAnswering.forward:44
#: transformers.ConvBertForSequenceClassification.forward:44
#: transformers.ConvBertForTokenClassification.forward:44
#: transformers.ConvBertModel.forward:44
msgid ""
"Optionally, instead of passing :obj:`input_ids` you can choose to "
"directly pass an embedded representation. This is useful if you want more"
" control over how to convert `input_ids` indices into associated vectors "
"than the model's internal embedding lookup matrix."
msgstr ""

#: of transformers.ConvBertForMaskedLM.forward:48
#: transformers.ConvBertForMultipleChoice.forward:48
#: transformers.ConvBertForQuestionAnswering.forward:48
#: transformers.ConvBertForSequenceClassification.forward:48
#: transformers.ConvBertForTokenClassification.forward:48
#: transformers.ConvBertModel.forward:48
msgid ""
"Whether or not to return the attentions tensors of all attention layers. "
"See ``attentions`` under returned tensors for more detail."
msgstr ""

#: of transformers.ConvBertForMaskedLM.forward:51
#: transformers.ConvBertForMultipleChoice.forward:51
#: transformers.ConvBertForQuestionAnswering.forward:51
#: transformers.ConvBertForSequenceClassification.forward:51
#: transformers.ConvBertForTokenClassification.forward:51
#: transformers.ConvBertModel.forward:51
msgid ""
"Whether or not to return the hidden states of all layers. See "
"``hidden_states`` under returned tensors for more detail."
msgstr ""

#: of transformers.ConvBertForMaskedLM.forward:54
#: transformers.ConvBertForMultipleChoice.forward:54
#: transformers.ConvBertForQuestionAnswering.forward:54
#: transformers.ConvBertForSequenceClassification.forward:54
#: transformers.ConvBertForTokenClassification.forward:54
#: transformers.ConvBertModel.forward:54
msgid ""
"Whether or not to return a :class:`~transformers.file_utils.ModelOutput` "
"instead of a plain tuple."
msgstr ""

#: of transformers.ConvBertModel.forward:57
msgid ""
"A "
":class:`~transformers.modeling_outputs.BaseModelOutputWithCrossAttentions`"
" or a tuple of :obj:`torch.FloatTensor` (if ``return_dict=False`` is "
"passed or when ``config.return_dict=False``) comprising various elements "
"depending on the configuration (:class:`~transformers.ConvBertConfig`) "
"and inputs.  - **last_hidden_state** (:obj:`torch.FloatTensor` of shape "
":obj:`(batch_size, sequence_length, hidden_size)`) -- Sequence of hidden-"
"states at the output of the last layer of the model. - **hidden_states** "
"(:obj:`tuple(torch.FloatTensor)`, `optional`, returned when "
"``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of "
":obj:`torch.FloatTensor` (one for the output of the embeddings + one for "
"the output of each layer)   of shape :obj:`(batch_size, sequence_length, "
"hidden_size)`.    Hidden-states of the model at the output of each layer "
"plus the initial embedding outputs. - **attentions** "
"(:obj:`tuple(torch.FloatTensor)`, `optional`, returned when "
"``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`torch.FloatTensor` "
"(one for each layer) of shape :obj:`(batch_size, num_heads,   "
"sequence_length, sequence_length)`.    Attentions weights after the "
"attention softmax, used to compute the weighted average in the self-"
"attention   heads. - **cross_attentions** "
"(:obj:`tuple(torch.FloatTensor)`, `optional`, returned when "
"``output_attentions=True`` and ``config.add_cross_attention=True`` is "
"passed or when ``config.output_attentions=True``) -- Tuple of "
":obj:`torch.FloatTensor` (one for each layer) of shape :obj:`(batch_size,"
" num_heads,   sequence_length, sequence_length)`.    Attentions weights "
"of the decoder's cross-attention layer, after the attention softmax, used"
" to compute the   weighted average in the cross-attention heads."
msgstr ""

#: of transformers.ConvBertModel.forward:57
msgid ""
"A "
":class:`~transformers.modeling_outputs.BaseModelOutputWithCrossAttentions`"
" or a tuple of :obj:`torch.FloatTensor` (if ``return_dict=False`` is "
"passed or when ``config.return_dict=False``) comprising various elements "
"depending on the configuration (:class:`~transformers.ConvBertConfig`) "
"and inputs."
msgstr ""

#: of transformers.ConvBertModel.forward:61
msgid ""
"**last_hidden_state** (:obj:`torch.FloatTensor` of shape "
":obj:`(batch_size, sequence_length, hidden_size)`) -- Sequence of hidden-"
"states at the output of the last layer of the model."
msgstr ""

#: of transformers.ConvBertForMaskedLM.forward:67
#: transformers.ConvBertForMultipleChoice.forward:69
#: transformers.ConvBertForQuestionAnswering.forward:72
#: transformers.ConvBertForSequenceClassification.forward:67
#: transformers.ConvBertForTokenClassification.forward:66
#: transformers.ConvBertModel.forward:62
msgid ""
"**hidden_states** (:obj:`tuple(torch.FloatTensor)`, `optional`, returned "
"when ``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of "
":obj:`torch.FloatTensor` (one for the output of the embeddings + one for "
"the output of each layer) of shape :obj:`(batch_size, sequence_length, "
"hidden_size)`."
msgstr ""

#: of transformers.ConvBertForMaskedLM.forward:70
#: transformers.ConvBertForMultipleChoice.forward:72
#: transformers.ConvBertForQuestionAnswering.forward:75
#: transformers.ConvBertForSequenceClassification.forward:70
#: transformers.ConvBertForTokenClassification.forward:69
#: transformers.ConvBertModel.forward:65
#: transformers.TFConvBertForMaskedLM.call:73
#: transformers.TFConvBertForMultipleChoice.call:75
#: transformers.TFConvBertForQuestionAnswering.call:78
#: transformers.TFConvBertForSequenceClassification.call:73
#: transformers.TFConvBertForTokenClassification.call:72
#: transformers.TFConvBertModel.call:68
msgid ""
"Hidden-states of the model at the output of each layer plus the initial "
"embedding outputs."
msgstr ""

#: of transformers.ConvBertForMaskedLM.forward:71
#: transformers.ConvBertForMultipleChoice.forward:73
#: transformers.ConvBertForQuestionAnswering.forward:76
#: transformers.ConvBertForSequenceClassification.forward:71
#: transformers.ConvBertForTokenClassification.forward:70
#: transformers.ConvBertModel.forward:66
msgid ""
"**attentions** (:obj:`tuple(torch.FloatTensor)`, `optional`, returned "
"when ``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`torch.FloatTensor` "
"(one for each layer) of shape :obj:`(batch_size, num_heads, "
"sequence_length, sequence_length)`."
msgstr ""

#: of transformers.ConvBertForMaskedLM.forward:74
#: transformers.ConvBertForMultipleChoice.forward:76
#: transformers.ConvBertForQuestionAnswering.forward:79
#: transformers.ConvBertForSequenceClassification.forward:74
#: transformers.ConvBertForTokenClassification.forward:73
#: transformers.ConvBertModel.forward:69
#: transformers.TFConvBertForMaskedLM.call:77
#: transformers.TFConvBertForMultipleChoice.call:79
#: transformers.TFConvBertForQuestionAnswering.call:82
#: transformers.TFConvBertForSequenceClassification.call:77
#: transformers.TFConvBertForTokenClassification.call:76
#: transformers.TFConvBertModel.call:72
msgid ""
"Attentions weights after the attention softmax, used to compute the "
"weighted average in the self-attention heads."
msgstr ""

#: of transformers.ConvBertModel.forward:71
msgid ""
"**cross_attentions** (:obj:`tuple(torch.FloatTensor)`, `optional`, "
"returned when ``output_attentions=True`` and "
"``config.add_cross_attention=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`torch.FloatTensor` "
"(one for each layer) of shape :obj:`(batch_size, num_heads, "
"sequence_length, sequence_length)`."
msgstr ""

#: of transformers.ConvBertModel.forward:74
msgid ""
"Attentions weights of the decoder's cross-attention layer, after the "
"attention softmax, used to compute the weighted average in the cross-"
"attention heads."
msgstr ""

#: of transformers.ConvBertModel.forward:76
msgid ""
":class:`~transformers.modeling_outputs.BaseModelOutputWithCrossAttentions`"
" or :obj:`tuple(torch.FloatTensor)`"
msgstr ""

#: ../../source/model_doc/convbert.rst:72
msgid "ConvBertForMaskedLM"
msgstr ""

#: of transformers.ConvBertForMaskedLM:1
msgid ""
"ConvBERT Model with a `language modeling` head on top. This model is a "
"PyTorch `torch.nn.Module "
"<https://pytorch.org/docs/stable/nn.html#torch.nn.Module>`_ sub-class. "
"Use it as a regular PyTorch Module and refer to the PyTorch documentation"
" for all matter related to general usage and behavior."
msgstr ""

#: of transformers.ConvBertForMaskedLM.forward:1
msgid ""
"The :class:`~transformers.ConvBertForMaskedLM` forward method, overrides "
"the :func:`__call__` special method."
msgstr ""

#: of transformers.ConvBertForMaskedLM.forward:56
#: transformers.TFConvBertForMaskedLM.call:59
msgid ""
"Labels for computing the masked language modeling loss. Indices should be"
" in ``[-100, 0, ..., config.vocab_size]`` (see ``input_ids`` docstring) "
"Tokens with indices set to ``-100`` are ignored (masked), the loss is "
"only computed for the tokens with labels in ``[0, ..., "
"config.vocab_size]``"
msgstr ""

#: of transformers.ConvBertForMaskedLM.forward:61
msgid ""
"A :class:`~transformers.modeling_outputs.MaskedLMOutput` or a tuple of "
":obj:`torch.FloatTensor` (if ``return_dict=False`` is passed or when "
"``config.return_dict=False``) comprising various elements depending on "
"the configuration (:class:`~transformers.ConvBertConfig`) and inputs.  - "
"**loss** (:obj:`torch.FloatTensor` of shape :obj:`(1,)`, `optional`, "
"returned when :obj:`labels` is provided) -- Masked language modeling "
"(MLM) loss. - **logits** (:obj:`torch.FloatTensor` of shape "
":obj:`(batch_size, sequence_length, config.vocab_size)`) -- Prediction "
"scores of the language modeling head (scores for each vocabulary token "
"before SoftMax). - **hidden_states** (:obj:`tuple(torch.FloatTensor)`, "
"`optional`, returned when ``output_hidden_states=True`` is passed or when"
" ``config.output_hidden_states=True``) -- Tuple of "
":obj:`torch.FloatTensor` (one for the output of the embeddings + one for "
"the output of each layer)   of shape :obj:`(batch_size, sequence_length, "
"hidden_size)`.    Hidden-states of the model at the output of each layer "
"plus the initial embedding outputs. - **attentions** "
"(:obj:`tuple(torch.FloatTensor)`, `optional`, returned when "
"``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`torch.FloatTensor` "
"(one for each layer) of shape :obj:`(batch_size, num_heads,   "
"sequence_length, sequence_length)`.    Attentions weights after the "
"attention softmax, used to compute the weighted average in the self-"
"attention   heads."
msgstr ""

#: of transformers.ConvBertForMaskedLM.forward:61
msgid ""
"A :class:`~transformers.modeling_outputs.MaskedLMOutput` or a tuple of "
":obj:`torch.FloatTensor` (if ``return_dict=False`` is passed or when "
"``config.return_dict=False``) comprising various elements depending on "
"the configuration (:class:`~transformers.ConvBertConfig`) and inputs."
msgstr ""

#: of transformers.ConvBertForMaskedLM.forward:65
msgid ""
"**loss** (:obj:`torch.FloatTensor` of shape :obj:`(1,)`, `optional`, "
"returned when :obj:`labels` is provided) -- Masked language modeling "
"(MLM) loss."
msgstr ""

#: of transformers.ConvBertForMaskedLM.forward:66
msgid ""
"**logits** (:obj:`torch.FloatTensor` of shape :obj:`(batch_size, "
"sequence_length, config.vocab_size)`) -- Prediction scores of the "
"language modeling head (scores for each vocabulary token before SoftMax)."
msgstr ""

#: of transformers.ConvBertForMaskedLM.forward:76
msgid ""
":class:`~transformers.modeling_outputs.MaskedLMOutput` or "
":obj:`tuple(torch.FloatTensor)`"
msgstr ""

#: ../../source/model_doc/convbert.rst:79
msgid "ConvBertForSequenceClassification"
msgstr ""

#: of transformers.ConvBertForSequenceClassification:1
msgid ""
"ConvBERT Model transformer with a sequence classification/regression head"
" on top (a linear layer on top of the pooled output) e.g. for GLUE tasks."
msgstr ""

#: of transformers.ConvBertForMultipleChoice:4
#: transformers.ConvBertForQuestionAnswering:4
#: transformers.ConvBertForSequenceClassification:4
#: transformers.ConvBertForTokenClassification:4
msgid ""
"This model is a PyTorch `torch.nn.Module "
"<https://pytorch.org/docs/stable/nn.html#torch.nn.Module>`_ sub-class. "
"Use it as a regular PyTorch Module and refer to the PyTorch documentation"
" for all matter related to general usage and behavior."
msgstr ""

#: of transformers.ConvBertForSequenceClassification.forward:1
msgid ""
"The :class:`~transformers.ConvBertForSequenceClassification` forward "
"method, overrides the :func:`__call__` special method."
msgstr ""

#: of transformers.ConvBertForSequenceClassification.forward:56
#: transformers.TFConvBertForSequenceClassification.call:59
msgid ""
"Labels for computing the sequence classification/regression loss. Indices"
" should be in :obj:`[0, ..., config.num_labels - 1]`. If "
":obj:`config.num_labels == 1` a regression loss is computed (Mean-Square "
"loss), If :obj:`config.num_labels > 1` a classification loss is computed "
"(Cross-Entropy)."
msgstr ""

#: of transformers.ConvBertForSequenceClassification.forward:61
msgid ""
"A :class:`~transformers.modeling_outputs.SequenceClassifierOutput` or a "
"tuple of :obj:`torch.FloatTensor` (if ``return_dict=False`` is passed or "
"when ``config.return_dict=False``) comprising various elements depending "
"on the configuration (:class:`~transformers.ConvBertConfig`) and inputs."
"  - **loss** (:obj:`torch.FloatTensor` of shape :obj:`(1,)`, `optional`, "
"returned when :obj:`labels` is provided) -- Classification (or regression"
" if config.num_labels==1) loss. - **logits** (:obj:`torch.FloatTensor` of"
" shape :obj:`(batch_size, config.num_labels)`) -- Classification (or "
"regression if config.num_labels==1) scores (before SoftMax). - "
"**hidden_states** (:obj:`tuple(torch.FloatTensor)`, `optional`, returned "
"when ``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of "
":obj:`torch.FloatTensor` (one for the output of the embeddings + one for "
"the output of each layer)   of shape :obj:`(batch_size, sequence_length, "
"hidden_size)`.    Hidden-states of the model at the output of each layer "
"plus the initial embedding outputs. - **attentions** "
"(:obj:`tuple(torch.FloatTensor)`, `optional`, returned when "
"``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`torch.FloatTensor` "
"(one for each layer) of shape :obj:`(batch_size, num_heads,   "
"sequence_length, sequence_length)`.    Attentions weights after the "
"attention softmax, used to compute the weighted average in the self-"
"attention   heads."
msgstr ""

#: of transformers.ConvBertForSequenceClassification.forward:61
msgid ""
"A :class:`~transformers.modeling_outputs.SequenceClassifierOutput` or a "
"tuple of :obj:`torch.FloatTensor` (if ``return_dict=False`` is passed or "
"when ``config.return_dict=False``) comprising various elements depending "
"on the configuration (:class:`~transformers.ConvBertConfig`) and inputs."
msgstr ""

#: of transformers.ConvBertForSequenceClassification.forward:65
msgid ""
"**loss** (:obj:`torch.FloatTensor` of shape :obj:`(1,)`, `optional`, "
"returned when :obj:`labels` is provided) -- Classification (or regression"
" if config.num_labels==1) loss."
msgstr ""

#: of transformers.ConvBertForSequenceClassification.forward:66
msgid ""
"**logits** (:obj:`torch.FloatTensor` of shape :obj:`(batch_size, "
"config.num_labels)`) -- Classification (or regression if "
"config.num_labels==1) scores (before SoftMax)."
msgstr ""

#: of transformers.ConvBertForSequenceClassification.forward:76
msgid ""
":class:`~transformers.modeling_outputs.SequenceClassifierOutput` or "
":obj:`tuple(torch.FloatTensor)`"
msgstr ""

#: ../../source/model_doc/convbert.rst:86
msgid "ConvBertForMultipleChoice"
msgstr ""

#: of transformers.ConvBertForMultipleChoice:1
#: transformers.TFConvBertForMultipleChoice:1
msgid ""
"ConvBERT Model with a multiple choice classification head on top (a "
"linear layer on top of the pooled output and a softmax) e.g. for "
"RocStories/SWAG tasks."
msgstr ""

#: of transformers.ConvBertForMultipleChoice.forward:1
msgid ""
"The :class:`~transformers.ConvBertForMultipleChoice` forward method, "
"overrides the :func:`__call__` special method."
msgstr ""

#: of transformers.ConvBertForMultipleChoice.forward:56
msgid ""
"Labels for computing the multiple choice classification loss. Indices "
"should be in ``[0, ..., num_choices-1]`` where :obj:`num_choices` is the "
"size of the second dimension of the input tensors. (See :obj:`input_ids` "
"above)"
msgstr ""

#: of transformers.ConvBertForMultipleChoice.forward:61
msgid ""
"A :class:`~transformers.modeling_outputs.MultipleChoiceModelOutput` or a "
"tuple of :obj:`torch.FloatTensor` (if ``return_dict=False`` is passed or "
"when ``config.return_dict=False``) comprising various elements depending "
"on the configuration (:class:`~transformers.ConvBertConfig`) and inputs."
"  - **loss** (:obj:`torch.FloatTensor` of shape `(1,)`, `optional`, "
"returned when :obj:`labels` is provided) -- Classification loss. - "
"**logits** (:obj:`torch.FloatTensor` of shape :obj:`(batch_size, "
"num_choices)`) -- `num_choices` is the second dimension of the input "
"tensors. (see `input_ids` above).    Classification scores (before "
"SoftMax). - **hidden_states** (:obj:`tuple(torch.FloatTensor)`, "
"`optional`, returned when ``output_hidden_states=True`` is passed or when"
" ``config.output_hidden_states=True``) -- Tuple of "
":obj:`torch.FloatTensor` (one for the output of the embeddings + one for "
"the output of each layer)   of shape :obj:`(batch_size, sequence_length, "
"hidden_size)`.    Hidden-states of the model at the output of each layer "
"plus the initial embedding outputs. - **attentions** "
"(:obj:`tuple(torch.FloatTensor)`, `optional`, returned when "
"``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`torch.FloatTensor` "
"(one for each layer) of shape :obj:`(batch_size, num_heads,   "
"sequence_length, sequence_length)`.    Attentions weights after the "
"attention softmax, used to compute the weighted average in the self-"
"attention   heads."
msgstr ""

#: of transformers.ConvBertForMultipleChoice.forward:61
msgid ""
"A :class:`~transformers.modeling_outputs.MultipleChoiceModelOutput` or a "
"tuple of :obj:`torch.FloatTensor` (if ``return_dict=False`` is passed or "
"when ``config.return_dict=False``) comprising various elements depending "
"on the configuration (:class:`~transformers.ConvBertConfig`) and inputs."
msgstr ""

#: of transformers.ConvBertForMultipleChoice.forward:65
msgid ""
"**loss** (:obj:`torch.FloatTensor` of shape `(1,)`, `optional`, returned "
"when :obj:`labels` is provided) -- Classification loss."
msgstr ""

#: of transformers.ConvBertForMultipleChoice.forward:66
msgid ""
"**logits** (:obj:`torch.FloatTensor` of shape :obj:`(batch_size, "
"num_choices)`) -- `num_choices` is the second dimension of the input "
"tensors. (see `input_ids` above)."
msgstr ""

#: of transformers.ConvBertForMultipleChoice.forward:68
#: transformers.TFConvBertForMultipleChoice.call:71
msgid "Classification scores (before SoftMax)."
msgstr ""

#: of transformers.ConvBertForMultipleChoice.forward:78
msgid ""
":class:`~transformers.modeling_outputs.MultipleChoiceModelOutput` or "
":obj:`tuple(torch.FloatTensor)`"
msgstr ""

#: ../../source/model_doc/convbert.rst:93
msgid "ConvBertForTokenClassification"
msgstr ""

#: of transformers.ConvBertForTokenClassification:1
#: transformers.TFConvBertForTokenClassification:1
msgid ""
"ConvBERT Model with a token classification head on top (a linear layer on"
" top of the hidden-states output) e.g. for Named-Entity-Recognition (NER)"
" tasks."
msgstr ""

#: of transformers.ConvBertForTokenClassification.forward:1
msgid ""
"The :class:`~transformers.ConvBertForTokenClassification` forward method,"
" overrides the :func:`__call__` special method."
msgstr ""

#: of transformers.ConvBertForTokenClassification.forward:56
#: transformers.TFConvBertForTokenClassification.call:59
msgid ""
"Labels for computing the token classification loss. Indices should be in "
"``[0, ..., config.num_labels - 1]``."
msgstr ""

#: of transformers.ConvBertForTokenClassification.forward:60
msgid ""
"A :class:`~transformers.modeling_outputs.TokenClassifierOutput` or a "
"tuple of :obj:`torch.FloatTensor` (if ``return_dict=False`` is passed or "
"when ``config.return_dict=False``) comprising various elements depending "
"on the configuration (:class:`~transformers.ConvBertConfig`) and inputs."
"  - **loss** (:obj:`torch.FloatTensor` of shape :obj:`(1,)`, `optional`, "
"returned when ``labels`` is provided)  -- Classification loss. - "
"**logits** (:obj:`torch.FloatTensor` of shape :obj:`(batch_size, "
"sequence_length, config.num_labels)`) -- Classification scores (before "
"SoftMax). - **hidden_states** (:obj:`tuple(torch.FloatTensor)`, "
"`optional`, returned when ``output_hidden_states=True`` is passed or when"
" ``config.output_hidden_states=True``) -- Tuple of "
":obj:`torch.FloatTensor` (one for the output of the embeddings + one for "
"the output of each layer)   of shape :obj:`(batch_size, sequence_length, "
"hidden_size)`.    Hidden-states of the model at the output of each layer "
"plus the initial embedding outputs. - **attentions** "
"(:obj:`tuple(torch.FloatTensor)`, `optional`, returned when "
"``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`torch.FloatTensor` "
"(one for each layer) of shape :obj:`(batch_size, num_heads,   "
"sequence_length, sequence_length)`.    Attentions weights after the "
"attention softmax, used to compute the weighted average in the self-"
"attention   heads."
msgstr ""

#: of transformers.ConvBertForTokenClassification.forward:60
msgid ""
"A :class:`~transformers.modeling_outputs.TokenClassifierOutput` or a "
"tuple of :obj:`torch.FloatTensor` (if ``return_dict=False`` is passed or "
"when ``config.return_dict=False``) comprising various elements depending "
"on the configuration (:class:`~transformers.ConvBertConfig`) and inputs."
msgstr ""

#: of transformers.ConvBertForTokenClassification.forward:64
msgid ""
"**loss** (:obj:`torch.FloatTensor` of shape :obj:`(1,)`, `optional`, "
"returned when ``labels`` is provided)  -- Classification loss."
msgstr ""

#: of transformers.ConvBertForTokenClassification.forward:65
msgid ""
"**logits** (:obj:`torch.FloatTensor` of shape :obj:`(batch_size, "
"sequence_length, config.num_labels)`) -- Classification scores (before "
"SoftMax)."
msgstr ""

#: of transformers.ConvBertForTokenClassification.forward:75
msgid ""
":class:`~transformers.modeling_outputs.TokenClassifierOutput` or "
":obj:`tuple(torch.FloatTensor)`"
msgstr ""

#: ../../source/model_doc/convbert.rst:100
msgid "ConvBertForQuestionAnswering"
msgstr ""

#: of transformers.ConvBertForQuestionAnswering:1
msgid ""
"ConvBERT Model with a span classification head on top for extractive "
"question-answering tasks like SQuAD (a linear layers on top of the "
"hidden-states output to compute `span start logits` and `span end "
"logits`)."
msgstr ""

#: of transformers.ConvBertForQuestionAnswering.forward:1
msgid ""
"The :class:`~transformers.ConvBertForQuestionAnswering` forward method, "
"overrides the :func:`__call__` special method."
msgstr ""

#: of transformers.ConvBertForQuestionAnswering.forward:56
#: transformers.TFConvBertForQuestionAnswering.call:59
msgid ""
"Labels for position (index) of the start of the labelled span for "
"computing the token classification loss. Positions are clamped to the "
"length of the sequence (:obj:`sequence_length`). Position outside of the "
"sequence are not taken into account for computing the loss."
msgstr ""

#: of transformers.ConvBertForQuestionAnswering.forward:60
#: transformers.TFConvBertForQuestionAnswering.call:63
msgid ""
"Labels for position (index) of the end of the labelled span for computing"
" the token classification loss. Positions are clamped to the length of "
"the sequence (:obj:`sequence_length`). Position outside of the sequence "
"are not taken into account for computing the loss."
msgstr ""

#: of transformers.ConvBertForQuestionAnswering.forward:65
msgid ""
"A :class:`~transformers.modeling_outputs.QuestionAnsweringModelOutput` or"
" a tuple of :obj:`torch.FloatTensor` (if ``return_dict=False`` is passed "
"or when ``config.return_dict=False``) comprising various elements "
"depending on the configuration (:class:`~transformers.ConvBertConfig`) "
"and inputs.  - **loss** (:obj:`torch.FloatTensor` of shape :obj:`(1,)`, "
"`optional`, returned when :obj:`labels` is provided) -- Total span "
"extraction loss is the sum of a Cross-Entropy for the start and end "
"positions. - **start_logits** (:obj:`torch.FloatTensor` of shape "
":obj:`(batch_size, sequence_length)`) -- Span-start scores (before "
"SoftMax). - **end_logits** (:obj:`torch.FloatTensor` of shape "
":obj:`(batch_size, sequence_length)`) -- Span-end scores (before "
"SoftMax). - **hidden_states** (:obj:`tuple(torch.FloatTensor)`, "
"`optional`, returned when ``output_hidden_states=True`` is passed or when"
" ``config.output_hidden_states=True``) -- Tuple of "
":obj:`torch.FloatTensor` (one for the output of the embeddings + one for "
"the output of each layer)   of shape :obj:`(batch_size, sequence_length, "
"hidden_size)`.    Hidden-states of the model at the output of each layer "
"plus the initial embedding outputs. - **attentions** "
"(:obj:`tuple(torch.FloatTensor)`, `optional`, returned when "
"``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`torch.FloatTensor` "
"(one for each layer) of shape :obj:`(batch_size, num_heads,   "
"sequence_length, sequence_length)`.    Attentions weights after the "
"attention softmax, used to compute the weighted average in the self-"
"attention   heads."
msgstr ""

#: of transformers.ConvBertForQuestionAnswering.forward:65
msgid ""
"A :class:`~transformers.modeling_outputs.QuestionAnsweringModelOutput` or"
" a tuple of :obj:`torch.FloatTensor` (if ``return_dict=False`` is passed "
"or when ``config.return_dict=False``) comprising various elements "
"depending on the configuration (:class:`~transformers.ConvBertConfig`) "
"and inputs."
msgstr ""

#: of transformers.ConvBertForQuestionAnswering.forward:69
msgid ""
"**loss** (:obj:`torch.FloatTensor` of shape :obj:`(1,)`, `optional`, "
"returned when :obj:`labels` is provided) -- Total span extraction loss is"
" the sum of a Cross-Entropy for the start and end positions."
msgstr ""

#: of transformers.ConvBertForQuestionAnswering.forward:70
msgid ""
"**start_logits** (:obj:`torch.FloatTensor` of shape :obj:`(batch_size, "
"sequence_length)`) -- Span-start scores (before SoftMax)."
msgstr ""

#: of transformers.ConvBertForQuestionAnswering.forward:71
msgid ""
"**end_logits** (:obj:`torch.FloatTensor` of shape :obj:`(batch_size, "
"sequence_length)`) -- Span-end scores (before SoftMax)."
msgstr ""

#: of transformers.ConvBertForQuestionAnswering.forward:81
msgid ""
":class:`~transformers.modeling_outputs.QuestionAnsweringModelOutput` or "
":obj:`tuple(torch.FloatTensor)`"
msgstr ""

#: ../../source/model_doc/convbert.rst:107
msgid "TFConvBertModel"
msgstr ""

#: of transformers.TFConvBertModel:1
msgid ""
"The bare ConvBERT Model transformer outputting raw hidden-states without "
"any specific head on top."
msgstr ""

#: of transformers.TFConvBertForMaskedLM:3
#: transformers.TFConvBertForMultipleChoice:5
#: transformers.TFConvBertForQuestionAnswering:5
#: transformers.TFConvBertForSequenceClassification:4
#: transformers.TFConvBertForTokenClassification:5
#: transformers.TFConvBertModel:3
msgid ""
"This model inherits from :class:`~transformers.TFPreTrainedModel`. Check "
"the superclass documentation for the generic methods the library "
"implements for all its model (such as downloading or saving, resizing the"
" input embeddings, pruning heads etc.)"
msgstr ""

#: of transformers.TFConvBertForMaskedLM:7
#: transformers.TFConvBertForMultipleChoice:9
#: transformers.TFConvBertForQuestionAnswering:9
#: transformers.TFConvBertForSequenceClassification:8
#: transformers.TFConvBertForTokenClassification:9
#: transformers.TFConvBertModel:7
msgid ""
"This model is also a `tf.keras.Model "
"<https://www.tensorflow.org/api_docs/python/tf/keras/Model>`__ subclass. "
"Use it as a regular TF 2.0 Keras Model and refer to the TF 2.0 "
"documentation for all matter related to general usage and behavior."
msgstr ""

#: of transformers.TFConvBertForMaskedLM:13
#: transformers.TFConvBertForMultipleChoice:15
#: transformers.TFConvBertForQuestionAnswering:15
#: transformers.TFConvBertForSequenceClassification:14
#: transformers.TFConvBertForTokenClassification:15
#: transformers.TFConvBertModel:13
msgid "TF 2.0 models accepts two formats as inputs:"
msgstr ""

#: of transformers.TFConvBertForMaskedLM:15
#: transformers.TFConvBertForMultipleChoice:17
#: transformers.TFConvBertForQuestionAnswering:17
#: transformers.TFConvBertForSequenceClassification:16
#: transformers.TFConvBertForTokenClassification:17
#: transformers.TFConvBertModel:15
msgid "having all inputs as keyword arguments (like PyTorch models), or"
msgstr ""

#: of transformers.TFConvBertForMaskedLM:16
#: transformers.TFConvBertForMultipleChoice:18
#: transformers.TFConvBertForQuestionAnswering:18
#: transformers.TFConvBertForSequenceClassification:17
#: transformers.TFConvBertForTokenClassification:18
#: transformers.TFConvBertModel:16
msgid ""
"having all inputs as a list, tuple or dict in the first positional "
"arguments."
msgstr ""

#: of transformers.TFConvBertForMaskedLM:18
#: transformers.TFConvBertForMultipleChoice:20
#: transformers.TFConvBertForQuestionAnswering:20
#: transformers.TFConvBertForSequenceClassification:19
#: transformers.TFConvBertForTokenClassification:20
#: transformers.TFConvBertModel:18
msgid ""
"This second option is useful when using :meth:`tf.keras.Model.fit` method"
" which currently requires having all the tensors in the first argument of"
" the model call function: :obj:`model(inputs)`."
msgstr ""

#: of transformers.TFConvBertForMaskedLM:21
#: transformers.TFConvBertForMultipleChoice:23
#: transformers.TFConvBertForQuestionAnswering:23
#: transformers.TFConvBertForSequenceClassification:22
#: transformers.TFConvBertForTokenClassification:23
#: transformers.TFConvBertModel:21
msgid ""
"If you choose this second option, there are three possibilities you can "
"use to gather all the input Tensors in the first positional argument :"
msgstr ""

#: of transformers.TFConvBertForMaskedLM:24
#: transformers.TFConvBertForMultipleChoice:26
#: transformers.TFConvBertForQuestionAnswering:26
#: transformers.TFConvBertForSequenceClassification:25
#: transformers.TFConvBertForTokenClassification:26
#: transformers.TFConvBertModel:24
msgid ""
"a single Tensor with :obj:`input_ids` only and nothing else: "
":obj:`model(inputs_ids)`"
msgstr ""

#: of transformers.TFConvBertForMaskedLM:25
#: transformers.TFConvBertForMultipleChoice:27
#: transformers.TFConvBertForQuestionAnswering:27
#: transformers.TFConvBertForSequenceClassification:26
#: transformers.TFConvBertForTokenClassification:27
#: transformers.TFConvBertModel:25
msgid ""
"a list of varying length with one or several input Tensors IN THE ORDER "
"given in the docstring: :obj:`model([input_ids, attention_mask])` or "
":obj:`model([input_ids, attention_mask, token_type_ids])`"
msgstr ""

#: of transformers.TFConvBertForMaskedLM:27
#: transformers.TFConvBertForMultipleChoice:29
#: transformers.TFConvBertForQuestionAnswering:29
#: transformers.TFConvBertForSequenceClassification:28
#: transformers.TFConvBertForTokenClassification:29
#: transformers.TFConvBertModel:27
msgid ""
"a dictionary with one or several input Tensors associated to the input "
"names given in the docstring: :obj:`model({\"input_ids\": input_ids, "
"\"token_type_ids\": token_type_ids})`"
msgstr ""

#: of transformers.TFConvBertModel.call:1
msgid ""
"The :class:`~transformers.TFConvBertModel` forward method, overrides the "
":func:`__call__` special method."
msgstr ""

#: of transformers.TFConvBertForMaskedLM.call:8
#: transformers.TFConvBertForMultipleChoice.call:8
#: transformers.TFConvBertForQuestionAnswering.call:8
#: transformers.TFConvBertForSequenceClassification.call:8
#: transformers.TFConvBertForTokenClassification.call:8
#: transformers.TFConvBertModel.call:8
msgid ""
"Indices of input sequence tokens in the vocabulary.  Indices can be "
"obtained using :class:`~transformers.ConvBertTokenizer`. See "
":func:`transformers.PreTrainedTokenizer.__call__` and "
":func:`transformers.PreTrainedTokenizer.encode` for details.  `What are "
"input IDs? <../glossary.html#input-ids>`__"
msgstr ""

#: of transformers.TFConvBertForMaskedLM.call:10
#: transformers.TFConvBertForMultipleChoice.call:10
#: transformers.TFConvBertForQuestionAnswering.call:10
#: transformers.TFConvBertForSequenceClassification.call:10
#: transformers.TFConvBertForTokenClassification.call:10
#: transformers.TFConvBertModel.call:10
msgid ""
"Indices can be obtained using :class:`~transformers.ConvBertTokenizer`. "
"See :func:`transformers.PreTrainedTokenizer.__call__` and "
":func:`transformers.PreTrainedTokenizer.encode` for details."
msgstr ""

#: of transformers.TFConvBertForMaskedLM.call:16
#: transformers.TFConvBertForMultipleChoice.call:16
#: transformers.TFConvBertForQuestionAnswering.call:16
#: transformers.TFConvBertForSequenceClassification.call:16
#: transformers.TFConvBertForTokenClassification.call:16
#: transformers.TFConvBertModel.call:16
msgid ""
"Mask to avoid performing attention on padding token indices. Mask values "
"selected in ``[0, 1]``:  - 1 for tokens that are **not masked**, - 0 for "
"tokens that are **masked**.  `What are attention masks? <../glossary.html"
"#attention-mask>`__"
msgstr ""

#: of transformers.TFConvBertForMaskedLM.call:23
#: transformers.TFConvBertForMultipleChoice.call:23
#: transformers.TFConvBertForQuestionAnswering.call:23
#: transformers.TFConvBertForSequenceClassification.call:23
#: transformers.TFConvBertForTokenClassification.call:23
#: transformers.TFConvBertModel.call:23
msgid ""
"Segment token indices to indicate first and second portions of the "
"inputs. Indices are selected in ``[0, 1]``:  - 0 corresponds to a "
"`sentence A` token, - 1 corresponds to a `sentence B` token.  `What are "
"token type IDs? <../glossary.html#token-type-ids>`__"
msgstr ""

#: of transformers.TFConvBertForMaskedLM.call:29
#: transformers.TFConvBertForMultipleChoice.call:29
#: transformers.TFConvBertForQuestionAnswering.call:29
#: transformers.TFConvBertForSequenceClassification.call:29
#: transformers.TFConvBertForTokenClassification.call:29
#: transformers.TFConvBertModel.call:29
msgid "`What are token type IDs? <../glossary.html#token-type-ids>`__"
msgstr ""

#: of transformers.TFConvBertForMaskedLM.call:31
#: transformers.TFConvBertForMultipleChoice.call:31
#: transformers.TFConvBertForQuestionAnswering.call:31
#: transformers.TFConvBertForSequenceClassification.call:31
#: transformers.TFConvBertForTokenClassification.call:31
#: transformers.TFConvBertModel.call:31
msgid ""
"Indices of positions of each input sequence tokens in the position "
"embeddings. Selected in the range ``[0, config.max_position_embeddings - "
"1]``.  `What are position IDs? <../glossary.html#position-ids>`__"
msgstr ""

#: of transformers.TFConvBertForMaskedLM.call:34
#: transformers.TFConvBertForMultipleChoice.call:34
#: transformers.TFConvBertForQuestionAnswering.call:34
#: transformers.TFConvBertForSequenceClassification.call:34
#: transformers.TFConvBertForTokenClassification.call:34
#: transformers.TFConvBertModel.call:34
msgid "`What are position IDs? <../glossary.html#position-ids>`__"
msgstr ""

#: of transformers.TFConvBertForMaskedLM.call:36
#: transformers.TFConvBertForMultipleChoice.call:36
#: transformers.TFConvBertForQuestionAnswering.call:36
#: transformers.TFConvBertForSequenceClassification.call:36
#: transformers.TFConvBertForTokenClassification.call:36
#: transformers.TFConvBertModel.call:36
msgid ""
"Mask to nullify selected heads of the self-attention modules. Mask values"
" selected in ``[0, 1]``:  - 1 indicates the head is **not masked**, - 0 "
"indicates the head is **masked**."
msgstr ""

#: of transformers.TFConvBertForMaskedLM.call:41
#: transformers.TFConvBertForMultipleChoice.call:41
#: transformers.TFConvBertForQuestionAnswering.call:41
#: transformers.TFConvBertForSequenceClassification.call:41
#: transformers.TFConvBertForTokenClassification.call:41
#: transformers.TFConvBertModel.call:41
msgid ""
"Optionally, instead of passing :obj:`input_ids` you can choose to "
"directly pass an embedded representation. This is useful if you want more"
" control over how to convert :obj:`input_ids` indices into associated "
"vectors than the model's internal embedding lookup matrix."
msgstr ""

#: of transformers.TFConvBertForMaskedLM.call:45
#: transformers.TFConvBertForMultipleChoice.call:45
#: transformers.TFConvBertForQuestionAnswering.call:45
#: transformers.TFConvBertForSequenceClassification.call:45
#: transformers.TFConvBertForTokenClassification.call:45
#: transformers.TFConvBertModel.call:45
msgid ""
"Whether or not to return the attentions tensors of all attention layers. "
"See ``attentions`` under returned tensors for more detail. This argument "
"can be used only in eager mode, in graph mode the value in the config "
"will be used instead."
msgstr ""

#: of transformers.TFConvBertForMaskedLM.call:49
#: transformers.TFConvBertForMultipleChoice.call:49
#: transformers.TFConvBertForQuestionAnswering.call:49
#: transformers.TFConvBertForSequenceClassification.call:49
#: transformers.TFConvBertForTokenClassification.call:49
#: transformers.TFConvBertModel.call:49
msgid ""
"Whether or not to return the hidden states of all layers. See "
"``hidden_states`` under returned tensors for more detail. This argument "
"can be used only in eager mode, in graph mode the value in the config "
"will be used instead."
msgstr ""

#: of transformers.TFConvBertForMaskedLM.call:53
#: transformers.TFConvBertForMultipleChoice.call:53
#: transformers.TFConvBertForQuestionAnswering.call:53
#: transformers.TFConvBertForSequenceClassification.call:53
#: transformers.TFConvBertForTokenClassification.call:53
#: transformers.TFConvBertModel.call:53
msgid ""
"Whether or not to return a :class:`~transformers.file_utils.ModelOutput` "
"instead of a plain tuple. This argument can be used in eager mode, in "
"graph mode the value will always be set to True."
msgstr ""

#: of transformers.TFConvBertForMaskedLM.call:56
#: transformers.TFConvBertForMultipleChoice.call:56
#: transformers.TFConvBertForQuestionAnswering.call:56
#: transformers.TFConvBertForSequenceClassification.call:56
#: transformers.TFConvBertForTokenClassification.call:56
#: transformers.TFConvBertModel.call:56
msgid ""
"Whether or not to use the model in training mode (some modules like "
"dropout modules have different behaviors between training and "
"evaluation)."
msgstr ""

#: of transformers.TFConvBertModel.call:60
msgid ""
"A :class:`~transformers.modeling_tf_outputs.TFBaseModelOutput` or a tuple"
" of :obj:`tf.Tensor` (if ``return_dict=False`` is passed or when "
"``config.return_dict=False``) comprising various elements depending on "
"the configuration (:class:`~transformers.ConvBertConfig`) and inputs.  - "
"**last_hidden_state** (:obj:`tf.Tensor` of shape :obj:`(batch_size, "
"sequence_length, hidden_size)`) -- Sequence of hidden-states at the "
"output of the last layer of the model. - **hidden_states** "
"(:obj:`tuple(tf.FloatTensor)`, `optional`, returned when "
"``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of :obj:`tf.Tensor` (one "
"for the output of the embeddings + one for the output of each layer) of"
"   shape :obj:`(batch_size, sequence_length, hidden_size)`.    Hidden-"
"states of the model at the output of each layer plus the initial "
"embedding outputs. - **attentions** (:obj:`tuple(tf.Tensor)`, `optional`,"
" returned when ``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`tf.Tensor` (one for "
"each layer) of shape :obj:`(batch_size, num_heads, sequence_length,   "
"sequence_length)`.    Attentions weights after the attention softmax, "
"used to compute the weighted average in the self-attention   heads."
msgstr ""

#: of transformers.TFConvBertModel.call:60
msgid ""
"A :class:`~transformers.modeling_tf_outputs.TFBaseModelOutput` or a tuple"
" of :obj:`tf.Tensor` (if ``return_dict=False`` is passed or when "
"``config.return_dict=False``) comprising various elements depending on "
"the configuration (:class:`~transformers.ConvBertConfig`) and inputs."
msgstr ""

#: of transformers.TFConvBertModel.call:64
msgid ""
"**last_hidden_state** (:obj:`tf.Tensor` of shape :obj:`(batch_size, "
"sequence_length, hidden_size)`) -- Sequence of hidden-states at the "
"output of the last layer of the model."
msgstr ""

#: of transformers.TFConvBertModel.call:65
msgid ""
"**hidden_states** (:obj:`tuple(tf.FloatTensor)`, `optional`, returned "
"when ``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of :obj:`tf.Tensor` (one "
"for the output of the embeddings + one for the output of each layer) of "
"shape :obj:`(batch_size, sequence_length, hidden_size)`."
msgstr ""

#: of transformers.TFConvBertForMaskedLM.call:74
#: transformers.TFConvBertForMultipleChoice.call:76
#: transformers.TFConvBertForQuestionAnswering.call:79
#: transformers.TFConvBertForSequenceClassification.call:74
#: transformers.TFConvBertForTokenClassification.call:73
#: transformers.TFConvBertModel.call:69
msgid ""
"**attentions** (:obj:`tuple(tf.Tensor)`, `optional`, returned when "
"``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`tf.Tensor` (one for "
"each layer) of shape :obj:`(batch_size, num_heads, sequence_length, "
"sequence_length)`."
msgstr ""

#: of transformers.TFConvBertModel.call:74
msgid ""
":class:`~transformers.modeling_tf_outputs.TFBaseModelOutput` or "
":obj:`tuple(tf.Tensor)`"
msgstr ""

#: ../../source/model_doc/convbert.rst:114
msgid "TFConvBertForMaskedLM"
msgstr ""

#: of transformers.TFConvBertForMaskedLM:1
msgid "ConvBERT Model with a `language modeling` head on top."
msgstr ""

#: of transformers.TFConvBertForMaskedLM.call:1
msgid ""
"The :class:`~transformers.TFConvBertForMaskedLM` forward method, "
"overrides the :func:`__call__` special method."
msgstr ""

#: of transformers.TFConvBertForMaskedLM.call:64
msgid ""
"A :class:`~transformers.modeling_tf_outputs.TFMaskedLMOutput` or a tuple "
"of :obj:`tf.Tensor` (if ``return_dict=False`` is passed or when "
"``config.return_dict=False``) comprising various elements depending on "
"the configuration (:class:`~transformers.ConvBertConfig`) and inputs.  - "
"**loss** (:obj:`tf.Tensor` of shape :obj:`(n,)`, `optional`, where n is "
"the number of non-masked labels, returned when :obj:`labels` is provided)"
" -- Masked language modeling (MLM) loss. - **logits** (:obj:`tf.Tensor` "
"of shape :obj:`(batch_size, sequence_length, config.vocab_size)`) -- "
"Prediction scores of the language modeling head (scores for each "
"vocabulary token before SoftMax). - **hidden_states** "
"(:obj:`tuple(tf.Tensor)`, `optional`, returned when "
"``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of :obj:`tf.Tensor` (one "
"for the output of the embeddings + one for the output of each layer) of"
"   shape :obj:`(batch_size, sequence_length, hidden_size)`.    Hidden-"
"states of the model at the output of each layer plus the initial "
"embedding outputs. - **attentions** (:obj:`tuple(tf.Tensor)`, `optional`,"
" returned when ``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`tf.Tensor` (one for "
"each layer) of shape :obj:`(batch_size, num_heads, sequence_length,   "
"sequence_length)`.    Attentions weights after the attention softmax, "
"used to compute the weighted average in the self-attention   heads."
msgstr ""

#: of transformers.TFConvBertForMaskedLM.call:64
msgid ""
"A :class:`~transformers.modeling_tf_outputs.TFMaskedLMOutput` or a tuple "
"of :obj:`tf.Tensor` (if ``return_dict=False`` is passed or when "
"``config.return_dict=False``) comprising various elements depending on "
"the configuration (:class:`~transformers.ConvBertConfig`) and inputs."
msgstr ""

#: of transformers.TFConvBertForMaskedLM.call:68
msgid ""
"**loss** (:obj:`tf.Tensor` of shape :obj:`(n,)`, `optional`, where n is "
"the number of non-masked labels, returned when :obj:`labels` is provided)"
" -- Masked language modeling (MLM) loss."
msgstr ""

#: of transformers.TFConvBertForMaskedLM.call:69
msgid ""
"**logits** (:obj:`tf.Tensor` of shape :obj:`(batch_size, sequence_length,"
" config.vocab_size)`) -- Prediction scores of the language modeling head "
"(scores for each vocabulary token before SoftMax)."
msgstr ""

#: of transformers.TFConvBertForMaskedLM.call:70
#: transformers.TFConvBertForMultipleChoice.call:72
#: transformers.TFConvBertForQuestionAnswering.call:75
#: transformers.TFConvBertForSequenceClassification.call:70
#: transformers.TFConvBertForTokenClassification.call:69
msgid ""
"**hidden_states** (:obj:`tuple(tf.Tensor)`, `optional`, returned when "
"``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of :obj:`tf.Tensor` (one "
"for the output of the embeddings + one for the output of each layer) of "
"shape :obj:`(batch_size, sequence_length, hidden_size)`."
msgstr ""

#: of transformers.TFConvBertForMaskedLM.call:79
msgid ""
":class:`~transformers.modeling_tf_outputs.TFMaskedLMOutput` or "
":obj:`tuple(tf.Tensor)`"
msgstr ""

#: ../../source/model_doc/convbert.rst:121
msgid "TFConvBertForSequenceClassification"
msgstr ""

#: of transformers.TFConvBertForSequenceClassification:1
msgid ""
"ConvBERT Model transformer with a sequence classification/regression head"
" on top e.g., for GLUE tasks."
msgstr ""

#: of transformers.TFConvBertForSequenceClassification.call:1
msgid ""
"The :class:`~transformers.TFConvBertForSequenceClassification` forward "
"method, overrides the :func:`__call__` special method."
msgstr ""

#: of transformers.TFConvBertForSequenceClassification.call:64
msgid ""
"A :class:`~transformers.modeling_tf_outputs.TFSequenceClassifierOutput` "
"or a tuple of :obj:`tf.Tensor` (if ``return_dict=False`` is passed or "
"when ``config.return_dict=False``) comprising various elements depending "
"on the configuration (:class:`~transformers.ConvBertConfig`) and inputs."
"  - **loss** (:obj:`tf.Tensor` of shape :obj:`(batch_size, )`, "
"`optional`, returned when :obj:`labels` is provided) -- Classification "
"(or regression if config.num_labels==1) loss. - **logits** "
"(:obj:`tf.Tensor` of shape :obj:`(batch_size, config.num_labels)`) -- "
"Classification (or regression if config.num_labels==1) scores (before "
"SoftMax). - **hidden_states** (:obj:`tuple(tf.Tensor)`, `optional`, "
"returned when ``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of :obj:`tf.Tensor` (one "
"for the output of the embeddings + one for the output of each layer) of"
"   shape :obj:`(batch_size, sequence_length, hidden_size)`.    Hidden-"
"states of the model at the output of each layer plus the initial "
"embedding outputs. - **attentions** (:obj:`tuple(tf.Tensor)`, `optional`,"
" returned when ``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`tf.Tensor` (one for "
"each layer) of shape :obj:`(batch_size, num_heads, sequence_length,   "
"sequence_length)`.    Attentions weights after the attention softmax, "
"used to compute the weighted average in the self-attention   heads."
msgstr ""

#: of transformers.TFConvBertForSequenceClassification.call:64
msgid ""
"A :class:`~transformers.modeling_tf_outputs.TFSequenceClassifierOutput` "
"or a tuple of :obj:`tf.Tensor` (if ``return_dict=False`` is passed or "
"when ``config.return_dict=False``) comprising various elements depending "
"on the configuration (:class:`~transformers.ConvBertConfig`) and inputs."
msgstr ""

#: of transformers.TFConvBertForSequenceClassification.call:68
msgid ""
"**loss** (:obj:`tf.Tensor` of shape :obj:`(batch_size, )`, `optional`, "
"returned when :obj:`labels` is provided) -- Classification (or regression"
" if config.num_labels==1) loss."
msgstr ""

#: of transformers.TFConvBertForSequenceClassification.call:69
msgid ""
"**logits** (:obj:`tf.Tensor` of shape :obj:`(batch_size, "
"config.num_labels)`) -- Classification (or regression if "
"config.num_labels==1) scores (before SoftMax)."
msgstr ""

#: of transformers.TFConvBertForSequenceClassification.call:79
msgid ""
":class:`~transformers.modeling_tf_outputs.TFSequenceClassifierOutput` or "
":obj:`tuple(tf.Tensor)`"
msgstr ""

#: ../../source/model_doc/convbert.rst:128
msgid "TFConvBertForMultipleChoice"
msgstr ""

#: of transformers.TFConvBertForMultipleChoice.call:1
msgid ""
"The :class:`~transformers.TFConvBertForMultipleChoice` forward method, "
"overrides the :func:`__call__` special method."
msgstr ""

#: of transformers.TFConvBertForMultipleChoice.call:59
msgid ""
"Labels for computing the multiple choice classification loss. Indices "
"should be in ``[0, ..., num_choices]`` where :obj:`num_choices` is the "
"size of the second dimension of the input tensors. (See :obj:`input_ids` "
"above)"
msgstr ""

#: of transformers.TFConvBertForMultipleChoice.call:64
msgid ""
"A :class:`~transformers.modeling_tf_outputs.TFMultipleChoiceModelOutput` "
"or a tuple of :obj:`tf.Tensor` (if ``return_dict=False`` is passed or "
"when ``config.return_dict=False``) comprising various elements depending "
"on the configuration (:class:`~transformers.ConvBertConfig`) and inputs."
"  - **loss** (:obj:`tf.Tensor` of shape `(batch_size, )`, `optional`, "
"returned when :obj:`labels` is provided) -- Classification loss. - "
"**logits** (:obj:`tf.Tensor` of shape :obj:`(batch_size, num_choices)`) "
"-- `num_choices` is the second dimension of the input tensors. (see "
"`input_ids` above).    Classification scores (before SoftMax). - "
"**hidden_states** (:obj:`tuple(tf.Tensor)`, `optional`, returned when "
"``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of :obj:`tf.Tensor` (one "
"for the output of the embeddings + one for the output of each layer) of"
"   shape :obj:`(batch_size, sequence_length, hidden_size)`.    Hidden-"
"states of the model at the output of each layer plus the initial "
"embedding outputs. - **attentions** (:obj:`tuple(tf.Tensor)`, `optional`,"
" returned when ``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`tf.Tensor` (one for "
"each layer) of shape :obj:`(batch_size, num_heads, sequence_length,   "
"sequence_length)`.    Attentions weights after the attention softmax, "
"used to compute the weighted average in the self-attention   heads."
msgstr ""

#: of transformers.TFConvBertForMultipleChoice.call:64
msgid ""
"A :class:`~transformers.modeling_tf_outputs.TFMultipleChoiceModelOutput` "
"or a tuple of :obj:`tf.Tensor` (if ``return_dict=False`` is passed or "
"when ``config.return_dict=False``) comprising various elements depending "
"on the configuration (:class:`~transformers.ConvBertConfig`) and inputs."
msgstr ""

#: of transformers.TFConvBertForMultipleChoice.call:68
msgid ""
"**loss** (:obj:`tf.Tensor` of shape `(batch_size, )`, `optional`, "
"returned when :obj:`labels` is provided) -- Classification loss."
msgstr ""

#: of transformers.TFConvBertForMultipleChoice.call:69
msgid ""
"**logits** (:obj:`tf.Tensor` of shape :obj:`(batch_size, num_choices)`) "
"-- `num_choices` is the second dimension of the input tensors. (see "
"`input_ids` above)."
msgstr ""

#: of transformers.TFConvBertForMultipleChoice.call:81
msgid ""
":class:`~transformers.modeling_tf_outputs.TFMultipleChoiceModelOutput` or"
" :obj:`tuple(tf.Tensor)`"
msgstr ""

#: ../../source/model_doc/convbert.rst:135
msgid "TFConvBertForTokenClassification"
msgstr ""

#: of transformers.TFConvBertForTokenClassification.call:1
msgid ""
"The :class:`~transformers.TFConvBertForTokenClassification` forward "
"method, overrides the :func:`__call__` special method."
msgstr ""

#: of transformers.TFConvBertForTokenClassification.call:63
msgid ""
"A :class:`~transformers.modeling_tf_outputs.TFTokenClassifierOutput` or a"
" tuple of :obj:`tf.Tensor` (if ``return_dict=False`` is passed or when "
"``config.return_dict=False``) comprising various elements depending on "
"the configuration (:class:`~transformers.ConvBertConfig`) and inputs.  - "
"**loss** (:obj:`tf.Tensor` of shape :obj:`(n,)`, `optional`, where n is "
"the number of unmasked labels, returned when ``labels`` is provided)  -- "
"Classification loss. - **logits** (:obj:`tf.Tensor` of shape "
":obj:`(batch_size, sequence_length, config.num_labels)`) -- "
"Classification scores (before SoftMax). - **hidden_states** "
"(:obj:`tuple(tf.Tensor)`, `optional`, returned when "
"``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of :obj:`tf.Tensor` (one "
"for the output of the embeddings + one for the output of each layer) of"
"   shape :obj:`(batch_size, sequence_length, hidden_size)`.    Hidden-"
"states of the model at the output of each layer plus the initial "
"embedding outputs. - **attentions** (:obj:`tuple(tf.Tensor)`, `optional`,"
" returned when ``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`tf.Tensor` (one for "
"each layer) of shape :obj:`(batch_size, num_heads, sequence_length,   "
"sequence_length)`.    Attentions weights after the attention softmax, "
"used to compute the weighted average in the self-attention   heads."
msgstr ""

#: of transformers.TFConvBertForTokenClassification.call:63
msgid ""
"A :class:`~transformers.modeling_tf_outputs.TFTokenClassifierOutput` or a"
" tuple of :obj:`tf.Tensor` (if ``return_dict=False`` is passed or when "
"``config.return_dict=False``) comprising various elements depending on "
"the configuration (:class:`~transformers.ConvBertConfig`) and inputs."
msgstr ""

#: of transformers.TFConvBertForTokenClassification.call:67
msgid ""
"**loss** (:obj:`tf.Tensor` of shape :obj:`(n,)`, `optional`, where n is "
"the number of unmasked labels, returned when ``labels`` is provided)  -- "
"Classification loss."
msgstr ""

#: of transformers.TFConvBertForTokenClassification.call:68
msgid ""
"**logits** (:obj:`tf.Tensor` of shape :obj:`(batch_size, sequence_length,"
" config.num_labels)`) -- Classification scores (before SoftMax)."
msgstr ""

#: of transformers.TFConvBertForTokenClassification.call:78
msgid ""
":class:`~transformers.modeling_tf_outputs.TFTokenClassifierOutput` or "
":obj:`tuple(tf.Tensor)`"
msgstr ""

#: ../../source/model_doc/convbert.rst:142
msgid "TFConvBertForQuestionAnswering"
msgstr ""

#: of transformers.TFConvBertForQuestionAnswering:1
msgid ""
"ConvBERT Model with a span classification head on top for extractive "
"question-answering tasks like SQuAD (a linear layer on top of the hidden-"
"states output to compute `span start logits` and `span end logits`)."
msgstr ""

#: of transformers.TFConvBertForQuestionAnswering.call:1
msgid ""
"The :class:`~transformers.TFConvBertForQuestionAnswering` forward method,"
" overrides the :func:`__call__` special method."
msgstr ""

#: of transformers.TFConvBertForQuestionAnswering.call:68
msgid ""
"A "
":class:`~transformers.modeling_tf_outputs.TFQuestionAnsweringModelOutput`"
" or a tuple of :obj:`tf.Tensor` (if ``return_dict=False`` is passed or "
"when ``config.return_dict=False``) comprising various elements depending "
"on the configuration (:class:`~transformers.ConvBertConfig`) and inputs."
"  - **loss** (:obj:`tf.Tensor` of shape :obj:`(batch_size, )`, "
"`optional`, returned when :obj:`start_positions` and :obj:`end_positions`"
" are provided) -- Total span extraction loss is the sum of a Cross-"
"Entropy for the start and end positions. - **start_logits** "
"(:obj:`tf.Tensor` of shape :obj:`(batch_size, sequence_length)`) -- Span-"
"start scores (before SoftMax). - **end_logits** (:obj:`tf.Tensor` of "
"shape :obj:`(batch_size, sequence_length)`) -- Span-end scores (before "
"SoftMax). - **hidden_states** (:obj:`tuple(tf.Tensor)`, `optional`, "
"returned when ``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of :obj:`tf.Tensor` (one "
"for the output of the embeddings + one for the output of each layer) of"
"   shape :obj:`(batch_size, sequence_length, hidden_size)`.    Hidden-"
"states of the model at the output of each layer plus the initial "
"embedding outputs. - **attentions** (:obj:`tuple(tf.Tensor)`, `optional`,"
" returned when ``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`tf.Tensor` (one for "
"each layer) of shape :obj:`(batch_size, num_heads, sequence_length,   "
"sequence_length)`.    Attentions weights after the attention softmax, "
"used to compute the weighted average in the self-attention   heads."
msgstr ""

#: of transformers.TFConvBertForQuestionAnswering.call:68
msgid ""
"A "
":class:`~transformers.modeling_tf_outputs.TFQuestionAnsweringModelOutput`"
" or a tuple of :obj:`tf.Tensor` (if ``return_dict=False`` is passed or "
"when ``config.return_dict=False``) comprising various elements depending "
"on the configuration (:class:`~transformers.ConvBertConfig`) and inputs."
msgstr ""

#: of transformers.TFConvBertForQuestionAnswering.call:72
msgid ""
"**loss** (:obj:`tf.Tensor` of shape :obj:`(batch_size, )`, `optional`, "
"returned when :obj:`start_positions` and :obj:`end_positions` are "
"provided) -- Total span extraction loss is the sum of a Cross-Entropy for"
" the start and end positions."
msgstr ""

#: of transformers.TFConvBertForQuestionAnswering.call:73
msgid ""
"**start_logits** (:obj:`tf.Tensor` of shape :obj:`(batch_size, "
"sequence_length)`) -- Span-start scores (before SoftMax)."
msgstr ""

#: of transformers.TFConvBertForQuestionAnswering.call:74
msgid ""
"**end_logits** (:obj:`tf.Tensor` of shape :obj:`(batch_size, "
"sequence_length)`) -- Span-end scores (before SoftMax)."
msgstr ""

#: of transformers.TFConvBertForQuestionAnswering.call:84
msgid ""
":class:`~transformers.modeling_tf_outputs.TFQuestionAnsweringModelOutput`"
" or :obj:`tuple(tf.Tensor)`"
msgstr ""

