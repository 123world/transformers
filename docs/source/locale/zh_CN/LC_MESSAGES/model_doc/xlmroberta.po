# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, The Hugging Face Team, Licenced under the Apache
# License, Version 2.0
# This file is distributed under the same license as the transformers
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: transformers \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-30 16:44+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/model_doc/xlmroberta.rst:14
msgid "XLM-RoBERTa"
msgstr ""

#: ../../source/model_doc/xlmroberta.rst:17
msgid "Overview"
msgstr ""

#: ../../source/model_doc/xlmroberta.rst:19
msgid ""
"The XLM-RoBERTa model was proposed in `Unsupervised Cross-lingual "
"Representation Learning at Scale <https://arxiv.org/abs/1911.02116>`__ by"
" Alexis Conneau, Kartikay Khandelwal, Naman Goyal, Vishrav Chaudhary, "
"Guillaume Wenzek, Francisco Guzm√°n, Edouard Grave, Myle Ott, Luke "
"Zettlemoyer and Veselin Stoyanov. It is based on Facebook's RoBERTa model"
" released in 2019. It is a large multi-lingual language model, trained on"
" 2.5TB of filtered CommonCrawl data."
msgstr ""

#: ../../source/model_doc/xlmroberta.rst:25
msgid "The abstract from the paper is the following:"
msgstr ""

#: ../../source/model_doc/xlmroberta.rst:27
#, python-format
msgid ""
"*This paper shows that pretraining multilingual language models at scale "
"leads to significant performance gains for a wide range of cross-lingual "
"transfer tasks. We train a Transformer-based masked language model on one"
" hundred languages, using more than two terabytes of filtered CommonCrawl"
" data. Our model, dubbed XLM-R, significantly outperforms multilingual "
"BERT (mBERT) on a variety of cross-lingual benchmarks, including +13.8% "
"average accuracy on XNLI, +12.3% average F1 score on MLQA, and +2.1% "
"average F1 score on NER. XLM-R performs particularly well on low-resource"
" languages, improving 11.8% in XNLI accuracy for Swahili and 9.2% for "
"Urdu over the previous XLM model. We also present a detailed empirical "
"evaluation of the key factors that are required to achieve these gains, "
"including the trade-offs between (1) positive transfer and capacity "
"dilution and (2) the performance of high and low resource languages at "
"scale. Finally, we show, for the first time, the possibility of "
"multilingual modeling without sacrificing per-language performance; XLM-"
"Ris very competitive with strong monolingual models on the GLUE and XNLI "
"benchmarks. We will make XLM-R code, data, and models publicly "
"available.*"
msgstr ""

#: ../../source/model_doc/xlmroberta.rst:39
msgid "Tips:"
msgstr ""

#: ../../source/model_doc/xlmroberta.rst:41
msgid ""
"XLM-RoBERTa is a multilingual model trained on 100 different languages. "
"Unlike some XLM multilingual models, it does not require :obj:`lang` "
"tensors to understand which language is used, and should be able to "
"determine the correct language from the input ids."
msgstr ""

#: ../../source/model_doc/xlmroberta.rst:44
msgid ""
"This implementation is the same as RoBERTa. Refer to the "
":doc:`documentation of RoBERTa <roberta>` for usage examples as well as "
"the information relative to the inputs and outputs."
msgstr ""

#: ../../source/model_doc/xlmroberta.rst:47
msgid ""
"This model was contributed by `stefan-it <https://huggingface.co/stefan-"
"it>`__. The original code can be found `here "
"<https://github.com/pytorch/fairseq/tree/master/examples/xlmr>`__."
msgstr ""

#: ../../source/model_doc/xlmroberta.rst:52
msgid "XLMRobertaConfig"
msgstr ""

#: of transformers.XLMRobertaConfig:1
msgid ""
"This class overrides :class:`~transformers.RobertaConfig`. Please check "
"the superclass for the appropriate documentation alongside usage "
"examples."
msgstr ""

#: ../../source/model_doc/xlmroberta.rst:59
msgid "XLMRobertaTokenizer"
msgstr ""

#: of transformers.XLMRobertaTokenizer:1
msgid ""
"Adapted from :class:`~transformers.RobertaTokenizer` and "
":class:`~transformers.XLNetTokenizer`. Based on `SentencePiece "
"<https://github.com/google/sentencepiece>`__."
msgstr ""

#: of transformers.XLMRobertaTokenizer:4
msgid ""
"This tokenizer inherits from :class:`~transformers.PreTrainedTokenizer` "
"which contains most of the main methods. Users should refer to this "
"superclass for more information regarding those methods."
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM
#: transformers.TFXLMRobertaForMaskedLM.call
#: transformers.TFXLMRobertaForMultipleChoice
#: transformers.TFXLMRobertaForMultipleChoice.call
#: transformers.TFXLMRobertaForQuestionAnswering.call
#: transformers.TFXLMRobertaForSequenceClassification
#: transformers.TFXLMRobertaForSequenceClassification.call
#: transformers.TFXLMRobertaForTokenClassification
#: transformers.TFXLMRobertaForTokenClassification.call
#: transformers.TFXLMRobertaModel transformers.TFXLMRobertaModel.call
#: transformers.XLMRobertaForCausalLM
#: transformers.XLMRobertaForCausalLM.forward
#: transformers.XLMRobertaForMaskedLM
#: transformers.XLMRobertaForMaskedLM.forward
#: transformers.XLMRobertaForMultipleChoice
#: transformers.XLMRobertaForMultipleChoice.forward
#: transformers.XLMRobertaForQuestionAnswering
#: transformers.XLMRobertaForQuestionAnswering.forward
#: transformers.XLMRobertaForSequenceClassification
#: transformers.XLMRobertaForSequenceClassification.forward
#: transformers.XLMRobertaForTokenClassification
#: transformers.XLMRobertaForTokenClassification.forward
#: transformers.XLMRobertaModel transformers.XLMRobertaModel.forward
#: transformers.XLMRobertaTokenizer
#: transformers.XLMRobertaTokenizer.build_inputs_with_special_tokens
#: transformers.XLMRobertaTokenizer.create_token_type_ids_from_sequences
#: transformers.XLMRobertaTokenizer.get_special_tokens_mask
#: transformers.XLMRobertaTokenizer.save_vocabulary
#: transformers.XLMRobertaTokenizerFast
#: transformers.XLMRobertaTokenizerFast.build_inputs_with_special_tokens
#: transformers.XLMRobertaTokenizerFast.create_token_type_ids_from_sequences
#: transformers.XLMRobertaTokenizerFast.save_vocabulary
msgid "Parameters"
msgstr ""

#: of transformers.XLMRobertaTokenizer:7 transformers.XLMRobertaTokenizerFast:8
msgid "Path to the vocabulary file."
msgstr ""

#: of transformers.XLMRobertaTokenizer:9
#: transformers.XLMRobertaTokenizerFast:10
msgid ""
"The beginning of sequence token that was used during pretraining. Can be "
"used a sequence classifier token.  .. note::      When building a "
"sequence using special tokens, this is not the token that is used for the"
" beginning of     sequence. The token used is the :obj:`cls_token`."
msgstr ""

#: of transformers.XLMRobertaTokenizer:9
#: transformers.XLMRobertaTokenizerFast:10
msgid ""
"The beginning of sequence token that was used during pretraining. Can be "
"used a sequence classifier token."
msgstr ""

#: of transformers.XLMRobertaTokenizer:13
#: transformers.XLMRobertaTokenizerFast:14
msgid ""
"When building a sequence using special tokens, this is not the token that"
" is used for the beginning of sequence. The token used is the "
":obj:`cls_token`."
msgstr ""

#: of transformers.XLMRobertaTokenizer:16
#: transformers.XLMRobertaTokenizerFast:17
msgid ""
"The end of sequence token.  .. note::      When building a sequence using"
" special tokens, this is not the token that is used for the end of     "
"sequence. The token used is the :obj:`sep_token`."
msgstr ""

#: of transformers.XLMRobertaTokenizer:16
#: transformers.XLMRobertaTokenizerFast:17
msgid "The end of sequence token."
msgstr ""

#: of transformers.XLMRobertaTokenizer:20
#: transformers.XLMRobertaTokenizerFast:21
msgid ""
"When building a sequence using special tokens, this is not the token that"
" is used for the end of sequence. The token used is the :obj:`sep_token`."
msgstr ""

#: of transformers.XLMRobertaTokenizer:23
#: transformers.XLMRobertaTokenizerFast:24
msgid ""
"The separator token, which is used when building a sequence from multiple"
" sequences, e.g. two sequences for sequence classification or for a text "
"and a question for question answering. It is also used as the last token "
"of a sequence built with special tokens."
msgstr ""

#: of transformers.XLMRobertaTokenizer:27
#: transformers.XLMRobertaTokenizerFast:28
msgid ""
"The classifier token which is used when doing sequence classification "
"(classification of the whole sequence instead of per-token "
"classification). It is the first token of the sequence when built with "
"special tokens."
msgstr ""

#: of transformers.XLMRobertaTokenizer:30
#: transformers.XLMRobertaTokenizerFast:31
msgid ""
"The unknown token. A token that is not in the vocabulary cannot be "
"converted to an ID and is set to be this token instead."
msgstr ""

#: of transformers.XLMRobertaTokenizer:33
#: transformers.XLMRobertaTokenizerFast:34
msgid ""
"The token used for padding, for example when batching sequences of "
"different lengths."
msgstr ""

#: of transformers.XLMRobertaTokenizer:35
#: transformers.XLMRobertaTokenizerFast:36
msgid ""
"The token used for masking values. This is the token used when training "
"this model with masked language modeling. This is the token which the "
"model will try to predict."
msgstr ""

#: of transformers.XLMRobertaTokenizer:38
#: transformers.XLMRobertaTokenizerFast:39
msgid "Additional special tokens used by the tokenizer."
msgstr ""

#: of transformers.XLMRobertaTokenizer:40
msgid ""
"Will be passed to the ``SentencePieceProcessor.__init__()`` method. The "
"`Python wrapper for SentencePiece "
"<https://github.com/google/sentencepiece/tree/master/python>`__ can be "
"used, among other things, to set:  - ``enable_sampling``: Enable subword "
"regularization. - ``nbest_size``: Sampling parameters for unigram. "
"Invalid for BPE-Dropout.    - ``nbest_size = {0,1}``: No sampling is "
"performed.   - ``nbest_size > 1``: samples from the nbest_size results."
"   - ``nbest_size < 0``: assuming that nbest_size is infinite and samples"
" from the all hypothesis (lattice)     using forward-filtering-and-"
"backward-sampling algorithm.  - ``alpha``: Smoothing parameter for "
"unigram sampling, and dropout probability of merge operations for   BPE-"
"dropout."
msgstr ""

#: of transformers.XLMRobertaTokenizer:40
msgid ""
"Will be passed to the ``SentencePieceProcessor.__init__()`` method. The "
"`Python wrapper for SentencePiece "
"<https://github.com/google/sentencepiece/tree/master/python>`__ can be "
"used, among other things, to set:"
msgstr ""

#: of transformers.XLMRobertaTokenizer:43
msgid "``enable_sampling``: Enable subword regularization."
msgstr ""

#: of transformers.XLMRobertaTokenizer:44
msgid "``nbest_size``: Sampling parameters for unigram. Invalid for BPE-Dropout."
msgstr ""

#: of transformers.XLMRobertaTokenizer:46
msgid "``nbest_size = {0,1}``: No sampling is performed."
msgstr ""

#: of transformers.XLMRobertaTokenizer:47
msgid "``nbest_size > 1``: samples from the nbest_size results."
msgstr ""

#: of transformers.XLMRobertaTokenizer:48
msgid ""
"``nbest_size < 0``: assuming that nbest_size is infinite and samples from"
" the all hypothesis (lattice) using forward-filtering-and-backward-"
"sampling algorithm."
msgstr ""

#: of transformers.XLMRobertaTokenizer:51
msgid ""
"``alpha``: Smoothing parameter for unigram sampling, and dropout "
"probability of merge operations for BPE-dropout."
msgstr ""

#: of transformers.XLMRobertaTokenizer:57
msgid ""
"The `SentencePiece` processor that is used for every conversion (string, "
"tokens and IDs)."
msgstr ""

#: of transformers.XLMRobertaTokenizer
msgid "type"
msgstr ""

#: of transformers.XLMRobertaTokenizer:59
msgid ":obj:`SentencePieceProcessor`"
msgstr ""

#: of transformers.XLMRobertaTokenizer.build_inputs_with_special_tokens:1
#: transformers.XLMRobertaTokenizerFast.build_inputs_with_special_tokens:1
msgid ""
"Build model inputs from a sequence or a pair of sequence for sequence "
"classification tasks by concatenating and adding special tokens. An XLM-"
"RoBERTa sequence has the following format:"
msgstr ""

#: of transformers.XLMRobertaTokenizer.build_inputs_with_special_tokens:4
#: transformers.XLMRobertaTokenizerFast.build_inputs_with_special_tokens:4
msgid "single sequence: ``<s> X </s>``"
msgstr ""

#: of transformers.XLMRobertaTokenizer.build_inputs_with_special_tokens:5
#: transformers.XLMRobertaTokenizerFast.build_inputs_with_special_tokens:5
msgid "pair of sequences: ``<s> A </s></s> B </s>``"
msgstr ""

#: of transformers.XLMRobertaTokenizer.build_inputs_with_special_tokens:7
#: transformers.XLMRobertaTokenizerFast.build_inputs_with_special_tokens:7
msgid "List of IDs to which the special tokens will be added."
msgstr ""

#: of transformers.XLMRobertaTokenizer.build_inputs_with_special_tokens:9
#: transformers.XLMRobertaTokenizer.create_token_type_ids_from_sequences:6
#: transformers.XLMRobertaTokenizer.get_special_tokens_mask:6
#: transformers.XLMRobertaTokenizerFast.build_inputs_with_special_tokens:9
#: transformers.XLMRobertaTokenizerFast.create_token_type_ids_from_sequences:6
msgid "Optional second list of IDs for sequence pairs."
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM.call
#: transformers.TFXLMRobertaForMultipleChoice.call
#: transformers.TFXLMRobertaForQuestionAnswering.call
#: transformers.TFXLMRobertaForSequenceClassification.call
#: transformers.TFXLMRobertaForTokenClassification.call
#: transformers.TFXLMRobertaModel.call
#: transformers.XLMRobertaForCausalLM.forward
#: transformers.XLMRobertaForMaskedLM.forward
#: transformers.XLMRobertaForMultipleChoice.forward
#: transformers.XLMRobertaForQuestionAnswering.forward
#: transformers.XLMRobertaForSequenceClassification.forward
#: transformers.XLMRobertaForTokenClassification.forward
#: transformers.XLMRobertaModel.forward
#: transformers.XLMRobertaTokenizer.build_inputs_with_special_tokens
#: transformers.XLMRobertaTokenizer.create_token_type_ids_from_sequences
#: transformers.XLMRobertaTokenizer.get_special_tokens_mask
#: transformers.XLMRobertaTokenizer.save_vocabulary
#: transformers.XLMRobertaTokenizerFast.build_inputs_with_special_tokens
#: transformers.XLMRobertaTokenizerFast.create_token_type_ids_from_sequences
#: transformers.XLMRobertaTokenizerFast.save_vocabulary
msgid "Returns"
msgstr ""

#: of transformers.XLMRobertaTokenizer.build_inputs_with_special_tokens:12
#: transformers.XLMRobertaTokenizerFast.build_inputs_with_special_tokens:12
msgid ""
"List of `input IDs <../glossary.html#input-ids>`__ with the appropriate "
"special tokens."
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM.call
#: transformers.TFXLMRobertaForMultipleChoice.call
#: transformers.TFXLMRobertaForQuestionAnswering.call
#: transformers.TFXLMRobertaForSequenceClassification.call
#: transformers.TFXLMRobertaForTokenClassification.call
#: transformers.TFXLMRobertaModel.call
#: transformers.XLMRobertaForCausalLM.forward
#: transformers.XLMRobertaForMaskedLM.forward
#: transformers.XLMRobertaForMultipleChoice.forward
#: transformers.XLMRobertaForQuestionAnswering.forward
#: transformers.XLMRobertaForSequenceClassification.forward
#: transformers.XLMRobertaForTokenClassification.forward
#: transformers.XLMRobertaModel.forward
#: transformers.XLMRobertaTokenizer.build_inputs_with_special_tokens
#: transformers.XLMRobertaTokenizer.create_token_type_ids_from_sequences
#: transformers.XLMRobertaTokenizer.get_special_tokens_mask
#: transformers.XLMRobertaTokenizer.save_vocabulary
#: transformers.XLMRobertaTokenizerFast.build_inputs_with_special_tokens
#: transformers.XLMRobertaTokenizerFast.create_token_type_ids_from_sequences
#: transformers.XLMRobertaTokenizerFast.save_vocabulary
msgid "Return type"
msgstr ""

#: of transformers.XLMRobertaTokenizer.build_inputs_with_special_tokens:13
#: transformers.XLMRobertaTokenizer.create_token_type_ids_from_sequences:10
#: transformers.XLMRobertaTokenizer.get_special_tokens_mask:12
#: transformers.XLMRobertaTokenizerFast.build_inputs_with_special_tokens:13
#: transformers.XLMRobertaTokenizerFast.create_token_type_ids_from_sequences:10
msgid ":obj:`List[int]`"
msgstr ""

#: of transformers.XLMRobertaTokenizer.create_token_type_ids_from_sequences:1
#: transformers.XLMRobertaTokenizerFast.create_token_type_ids_from_sequences:1
msgid ""
"Create a mask from the two sequences passed to be used in a sequence-pair"
" classification task. XLM-RoBERTa does not make use of token type ids, "
"therefore a list of zeros is returned."
msgstr ""

#: of transformers.XLMRobertaTokenizer.create_token_type_ids_from_sequences:4
#: transformers.XLMRobertaTokenizer.get_special_tokens_mask:4
#: transformers.XLMRobertaTokenizerFast.create_token_type_ids_from_sequences:4
msgid "List of IDs."
msgstr ""

#: of transformers.XLMRobertaTokenizer.create_token_type_ids_from_sequences:9
#: transformers.XLMRobertaTokenizerFast.create_token_type_ids_from_sequences:9
msgid "List of zeros."
msgstr ""

#: of transformers.XLMRobertaTokenizer.get_special_tokens_mask:1
msgid ""
"Retrieve sequence ids from a token list that has no special tokens added."
" This method is called when adding special tokens using the tokenizer "
"``prepare_for_model`` method."
msgstr ""

#: of transformers.XLMRobertaTokenizer.get_special_tokens_mask:8
msgid ""
"Whether or not the token list is already formatted with special tokens "
"for the model."
msgstr ""

#: of transformers.XLMRobertaTokenizer.get_special_tokens_mask:11
msgid ""
"A list of integers in the range [0, 1]: 1 for a special token, 0 for a "
"sequence token."
msgstr ""

#: of transformers.XLMRobertaTokenizer.save_vocabulary:1
#: transformers.XLMRobertaTokenizerFast.save_vocabulary:1
msgid "Save only the vocabulary of the tokenizer (vocabulary + added tokens)."
msgstr ""

#: of transformers.XLMRobertaTokenizer.save_vocabulary:3
#: transformers.XLMRobertaTokenizerFast.save_vocabulary:3
msgid ""
"This method won't save the configuration and special token mappings of "
"the tokenizer. Use "
":meth:`~transformers.PreTrainedTokenizerFast._save_pretrained` to save "
"the whole state of the tokenizer."
msgstr ""

#: of transformers.XLMRobertaTokenizer.save_vocabulary:6
#: transformers.XLMRobertaTokenizerFast.save_vocabulary:6
msgid "The directory in which to save the vocabulary."
msgstr ""

#: of transformers.XLMRobertaTokenizer.save_vocabulary:8
#: transformers.XLMRobertaTokenizerFast.save_vocabulary:8
msgid "An optional prefix to add to the named of the saved files."
msgstr ""

#: of transformers.XLMRobertaTokenizer.save_vocabulary:11
#: transformers.XLMRobertaTokenizerFast.save_vocabulary:11
msgid "Paths to the files saved."
msgstr ""

#: of transformers.XLMRobertaTokenizer.save_vocabulary:12
#: transformers.XLMRobertaTokenizerFast.save_vocabulary:12
msgid ":obj:`Tuple(str)`"
msgstr ""

#: ../../source/model_doc/xlmroberta.rst:67
msgid "XLMRobertaTokenizerFast"
msgstr ""

#: of transformers.XLMRobertaTokenizerFast:1
msgid ""
"Construct a \"fast\" XLM-RoBERTa tokenizer (backed by HuggingFace's "
"`tokenizers` library). Adapted from "
":class:`~transformers.RobertaTokenizer` and "
":class:`~transformers.XLNetTokenizer`. Based on `BPE "
"<https://huggingface.co/docs/tokenizers/python/latest/components.html?highlight=BPE#models>`__."
msgstr ""

#: of transformers.XLMRobertaTokenizerFast:5
msgid ""
"This tokenizer inherits from "
":class:`~transformers.PreTrainedTokenizerFast` which contains most of the"
" main methods. Users should refer to this superclass for more information"
" regarding those methods."
msgstr ""

#: ../../source/model_doc/xlmroberta.rst:74
msgid "XLMRobertaModel"
msgstr ""

#: of transformers.TFXLMRobertaModel:1 transformers.XLMRobertaModel:1
msgid ""
"The bare XLM-RoBERTa Model transformer outputting raw hidden-states "
"without any specific head on top."
msgstr ""

#: of transformers.XLMRobertaForCausalLM:3 transformers.XLMRobertaForMaskedLM:3
#: transformers.XLMRobertaForMultipleChoice:5
#: transformers.XLMRobertaForQuestionAnswering:5
#: transformers.XLMRobertaForSequenceClassification:5
#: transformers.XLMRobertaForTokenClassification:5
#: transformers.XLMRobertaModel:3
msgid ""
"This model inherits from :class:`~transformers.PreTrainedModel`. Check "
"the superclass documentation for the generic methods the library "
"implements for all its model (such as downloading or saving, resizing the"
" input embeddings, pruning heads etc.)"
msgstr ""

#: of transformers.XLMRobertaForCausalLM:7 transformers.XLMRobertaForMaskedLM:7
#: transformers.XLMRobertaForMultipleChoice:9
#: transformers.XLMRobertaForQuestionAnswering:9
#: transformers.XLMRobertaForSequenceClassification:9
#: transformers.XLMRobertaForTokenClassification:9
#: transformers.XLMRobertaModel:7
msgid ""
"This model is also a PyTorch `torch.nn.Module "
"<https://pytorch.org/docs/stable/nn.html#torch.nn.Module>`__ subclass. "
"Use it as a regular PyTorch Module and refer to the PyTorch documentation"
" for all matter related to general usage and behavior."
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM:30
#: transformers.TFXLMRobertaForMultipleChoice:32
#: transformers.TFXLMRobertaForSequenceClassification:32
#: transformers.TFXLMRobertaForTokenClassification:32
#: transformers.TFXLMRobertaModel:30 transformers.XLMRobertaForCausalLM:11
#: transformers.XLMRobertaForMaskedLM:11
#: transformers.XLMRobertaForMultipleChoice:13
#: transformers.XLMRobertaForQuestionAnswering:13
#: transformers.XLMRobertaForSequenceClassification:13
#: transformers.XLMRobertaForTokenClassification:13
#: transformers.XLMRobertaModel:11
msgid ""
"Model configuration class with all the parameters of the model. "
"Initializing with a config file does not load the weights associated with"
" the model, only the configuration. Check out the "
":meth:`~transformers.PreTrainedModel.from_pretrained` method to load the "
"model weights."
msgstr ""

#: of transformers.XLMRobertaModel:17
msgid ""
"This class overrides :class:`~transformers.RobertaModel`. Please check "
"the superclass for the appropriate documentation alongside usage "
"examples."
msgstr ""

#: of transformers.XLMRobertaModel.forward:1
msgid ""
"The :class:`~transformers.RobertaModel` forward method, overrides the "
":func:`__call__` special method."
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM.call:4
#: transformers.TFXLMRobertaForMultipleChoice.call:4
#: transformers.TFXLMRobertaForQuestionAnswering.call:4
#: transformers.TFXLMRobertaForSequenceClassification.call:4
#: transformers.TFXLMRobertaForTokenClassification.call:4
#: transformers.TFXLMRobertaModel.call:4
#: transformers.XLMRobertaForCausalLM.forward:4
#: transformers.XLMRobertaForMaskedLM.forward:4
#: transformers.XLMRobertaForMultipleChoice.forward:4
#: transformers.XLMRobertaForQuestionAnswering.forward:4
#: transformers.XLMRobertaForSequenceClassification.forward:4
#: transformers.XLMRobertaForTokenClassification.forward:4
#: transformers.XLMRobertaModel.forward:4
msgid ""
"Although the recipe for forward pass needs to be defined within this "
"function, one should call the :class:`Module` instance afterwards instead"
" of this since the former takes care of running the pre and post "
"processing steps while the latter silently ignores them."
msgstr ""

#: of transformers.XLMRobertaForCausalLM.forward:8
#: transformers.XLMRobertaForMaskedLM.forward:8
#: transformers.XLMRobertaForMultipleChoice.forward:8
#: transformers.XLMRobertaForQuestionAnswering.forward:8
#: transformers.XLMRobertaForSequenceClassification.forward:8
#: transformers.XLMRobertaForTokenClassification.forward:8
#: transformers.XLMRobertaModel.forward:8
msgid ""
"Indices of input sequence tokens in the vocabulary.  Indices can be "
"obtained using :class:`~transformers.RobertaTokenizer`. See "
":meth:`transformers.PreTrainedTokenizer.encode` and "
":meth:`transformers.PreTrainedTokenizer.__call__` for details.  `What are"
" input IDs? <../glossary.html#input-ids>`__"
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM.call:8
#: transformers.TFXLMRobertaForMultipleChoice.call:8
#: transformers.TFXLMRobertaForQuestionAnswering.call:8
#: transformers.TFXLMRobertaForSequenceClassification.call:8
#: transformers.TFXLMRobertaForTokenClassification.call:8
#: transformers.TFXLMRobertaModel.call:8
#: transformers.XLMRobertaForCausalLM.forward:8
#: transformers.XLMRobertaForMaskedLM.forward:8
#: transformers.XLMRobertaForMultipleChoice.forward:8
#: transformers.XLMRobertaForQuestionAnswering.forward:8
#: transformers.XLMRobertaForSequenceClassification.forward:8
#: transformers.XLMRobertaForTokenClassification.forward:8
#: transformers.XLMRobertaModel.forward:8
msgid "Indices of input sequence tokens in the vocabulary."
msgstr ""

#: of transformers.XLMRobertaForCausalLM.forward:10
#: transformers.XLMRobertaForMaskedLM.forward:10
#: transformers.XLMRobertaForMultipleChoice.forward:10
#: transformers.XLMRobertaForQuestionAnswering.forward:10
#: transformers.XLMRobertaForSequenceClassification.forward:10
#: transformers.XLMRobertaForTokenClassification.forward:10
#: transformers.XLMRobertaModel.forward:10
msgid ""
"Indices can be obtained using :class:`~transformers.RobertaTokenizer`. "
"See :meth:`transformers.PreTrainedTokenizer.encode` and "
":meth:`transformers.PreTrainedTokenizer.__call__` for details."
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM.call:14
#: transformers.TFXLMRobertaForMultipleChoice.call:14
#: transformers.TFXLMRobertaForQuestionAnswering.call:14
#: transformers.TFXLMRobertaForSequenceClassification.call:14
#: transformers.TFXLMRobertaForTokenClassification.call:14
#: transformers.TFXLMRobertaModel.call:14
#: transformers.XLMRobertaForCausalLM.forward:14
#: transformers.XLMRobertaForMaskedLM.forward:14
#: transformers.XLMRobertaForMultipleChoice.forward:14
#: transformers.XLMRobertaForQuestionAnswering.forward:14
#: transformers.XLMRobertaForSequenceClassification.forward:14
#: transformers.XLMRobertaForTokenClassification.forward:14
#: transformers.XLMRobertaModel.forward:14
msgid "`What are input IDs? <../glossary.html#input-ids>`__"
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM.call:16
#: transformers.TFXLMRobertaForMultipleChoice.call:16
#: transformers.TFXLMRobertaForQuestionAnswering.call:16
#: transformers.TFXLMRobertaForSequenceClassification.call:16
#: transformers.TFXLMRobertaForTokenClassification.call:16
#: transformers.TFXLMRobertaModel.call:16
#: transformers.XLMRobertaForCausalLM.forward:16
#: transformers.XLMRobertaForMaskedLM.forward:16
#: transformers.XLMRobertaForMultipleChoice.forward:16
#: transformers.XLMRobertaForQuestionAnswering.forward:16
#: transformers.XLMRobertaForSequenceClassification.forward:16
#: transformers.XLMRobertaForTokenClassification.forward:16
#: transformers.XLMRobertaModel.forward:16
msgid ""
"Mask to avoid performing attention on padding token indices. Mask values "
"selected in ``[0, 1]``:  - 1 for tokens that are **not masked**, - 0 for "
"tokens that are **masked**.  `What are attention masks? <../glossary.html"
"#attention-mask>`__"
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM.call:16
#: transformers.TFXLMRobertaForMultipleChoice.call:16
#: transformers.TFXLMRobertaForQuestionAnswering.call:16
#: transformers.TFXLMRobertaForSequenceClassification.call:16
#: transformers.TFXLMRobertaForTokenClassification.call:16
#: transformers.TFXLMRobertaModel.call:16
#: transformers.XLMRobertaForCausalLM.forward:16
#: transformers.XLMRobertaForMaskedLM.forward:16
#: transformers.XLMRobertaForMultipleChoice.forward:16
#: transformers.XLMRobertaForQuestionAnswering.forward:16
#: transformers.XLMRobertaForSequenceClassification.forward:16
#: transformers.XLMRobertaForTokenClassification.forward:16
#: transformers.XLMRobertaModel.forward:16
msgid ""
"Mask to avoid performing attention on padding token indices. Mask values "
"selected in ``[0, 1]``:"
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM.call:18
#: transformers.TFXLMRobertaForMultipleChoice.call:18
#: transformers.TFXLMRobertaForQuestionAnswering.call:18
#: transformers.TFXLMRobertaForSequenceClassification.call:18
#: transformers.TFXLMRobertaForTokenClassification.call:18
#: transformers.TFXLMRobertaModel.call:18
#: transformers.XLMRobertaForCausalLM.forward:18
#: transformers.XLMRobertaForCausalLM.forward:59
#: transformers.XLMRobertaForMaskedLM.forward:18
#: transformers.XLMRobertaForMultipleChoice.forward:18
#: transformers.XLMRobertaForQuestionAnswering.forward:18
#: transformers.XLMRobertaForSequenceClassification.forward:18
#: transformers.XLMRobertaForTokenClassification.forward:18
#: transformers.XLMRobertaModel.forward:18
#: transformers.XLMRobertaModel.forward:59
msgid "1 for tokens that are **not masked**,"
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM.call:19
#: transformers.TFXLMRobertaForMultipleChoice.call:19
#: transformers.TFXLMRobertaForQuestionAnswering.call:19
#: transformers.TFXLMRobertaForSequenceClassification.call:19
#: transformers.TFXLMRobertaForTokenClassification.call:19
#: transformers.TFXLMRobertaModel.call:19
#: transformers.XLMRobertaForCausalLM.forward:19
#: transformers.XLMRobertaForCausalLM.forward:60
#: transformers.XLMRobertaForMaskedLM.forward:19
#: transformers.XLMRobertaForMultipleChoice.forward:19
#: transformers.XLMRobertaForQuestionAnswering.forward:19
#: transformers.XLMRobertaForSequenceClassification.forward:19
#: transformers.XLMRobertaForTokenClassification.forward:19
#: transformers.XLMRobertaModel.forward:19
#: transformers.XLMRobertaModel.forward:60
msgid "0 for tokens that are **masked**."
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM.call:21
#: transformers.TFXLMRobertaForMultipleChoice.call:21
#: transformers.TFXLMRobertaForQuestionAnswering.call:21
#: transformers.TFXLMRobertaForSequenceClassification.call:21
#: transformers.TFXLMRobertaForTokenClassification.call:21
#: transformers.TFXLMRobertaModel.call:21
#: transformers.XLMRobertaForCausalLM.forward:21
#: transformers.XLMRobertaForMaskedLM.forward:21
#: transformers.XLMRobertaForMultipleChoice.forward:21
#: transformers.XLMRobertaForQuestionAnswering.forward:21
#: transformers.XLMRobertaForSequenceClassification.forward:21
#: transformers.XLMRobertaForTokenClassification.forward:21
#: transformers.XLMRobertaModel.forward:21
msgid "`What are attention masks? <../glossary.html#attention-mask>`__"
msgstr ""

#: of transformers.XLMRobertaForCausalLM.forward:23
#: transformers.XLMRobertaForMaskedLM.forward:23
#: transformers.XLMRobertaForMultipleChoice.forward:23
#: transformers.XLMRobertaForQuestionAnswering.forward:23
#: transformers.XLMRobertaForSequenceClassification.forward:23
#: transformers.XLMRobertaForTokenClassification.forward:23
#: transformers.XLMRobertaModel.forward:23
msgid ""
"Segment token indices to indicate first and second portions of the "
"inputs. Indices are selected in ``[0, 1]``:  - 0 corresponds to a "
"`sentence A` token, - 1 corresponds to a `sentence B` token.  `What are "
"token type IDs? <../glossary.html#token-type-ids>`_"
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM.call:23
#: transformers.TFXLMRobertaForMultipleChoice.call:23
#: transformers.TFXLMRobertaForQuestionAnswering.call:23
#: transformers.TFXLMRobertaForSequenceClassification.call:23
#: transformers.TFXLMRobertaForTokenClassification.call:23
#: transformers.TFXLMRobertaModel.call:23
#: transformers.XLMRobertaForCausalLM.forward:23
#: transformers.XLMRobertaForMaskedLM.forward:23
#: transformers.XLMRobertaForMultipleChoice.forward:23
#: transformers.XLMRobertaForQuestionAnswering.forward:23
#: transformers.XLMRobertaForSequenceClassification.forward:23
#: transformers.XLMRobertaForTokenClassification.forward:23
#: transformers.XLMRobertaModel.forward:23
msgid ""
"Segment token indices to indicate first and second portions of the "
"inputs. Indices are selected in ``[0, 1]``:"
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM.call:26
#: transformers.TFXLMRobertaForMultipleChoice.call:26
#: transformers.TFXLMRobertaForQuestionAnswering.call:26
#: transformers.TFXLMRobertaForSequenceClassification.call:26
#: transformers.TFXLMRobertaForTokenClassification.call:26
#: transformers.TFXLMRobertaModel.call:26
#: transformers.XLMRobertaForCausalLM.forward:26
#: transformers.XLMRobertaForMaskedLM.forward:26
#: transformers.XLMRobertaForMultipleChoice.forward:26
#: transformers.XLMRobertaForQuestionAnswering.forward:26
#: transformers.XLMRobertaForSequenceClassification.forward:26
#: transformers.XLMRobertaForTokenClassification.forward:26
#: transformers.XLMRobertaModel.forward:26
msgid "0 corresponds to a `sentence A` token,"
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM.call:27
#: transformers.TFXLMRobertaForMultipleChoice.call:27
#: transformers.TFXLMRobertaForQuestionAnswering.call:27
#: transformers.TFXLMRobertaForSequenceClassification.call:27
#: transformers.TFXLMRobertaForTokenClassification.call:27
#: transformers.TFXLMRobertaModel.call:27
#: transformers.XLMRobertaForCausalLM.forward:27
#: transformers.XLMRobertaForMaskedLM.forward:27
#: transformers.XLMRobertaForMultipleChoice.forward:27
#: transformers.XLMRobertaForQuestionAnswering.forward:27
#: transformers.XLMRobertaForSequenceClassification.forward:27
#: transformers.XLMRobertaForTokenClassification.forward:27
#: transformers.XLMRobertaModel.forward:27
msgid "1 corresponds to a `sentence B` token."
msgstr ""

#: of transformers.XLMRobertaForCausalLM.forward:29
#: transformers.XLMRobertaForMaskedLM.forward:29
#: transformers.XLMRobertaForMultipleChoice.forward:29
#: transformers.XLMRobertaForQuestionAnswering.forward:29
#: transformers.XLMRobertaForSequenceClassification.forward:29
#: transformers.XLMRobertaForTokenClassification.forward:29
#: transformers.XLMRobertaModel.forward:29
msgid "`What are token type IDs? <../glossary.html#token-type-ids>`_"
msgstr ""

#: of transformers.XLMRobertaForCausalLM.forward:31
#: transformers.XLMRobertaForMaskedLM.forward:31
#: transformers.XLMRobertaForMultipleChoice.forward:31
#: transformers.XLMRobertaForQuestionAnswering.forward:31
#: transformers.XLMRobertaForSequenceClassification.forward:31
#: transformers.XLMRobertaForTokenClassification.forward:31
#: transformers.XLMRobertaModel.forward:31
msgid ""
"Indices of positions of each input sequence tokens in the position "
"embeddings. Selected in the range ``[0, config.max_position_embeddings - "
"1]``.  `What are position IDs? <../glossary.html#position-ids>`_"
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM.call:31
#: transformers.TFXLMRobertaForMultipleChoice.call:31
#: transformers.TFXLMRobertaForQuestionAnswering.call:31
#: transformers.TFXLMRobertaForSequenceClassification.call:31
#: transformers.TFXLMRobertaForTokenClassification.call:31
#: transformers.TFXLMRobertaModel.call:31
#: transformers.XLMRobertaForCausalLM.forward:31
#: transformers.XLMRobertaForMaskedLM.forward:31
#: transformers.XLMRobertaForMultipleChoice.forward:31
#: transformers.XLMRobertaForQuestionAnswering.forward:31
#: transformers.XLMRobertaForSequenceClassification.forward:31
#: transformers.XLMRobertaForTokenClassification.forward:31
#: transformers.XLMRobertaModel.forward:31
msgid ""
"Indices of positions of each input sequence tokens in the position "
"embeddings. Selected in the range ``[0, config.max_position_embeddings - "
"1]``."
msgstr ""

#: of transformers.XLMRobertaForCausalLM.forward:34
#: transformers.XLMRobertaForMaskedLM.forward:34
#: transformers.XLMRobertaForMultipleChoice.forward:34
#: transformers.XLMRobertaForQuestionAnswering.forward:34
#: transformers.XLMRobertaForSequenceClassification.forward:34
#: transformers.XLMRobertaForTokenClassification.forward:34
#: transformers.XLMRobertaModel.forward:34
msgid "`What are position IDs? <../glossary.html#position-ids>`_"
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM.call:36
#: transformers.TFXLMRobertaForMultipleChoice.call:36
#: transformers.TFXLMRobertaForQuestionAnswering.call:36
#: transformers.TFXLMRobertaForSequenceClassification.call:36
#: transformers.TFXLMRobertaForTokenClassification.call:36
#: transformers.TFXLMRobertaModel.call:36
#: transformers.XLMRobertaForCausalLM.forward:36
#: transformers.XLMRobertaForMaskedLM.forward:36
#: transformers.XLMRobertaForMultipleChoice.forward:36
#: transformers.XLMRobertaForQuestionAnswering.forward:36
#: transformers.XLMRobertaForSequenceClassification.forward:36
#: transformers.XLMRobertaForTokenClassification.forward:36
#: transformers.XLMRobertaModel.forward:36
msgid ""
"Mask to nullify selected heads of the self-attention modules. Mask values"
" selected in ``[0, 1]``:  - 1 indicates the head is **not masked**, - 0 "
"indicates the head is **masked**."
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM.call:36
#: transformers.TFXLMRobertaForMultipleChoice.call:36
#: transformers.TFXLMRobertaForQuestionAnswering.call:36
#: transformers.TFXLMRobertaForSequenceClassification.call:36
#: transformers.TFXLMRobertaForTokenClassification.call:36
#: transformers.TFXLMRobertaModel.call:36
#: transformers.XLMRobertaForCausalLM.forward:36
#: transformers.XLMRobertaForMaskedLM.forward:36
#: transformers.XLMRobertaForMultipleChoice.forward:36
#: transformers.XLMRobertaForQuestionAnswering.forward:36
#: transformers.XLMRobertaForSequenceClassification.forward:36
#: transformers.XLMRobertaForTokenClassification.forward:36
#: transformers.XLMRobertaModel.forward:36
msgid ""
"Mask to nullify selected heads of the self-attention modules. Mask values"
" selected in ``[0, 1]``:"
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM.call:38
#: transformers.TFXLMRobertaForMultipleChoice.call:38
#: transformers.TFXLMRobertaForQuestionAnswering.call:38
#: transformers.TFXLMRobertaForSequenceClassification.call:38
#: transformers.TFXLMRobertaForTokenClassification.call:38
#: transformers.TFXLMRobertaModel.call:38
#: transformers.XLMRobertaForCausalLM.forward:38
#: transformers.XLMRobertaForMaskedLM.forward:38
#: transformers.XLMRobertaForMultipleChoice.forward:38
#: transformers.XLMRobertaForQuestionAnswering.forward:38
#: transformers.XLMRobertaForSequenceClassification.forward:38
#: transformers.XLMRobertaForTokenClassification.forward:38
#: transformers.XLMRobertaModel.forward:38
msgid "1 indicates the head is **not masked**,"
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM.call:39
#: transformers.TFXLMRobertaForMultipleChoice.call:39
#: transformers.TFXLMRobertaForQuestionAnswering.call:39
#: transformers.TFXLMRobertaForSequenceClassification.call:39
#: transformers.TFXLMRobertaForTokenClassification.call:39
#: transformers.TFXLMRobertaModel.call:39
#: transformers.XLMRobertaForCausalLM.forward:39
#: transformers.XLMRobertaForMaskedLM.forward:39
#: transformers.XLMRobertaForMultipleChoice.forward:39
#: transformers.XLMRobertaForQuestionAnswering.forward:39
#: transformers.XLMRobertaForSequenceClassification.forward:39
#: transformers.XLMRobertaForTokenClassification.forward:39
#: transformers.XLMRobertaModel.forward:39
msgid "0 indicates the head is **masked**."
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM.call:41
#: transformers.TFXLMRobertaForMultipleChoice.call:41
#: transformers.TFXLMRobertaForQuestionAnswering.call:41
#: transformers.TFXLMRobertaForSequenceClassification.call:41
#: transformers.TFXLMRobertaForTokenClassification.call:41
#: transformers.TFXLMRobertaModel.call:41
#: transformers.XLMRobertaForCausalLM.forward:41
#: transformers.XLMRobertaForMaskedLM.forward:41
#: transformers.XLMRobertaForMultipleChoice.forward:41
#: transformers.XLMRobertaForQuestionAnswering.forward:41
#: transformers.XLMRobertaForSequenceClassification.forward:41
#: transformers.XLMRobertaForTokenClassification.forward:41
#: transformers.XLMRobertaModel.forward:41
msgid ""
"Optionally, instead of passing :obj:`input_ids` you can choose to "
"directly pass an embedded representation. This is useful if you want more"
" control over how to convert :obj:`input_ids` indices into associated "
"vectors than the model's internal embedding lookup matrix."
msgstr ""

#: of transformers.XLMRobertaForCausalLM.forward:45
#: transformers.XLMRobertaForMaskedLM.forward:45
#: transformers.XLMRobertaForMultipleChoice.forward:45
#: transformers.XLMRobertaForQuestionAnswering.forward:45
#: transformers.XLMRobertaForSequenceClassification.forward:45
#: transformers.XLMRobertaForTokenClassification.forward:45
#: transformers.XLMRobertaModel.forward:45
msgid ""
"Whether or not to return the attentions tensors of all attention layers. "
"See ``attentions`` under returned tensors for more detail."
msgstr ""

#: of transformers.XLMRobertaForCausalLM.forward:48
#: transformers.XLMRobertaForMaskedLM.forward:48
#: transformers.XLMRobertaForMultipleChoice.forward:48
#: transformers.XLMRobertaForQuestionAnswering.forward:48
#: transformers.XLMRobertaForSequenceClassification.forward:48
#: transformers.XLMRobertaForTokenClassification.forward:48
#: transformers.XLMRobertaModel.forward:48
msgid ""
"Whether or not to return the hidden states of all layers. See "
"``hidden_states`` under returned tensors for more detail."
msgstr ""

#: of transformers.XLMRobertaForCausalLM.forward:51
#: transformers.XLMRobertaForMaskedLM.forward:51
#: transformers.XLMRobertaForMultipleChoice.forward:51
#: transformers.XLMRobertaForQuestionAnswering.forward:51
#: transformers.XLMRobertaForSequenceClassification.forward:51
#: transformers.XLMRobertaForTokenClassification.forward:51
#: transformers.XLMRobertaModel.forward:51
msgid ""
"Whether or not to return a :class:`~transformers.file_utils.ModelOutput` "
"instead of a plain tuple."
msgstr ""

#: of transformers.XLMRobertaForCausalLM.forward:53
#: transformers.XLMRobertaModel.forward:53
msgid ""
"Sequence of hidden-states at the output of the last layer of the encoder."
" Used in the cross-attention if the model is configured as a decoder."
msgstr ""

#: of transformers.XLMRobertaForCausalLM.forward:56
#: transformers.XLMRobertaModel.forward:56
msgid ""
"Mask to avoid performing attention on the padding token indices of the "
"encoder input. This mask is used in the cross-attention if the model is "
"configured as a decoder. Mask values selected in ``[0, 1]``:  - 1 for "
"tokens that are **not masked**, - 0 for tokens that are **masked**."
msgstr ""

#: of transformers.XLMRobertaForCausalLM.forward:56
#: transformers.XLMRobertaModel.forward:56
msgid ""
"Mask to avoid performing attention on the padding token indices of the "
"encoder input. This mask is used in the cross-attention if the model is "
"configured as a decoder. Mask values selected in ``[0, 1]``:"
msgstr ""

#: of transformers.XLMRobertaForCausalLM.forward:66
#: transformers.XLMRobertaModel.forward:62
msgid ""
"Contains precomputed key and value hidden states of the attention blocks."
" Can be used to speed up decoding.  If :obj:`past_key_values` are used, "
"the user can optionally input only the last :obj:`decoder_input_ids` "
"(those that don't have their past key value states given to this model) "
"of shape :obj:`(batch_size, 1)` instead of all :obj:`decoder_input_ids` "
"of shape :obj:`(batch_size, sequence_length)`."
msgstr ""

#: of transformers.XLMRobertaForCausalLM.forward:66
#: transformers.XLMRobertaModel.forward:62
msgid ""
"Contains precomputed key and value hidden states of the attention blocks."
" Can be used to speed up decoding."
msgstr ""

#: of transformers.XLMRobertaForCausalLM.forward:68
#: transformers.XLMRobertaModel.forward:64
msgid ""
"If :obj:`past_key_values` are used, the user can optionally input only "
"the last :obj:`decoder_input_ids` (those that don't have their past key "
"value states given to this model) of shape :obj:`(batch_size, 1)` instead"
" of all :obj:`decoder_input_ids` of shape :obj:`(batch_size, "
"sequence_length)`."
msgstr ""

#: of transformers.XLMRobertaForCausalLM.forward:72
#: transformers.XLMRobertaModel.forward:68
msgid ""
"If set to :obj:`True`, :obj:`past_key_values` key value states are "
"returned and can be used to speed up decoding (see "
":obj:`past_key_values`)."
msgstr ""

#: of transformers.XLMRobertaModel.forward:72
msgid ""
"A "
":class:`~transformers.modeling_outputs.BaseModelOutputWithPoolingAndCrossAttentions`"
" or a tuple of :obj:`torch.FloatTensor` (if ``return_dict=False`` is "
"passed or when ``config.return_dict=False``) comprising various elements "
"depending on the configuration (:class:`~transformers.RobertaConfig`) and"
" inputs.  - **last_hidden_state** (:obj:`torch.FloatTensor` of shape "
":obj:`(batch_size, sequence_length, hidden_size)`) -- Sequence of hidden-"
"states at the output of the last layer of the model. - **pooler_output** "
"(:obj:`torch.FloatTensor` of shape :obj:`(batch_size, hidden_size)`) -- "
"Last layer hidden-state of the first token of the sequence "
"(classification token) further processed by a   Linear layer and a Tanh "
"activation function. The Linear layer weights are trained from the next "
"sentence   prediction (classification) objective during pretraining. - "
"**hidden_states** (:obj:`tuple(torch.FloatTensor)`, `optional`, returned "
"when ``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of "
":obj:`torch.FloatTensor` (one for the output of the embeddings + one for "
"the output of each layer)   of shape :obj:`(batch_size, sequence_length, "
"hidden_size)`.    Hidden-states of the model at the output of each layer "
"plus the initial embedding outputs. - **attentions** "
"(:obj:`tuple(torch.FloatTensor)`, `optional`, returned when "
"``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`torch.FloatTensor` "
"(one for each layer) of shape :obj:`(batch_size, num_heads,   "
"sequence_length, sequence_length)`.    Attentions weights after the "
"attention softmax, used to compute the weighted average in the self-"
"attention   heads. - **cross_attentions** "
"(:obj:`tuple(torch.FloatTensor)`, `optional`, returned when "
"``output_attentions=True`` and ``config.add_cross_attention=True`` is "
"passed or when ``config.output_attentions=True``) -- Tuple of "
":obj:`torch.FloatTensor` (one for each layer) of shape :obj:`(batch_size,"
" num_heads,   sequence_length, sequence_length)`.    Attentions weights "
"of the decoder's cross-attention layer, after the attention softmax, used"
" to compute the   weighted average in the cross-attention heads. - "
"**past_key_values** (:obj:`tuple(tuple(torch.FloatTensor))`, `optional`, "
"returned when ``use_cache=True`` is passed or when "
"``config.use_cache=True``) -- Tuple of :obj:`tuple(torch.FloatTensor)` of"
" length :obj:`config.n_layers`, with each tuple having 2 tensors   of "
"shape :obj:`(batch_size, num_heads, sequence_length, "
"embed_size_per_head)`) and optionally if   "
"``config.is_encoder_decoder=True`` 2 additional tensors of shape "
":obj:`(batch_size, num_heads,   encoder_sequence_length, "
"embed_size_per_head)`.    Contains pre-computed hidden-states (key and "
"values in the self-attention blocks and optionally if   "
"``config.is_encoder_decoder=True`` in the cross-attention blocks) that "
"can be used (see   :obj:`past_key_values` input) to speed up sequential "
"decoding."
msgstr ""

#: of transformers.XLMRobertaModel.forward:72
msgid ""
"A "
":class:`~transformers.modeling_outputs.BaseModelOutputWithPoolingAndCrossAttentions`"
" or a tuple of :obj:`torch.FloatTensor` (if ``return_dict=False`` is "
"passed or when ``config.return_dict=False``) comprising various elements "
"depending on the configuration (:class:`~transformers.RobertaConfig`) and"
" inputs."
msgstr ""

#: of transformers.XLMRobertaModel.forward:76
msgid ""
"**last_hidden_state** (:obj:`torch.FloatTensor` of shape "
":obj:`(batch_size, sequence_length, hidden_size)`) -- Sequence of hidden-"
"states at the output of the last layer of the model."
msgstr ""

#: of transformers.XLMRobertaModel.forward:77
msgid ""
"**pooler_output** (:obj:`torch.FloatTensor` of shape :obj:`(batch_size, "
"hidden_size)`) -- Last layer hidden-state of the first token of the "
"sequence (classification token) further processed by a Linear layer and a"
" Tanh activation function. The Linear layer weights are trained from the "
"next sentence prediction (classification) objective during pretraining."
msgstr ""

#: of transformers.XLMRobertaForCausalLM.forward:82
#: transformers.XLMRobertaForMaskedLM.forward:66
#: transformers.XLMRobertaForMultipleChoice.forward:66
#: transformers.XLMRobertaForQuestionAnswering.forward:69
#: transformers.XLMRobertaForSequenceClassification.forward:64
#: transformers.XLMRobertaForTokenClassification.forward:63
#: transformers.XLMRobertaModel.forward:80
msgid ""
"**hidden_states** (:obj:`tuple(torch.FloatTensor)`, `optional`, returned "
"when ``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of "
":obj:`torch.FloatTensor` (one for the output of the embeddings + one for "
"the output of each layer) of shape :obj:`(batch_size, sequence_length, "
"hidden_size)`."
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM.call:73
#: transformers.TFXLMRobertaForMultipleChoice.call:75
#: transformers.TFXLMRobertaForQuestionAnswering.call:78
#: transformers.TFXLMRobertaForSequenceClassification.call:73
#: transformers.TFXLMRobertaForTokenClassification.call:72
#: transformers.TFXLMRobertaModel.call:74
#: transformers.XLMRobertaForCausalLM.forward:85
#: transformers.XLMRobertaForMaskedLM.forward:69
#: transformers.XLMRobertaForMultipleChoice.forward:69
#: transformers.XLMRobertaForQuestionAnswering.forward:72
#: transformers.XLMRobertaForSequenceClassification.forward:67
#: transformers.XLMRobertaForTokenClassification.forward:66
#: transformers.XLMRobertaModel.forward:83
msgid ""
"Hidden-states of the model at the output of each layer plus the initial "
"embedding outputs."
msgstr ""

#: of transformers.XLMRobertaForCausalLM.forward:86
#: transformers.XLMRobertaForMaskedLM.forward:70
#: transformers.XLMRobertaForMultipleChoice.forward:70
#: transformers.XLMRobertaForQuestionAnswering.forward:73
#: transformers.XLMRobertaForSequenceClassification.forward:68
#: transformers.XLMRobertaForTokenClassification.forward:67
#: transformers.XLMRobertaModel.forward:84
msgid ""
"**attentions** (:obj:`tuple(torch.FloatTensor)`, `optional`, returned "
"when ``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`torch.FloatTensor` "
"(one for each layer) of shape :obj:`(batch_size, num_heads, "
"sequence_length, sequence_length)`."
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM.call:77
#: transformers.TFXLMRobertaForMultipleChoice.call:79
#: transformers.TFXLMRobertaForQuestionAnswering.call:82
#: transformers.TFXLMRobertaForSequenceClassification.call:77
#: transformers.TFXLMRobertaForTokenClassification.call:76
#: transformers.TFXLMRobertaModel.call:78
#: transformers.XLMRobertaForCausalLM.forward:89
#: transformers.XLMRobertaForMaskedLM.forward:73
#: transformers.XLMRobertaForMultipleChoice.forward:73
#: transformers.XLMRobertaForQuestionAnswering.forward:76
#: transformers.XLMRobertaForSequenceClassification.forward:71
#: transformers.XLMRobertaForTokenClassification.forward:70
#: transformers.XLMRobertaModel.forward:87
msgid ""
"Attentions weights after the attention softmax, used to compute the "
"weighted average in the self-attention heads."
msgstr ""

#: of transformers.XLMRobertaModel.forward:89
msgid ""
"**cross_attentions** (:obj:`tuple(torch.FloatTensor)`, `optional`, "
"returned when ``output_attentions=True`` and "
"``config.add_cross_attention=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`torch.FloatTensor` "
"(one for each layer) of shape :obj:`(batch_size, num_heads, "
"sequence_length, sequence_length)`."
msgstr ""

#: of transformers.XLMRobertaModel.forward:92
msgid ""
"Attentions weights of the decoder's cross-attention layer, after the "
"attention softmax, used to compute the weighted average in the cross-"
"attention heads."
msgstr ""

#: of transformers.XLMRobertaModel.forward:94
msgid ""
"**past_key_values** (:obj:`tuple(tuple(torch.FloatTensor))`, `optional`, "
"returned when ``use_cache=True`` is passed or when "
"``config.use_cache=True``) -- Tuple of :obj:`tuple(torch.FloatTensor)` of"
" length :obj:`config.n_layers`, with each tuple having 2 tensors of shape"
" :obj:`(batch_size, num_heads, sequence_length, embed_size_per_head)`) "
"and optionally if ``config.is_encoder_decoder=True`` 2 additional tensors"
" of shape :obj:`(batch_size, num_heads, encoder_sequence_length, "
"embed_size_per_head)`."
msgstr ""

#: of transformers.XLMRobertaModel.forward:99
msgid ""
"Contains pre-computed hidden-states (key and values in the self-attention"
" blocks and optionally if ``config.is_encoder_decoder=True`` in the "
"cross-attention blocks) that can be used (see :obj:`past_key_values` "
"input) to speed up sequential decoding."
msgstr ""

#: of transformers.XLMRobertaModel.forward:102
msgid ""
":class:`~transformers.modeling_outputs.BaseModelOutputWithPoolingAndCrossAttentions`"
" or :obj:`tuple(torch.FloatTensor)`"
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM.call:81
#: transformers.TFXLMRobertaForMultipleChoice.call:83
#: transformers.TFXLMRobertaForQuestionAnswering.call:86
#: transformers.TFXLMRobertaForSequenceClassification.call:81
#: transformers.TFXLMRobertaForTokenClassification.call:80
#: transformers.TFXLMRobertaModel.call:82
#: transformers.XLMRobertaForCausalLM.forward:104
#: transformers.XLMRobertaForMaskedLM.forward:77
#: transformers.XLMRobertaForMultipleChoice.forward:77
#: transformers.XLMRobertaForQuestionAnswering.forward:80
#: transformers.XLMRobertaForSequenceClassification.forward:75
#: transformers.XLMRobertaForTokenClassification.forward:74
#: transformers.XLMRobertaModel.forward:104
msgid "Example::"
msgstr ""

#: ../../source/model_doc/xlmroberta.rst:81
msgid "XLMRobertaForCausalLM"
msgstr ""

#: of transformers.XLMRobertaForCausalLM:1
msgid ""
"XLM-RoBERTa Model with a `language modeling` head on top for CLM fine-"
"tuning."
msgstr ""

#: of transformers.XLMRobertaForCausalLM:17
msgid ""
"This class overrides :class:`~transformers.RobertaForCausalLM`. Please "
"check the superclass for the appropriate documentation alongside usage "
"examples."
msgstr ""

#: of transformers.XLMRobertaForCausalLM.forward:1
msgid ""
"The :class:`~transformers.RobertaForCausalLM` forward method, overrides "
"the :func:`__call__` special method."
msgstr ""

#: of transformers.XLMRobertaForCausalLM.forward:62
msgid ""
"Labels for computing the left-to-right language modeling loss (next word "
"prediction). Indices should be in ``[-100, 0, ..., config.vocab_size]`` "
"(see ``input_ids`` docstring) Tokens with indices set to ``-100`` are "
"ignored (masked), the loss is only computed for the tokens with labels in"
" ``[0, ..., config.vocab_size]``"
msgstr ""

#: of transformers.XLMRobertaForCausalLM.forward:76
msgid ""
"A "
":class:`~transformers.modeling_outputs.CausalLMOutputWithCrossAttentions`"
" or a tuple of :obj:`torch.FloatTensor` (if ``return_dict=False`` is "
"passed or when ``config.return_dict=False``) comprising various elements "
"depending on the configuration (:class:`~transformers.RobertaConfig`) and"
" inputs.  - **loss** (:obj:`torch.FloatTensor` of shape :obj:`(1,)`, "
"`optional`, returned when :obj:`labels` is provided) -- Language modeling"
" loss (for next-token prediction). - **logits** (:obj:`torch.FloatTensor`"
" of shape :obj:`(batch_size, sequence_length, config.vocab_size)`) -- "
"Prediction scores of the language modeling head (scores for each "
"vocabulary token before SoftMax). - **hidden_states** "
"(:obj:`tuple(torch.FloatTensor)`, `optional`, returned when "
"``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of "
":obj:`torch.FloatTensor` (one for the output of the embeddings + one for "
"the output of each layer)   of shape :obj:`(batch_size, sequence_length, "
"hidden_size)`.    Hidden-states of the model at the output of each layer "
"plus the initial embedding outputs. - **attentions** "
"(:obj:`tuple(torch.FloatTensor)`, `optional`, returned when "
"``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`torch.FloatTensor` "
"(one for each layer) of shape :obj:`(batch_size, num_heads,   "
"sequence_length, sequence_length)`.    Attentions weights after the "
"attention softmax, used to compute the weighted average in the self-"
"attention   heads. - **cross_attentions** "
"(:obj:`tuple(torch.FloatTensor)`, `optional`, returned when "
"``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`torch.FloatTensor` "
"(one for each layer) of shape :obj:`(batch_size, num_heads,   "
"sequence_length, sequence_length)`.    Cross attentions weights after the"
" attention softmax, used to compute the weighted average in the   cross-"
"attention heads. - **past_key_values** "
"(:obj:`tuple(tuple(torch.FloatTensor))`, `optional`, returned when "
"``use_cache=True`` is passed or when ``config.use_cache=True``) -- Tuple "
"of :obj:`torch.FloatTensor` tuples of length :obj:`config.n_layers`, with"
" each tuple containing the   cached key, value states of the self-"
"attention and the cross-attention layers if model is used in   encoder-"
"decoder setting. Only relevant if ``config.is_decoder = True``.    "
"Contains pre-computed hidden-states (key and values in the attention "
"blocks) that can be used (see   :obj:`past_key_values` input) to speed up"
" sequential decoding.   Example::      >>> from transformers import "
"RobertaTokenizer, RobertaForCausalLM, RobertaConfig     >>> import torch"
"      >>> tokenizer = RobertaTokenizer.from_pretrained('roberta-base')"
"     >>> config = RobertaConfig.from_pretrained(\"roberta-base\")     >>>"
" config.is_decoder = True     >>> model = "
"RobertaForCausalLM.from_pretrained('roberta-base', config=config)      "
">>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"pt\")"
"     >>> outputs = model(**inputs)      >>> prediction_logits = "
"outputs.logits"
msgstr ""

#: of transformers.XLMRobertaForCausalLM.forward:76
msgid ""
"A "
":class:`~transformers.modeling_outputs.CausalLMOutputWithCrossAttentions`"
" or a tuple of :obj:`torch.FloatTensor` (if ``return_dict=False`` is "
"passed or when ``config.return_dict=False``) comprising various elements "
"depending on the configuration (:class:`~transformers.RobertaConfig`) and"
" inputs."
msgstr ""

#: of transformers.XLMRobertaForCausalLM.forward:80
msgid ""
"**loss** (:obj:`torch.FloatTensor` of shape :obj:`(1,)`, `optional`, "
"returned when :obj:`labels` is provided) -- Language modeling loss (for "
"next-token prediction)."
msgstr ""

#: of transformers.XLMRobertaForCausalLM.forward:81
#: transformers.XLMRobertaForMaskedLM.forward:65
msgid ""
"**logits** (:obj:`torch.FloatTensor` of shape :obj:`(batch_size, "
"sequence_length, config.vocab_size)`) -- Prediction scores of the "
"language modeling head (scores for each vocabulary token before SoftMax)."
msgstr ""

#: of transformers.XLMRobertaForCausalLM.forward:91
msgid ""
"**cross_attentions** (:obj:`tuple(torch.FloatTensor)`, `optional`, "
"returned when ``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`torch.FloatTensor` "
"(one for each layer) of shape :obj:`(batch_size, num_heads, "
"sequence_length, sequence_length)`."
msgstr ""

#: of transformers.XLMRobertaForCausalLM.forward:94
msgid ""
"Cross attentions weights after the attention softmax, used to compute the"
" weighted average in the cross-attention heads."
msgstr ""

#: of transformers.XLMRobertaForCausalLM.forward:96
msgid ""
"**past_key_values** (:obj:`tuple(tuple(torch.FloatTensor))`, `optional`, "
"returned when ``use_cache=True`` is passed or when "
"``config.use_cache=True``) -- Tuple of :obj:`torch.FloatTensor` tuples of"
" length :obj:`config.n_layers`, with each tuple containing the cached "
"key, value states of the self-attention and the cross-attention layers if"
" model is used in encoder-decoder setting. Only relevant if "
"``config.is_decoder = True``."
msgstr ""

#: of transformers.XLMRobertaForCausalLM.forward:100
msgid ""
"Contains pre-computed hidden-states (key and values in the attention "
"blocks) that can be used (see :obj:`past_key_values` input) to speed up "
"sequential decoding."
msgstr ""

#: of transformers.XLMRobertaForCausalLM.forward:118
msgid ""
":class:`~transformers.modeling_outputs.CausalLMOutputWithCrossAttentions`"
" or :obj:`tuple(torch.FloatTensor)`"
msgstr ""

#: ../../source/model_doc/xlmroberta.rst:88
msgid "XLMRobertaForMaskedLM"
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM:1
#: transformers.XLMRobertaForMaskedLM:1
msgid "XLM-RoBERTa Model with a `language modeling` head on top."
msgstr ""

#: of transformers.XLMRobertaForMaskedLM:17
msgid ""
"This class overrides :class:`~transformers.RobertaForMaskedLM`. Please "
"check the superclass for the appropriate documentation alongside usage "
"examples."
msgstr ""

#: of transformers.XLMRobertaForMaskedLM.forward:1
msgid ""
"The :class:`~transformers.RobertaForMaskedLM` forward method, overrides "
"the :func:`__call__` special method."
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM.call:59
#: transformers.XLMRobertaForMaskedLM.forward:53
msgid ""
"Labels for computing the masked language modeling loss. Indices should be"
" in ``[-100, 0, ..., config.vocab_size]`` (see ``input_ids`` docstring) "
"Tokens with indices set to ``-100`` are ignored (masked), the loss is "
"only computed for the tokens with labels in ``[0, ..., "
"config.vocab_size]``"
msgstr ""

#: of transformers.XLMRobertaForMaskedLM.forward:57
msgid "Used to hide legacy arguments that have been deprecated."
msgstr ""

#: of transformers.XLMRobertaForMaskedLM.forward:60
msgid ""
"A :class:`~transformers.modeling_outputs.MaskedLMOutput` or a tuple of "
":obj:`torch.FloatTensor` (if ``return_dict=False`` is passed or when "
"``config.return_dict=False``) comprising various elements depending on "
"the configuration (:class:`~transformers.RobertaConfig`) and inputs.  - "
"**loss** (:obj:`torch.FloatTensor` of shape :obj:`(1,)`, `optional`, "
"returned when :obj:`labels` is provided) -- Masked language modeling "
"(MLM) loss. - **logits** (:obj:`torch.FloatTensor` of shape "
":obj:`(batch_size, sequence_length, config.vocab_size)`) -- Prediction "
"scores of the language modeling head (scores for each vocabulary token "
"before SoftMax). - **hidden_states** (:obj:`tuple(torch.FloatTensor)`, "
"`optional`, returned when ``output_hidden_states=True`` is passed or when"
" ``config.output_hidden_states=True``) -- Tuple of "
":obj:`torch.FloatTensor` (one for the output of the embeddings + one for "
"the output of each layer)   of shape :obj:`(batch_size, sequence_length, "
"hidden_size)`.    Hidden-states of the model at the output of each layer "
"plus the initial embedding outputs. - **attentions** "
"(:obj:`tuple(torch.FloatTensor)`, `optional`, returned when "
"``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`torch.FloatTensor` "
"(one for each layer) of shape :obj:`(batch_size, num_heads,   "
"sequence_length, sequence_length)`.    Attentions weights after the "
"attention softmax, used to compute the weighted average in the self-"
"attention   heads."
msgstr ""

#: of transformers.XLMRobertaForMaskedLM.forward:60
msgid ""
"A :class:`~transformers.modeling_outputs.MaskedLMOutput` or a tuple of "
":obj:`torch.FloatTensor` (if ``return_dict=False`` is passed or when "
"``config.return_dict=False``) comprising various elements depending on "
"the configuration (:class:`~transformers.RobertaConfig`) and inputs."
msgstr ""

#: of transformers.XLMRobertaForMaskedLM.forward:64
msgid ""
"**loss** (:obj:`torch.FloatTensor` of shape :obj:`(1,)`, `optional`, "
"returned when :obj:`labels` is provided) -- Masked language modeling "
"(MLM) loss."
msgstr ""

#: of transformers.XLMRobertaForMaskedLM.forward:75
msgid ""
":class:`~transformers.modeling_outputs.MaskedLMOutput` or "
":obj:`tuple(torch.FloatTensor)`"
msgstr ""

#: ../../source/model_doc/xlmroberta.rst:95
msgid "XLMRobertaForSequenceClassification"
msgstr ""

#: of transformers.TFXLMRobertaForSequenceClassification:1
#: transformers.XLMRobertaForSequenceClassification:1
msgid ""
"XLM-RoBERTa Model transformer with a sequence classification/regression "
"head on top (a linear layer on top of the pooled output) e.g. for GLUE "
"tasks."
msgstr ""

#: of transformers.XLMRobertaForSequenceClassification:19
msgid ""
"This class overrides "
":class:`~transformers.RobertaForSequenceClassification`. Please check the"
" superclass for the appropriate documentation alongside usage examples."
msgstr ""

#: of transformers.XLMRobertaForSequenceClassification.forward:1
msgid ""
"The :class:`~transformers.RobertaForSequenceClassification` forward "
"method, overrides the :func:`__call__` special method."
msgstr ""

#: of transformers.TFXLMRobertaForSequenceClassification.call:59
#: transformers.XLMRobertaForSequenceClassification.forward:53
msgid ""
"Labels for computing the sequence classification/regression loss. Indices"
" should be in :obj:`[0, ..., config.num_labels - 1]`. If "
":obj:`config.num_labels == 1` a regression loss is computed (Mean-Square "
"loss), If :obj:`config.num_labels > 1` a classification loss is computed "
"(Cross-Entropy)."
msgstr ""

#: of transformers.XLMRobertaForSequenceClassification.forward:58
msgid ""
"A :class:`~transformers.modeling_outputs.SequenceClassifierOutput` or a "
"tuple of :obj:`torch.FloatTensor` (if ``return_dict=False`` is passed or "
"when ``config.return_dict=False``) comprising various elements depending "
"on the configuration (:class:`~transformers.RobertaConfig`) and inputs.  "
"- **loss** (:obj:`torch.FloatTensor` of shape :obj:`(1,)`, `optional`, "
"returned when :obj:`labels` is provided) -- Classification (or regression"
" if config.num_labels==1) loss. - **logits** (:obj:`torch.FloatTensor` of"
" shape :obj:`(batch_size, config.num_labels)`) -- Classification (or "
"regression if config.num_labels==1) scores (before SoftMax). - "
"**hidden_states** (:obj:`tuple(torch.FloatTensor)`, `optional`, returned "
"when ``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of "
":obj:`torch.FloatTensor` (one for the output of the embeddings + one for "
"the output of each layer)   of shape :obj:`(batch_size, sequence_length, "
"hidden_size)`.    Hidden-states of the model at the output of each layer "
"plus the initial embedding outputs. - **attentions** "
"(:obj:`tuple(torch.FloatTensor)`, `optional`, returned when "
"``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`torch.FloatTensor` "
"(one for each layer) of shape :obj:`(batch_size, num_heads,   "
"sequence_length, sequence_length)`.    Attentions weights after the "
"attention softmax, used to compute the weighted average in the self-"
"attention   heads."
msgstr ""

#: of transformers.XLMRobertaForSequenceClassification.forward:58
msgid ""
"A :class:`~transformers.modeling_outputs.SequenceClassifierOutput` or a "
"tuple of :obj:`torch.FloatTensor` (if ``return_dict=False`` is passed or "
"when ``config.return_dict=False``) comprising various elements depending "
"on the configuration (:class:`~transformers.RobertaConfig`) and inputs."
msgstr ""

#: of transformers.XLMRobertaForSequenceClassification.forward:62
msgid ""
"**loss** (:obj:`torch.FloatTensor` of shape :obj:`(1,)`, `optional`, "
"returned when :obj:`labels` is provided) -- Classification (or regression"
" if config.num_labels==1) loss."
msgstr ""

#: of transformers.XLMRobertaForSequenceClassification.forward:63
msgid ""
"**logits** (:obj:`torch.FloatTensor` of shape :obj:`(batch_size, "
"config.num_labels)`) -- Classification (or regression if "
"config.num_labels==1) scores (before SoftMax)."
msgstr ""

#: of transformers.XLMRobertaForSequenceClassification.forward:73
msgid ""
":class:`~transformers.modeling_outputs.SequenceClassifierOutput` or "
":obj:`tuple(torch.FloatTensor)`"
msgstr ""

#: ../../source/model_doc/xlmroberta.rst:102
msgid "XLMRobertaForMultipleChoice"
msgstr ""

#: of transformers.XLMRobertaForMultipleChoice:1
msgid ""
"XLM-RoBERTa Model with a multiple choice classification head on top (a "
"linear layer on top of the pooled output and a softmax) e.g. for "
"RocStories/SWAG tasks."
msgstr ""

#: of transformers.XLMRobertaForMultipleChoice:19
msgid ""
"This class overrides :class:`~transformers.RobertaForMultipleChoice`. "
"Please check the superclass for the appropriate documentation alongside "
"usage examples."
msgstr ""

#: of transformers.XLMRobertaForMultipleChoice.forward:1
msgid ""
"The :class:`~transformers.RobertaForMultipleChoice` forward method, "
"overrides the :func:`__call__` special method."
msgstr ""

#: of transformers.XLMRobertaForMultipleChoice.forward:53
msgid ""
"Labels for computing the multiple choice classification loss. Indices "
"should be in ``[0, ..., num_choices-1]`` where :obj:`num_choices` is the "
"size of the second dimension of the input tensors. (See :obj:`input_ids` "
"above)"
msgstr ""

#: of transformers.XLMRobertaForMultipleChoice.forward:58
msgid ""
"A :class:`~transformers.modeling_outputs.MultipleChoiceModelOutput` or a "
"tuple of :obj:`torch.FloatTensor` (if ``return_dict=False`` is passed or "
"when ``config.return_dict=False``) comprising various elements depending "
"on the configuration (:class:`~transformers.RobertaConfig`) and inputs.  "
"- **loss** (:obj:`torch.FloatTensor` of shape `(1,)`, `optional`, "
"returned when :obj:`labels` is provided) -- Classification loss. - "
"**logits** (:obj:`torch.FloatTensor` of shape :obj:`(batch_size, "
"num_choices)`) -- `num_choices` is the second dimension of the input "
"tensors. (see `input_ids` above).    Classification scores (before "
"SoftMax). - **hidden_states** (:obj:`tuple(torch.FloatTensor)`, "
"`optional`, returned when ``output_hidden_states=True`` is passed or when"
" ``config.output_hidden_states=True``) -- Tuple of "
":obj:`torch.FloatTensor` (one for the output of the embeddings + one for "
"the output of each layer)   of shape :obj:`(batch_size, sequence_length, "
"hidden_size)`.    Hidden-states of the model at the output of each layer "
"plus the initial embedding outputs. - **attentions** "
"(:obj:`tuple(torch.FloatTensor)`, `optional`, returned when "
"``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`torch.FloatTensor` "
"(one for each layer) of shape :obj:`(batch_size, num_heads,   "
"sequence_length, sequence_length)`.    Attentions weights after the "
"attention softmax, used to compute the weighted average in the self-"
"attention   heads."
msgstr ""

#: of transformers.XLMRobertaForMultipleChoice.forward:58
msgid ""
"A :class:`~transformers.modeling_outputs.MultipleChoiceModelOutput` or a "
"tuple of :obj:`torch.FloatTensor` (if ``return_dict=False`` is passed or "
"when ``config.return_dict=False``) comprising various elements depending "
"on the configuration (:class:`~transformers.RobertaConfig`) and inputs."
msgstr ""

#: of transformers.XLMRobertaForMultipleChoice.forward:62
msgid ""
"**loss** (:obj:`torch.FloatTensor` of shape `(1,)`, `optional`, returned "
"when :obj:`labels` is provided) -- Classification loss."
msgstr ""

#: of transformers.XLMRobertaForMultipleChoice.forward:63
msgid ""
"**logits** (:obj:`torch.FloatTensor` of shape :obj:`(batch_size, "
"num_choices)`) -- `num_choices` is the second dimension of the input "
"tensors. (see `input_ids` above)."
msgstr ""

#: of transformers.TFXLMRobertaForMultipleChoice.call:71
#: transformers.XLMRobertaForMultipleChoice.forward:65
msgid "Classification scores (before SoftMax)."
msgstr ""

#: of transformers.XLMRobertaForMultipleChoice.forward:75
msgid ""
":class:`~transformers.modeling_outputs.MultipleChoiceModelOutput` or "
":obj:`tuple(torch.FloatTensor)`"
msgstr ""

#: ../../source/model_doc/xlmroberta.rst:109
msgid "XLMRobertaForTokenClassification"
msgstr ""

#: of transformers.TFXLMRobertaForTokenClassification:1
#: transformers.XLMRobertaForTokenClassification:1
msgid ""
"XLM-RoBERTa Model with a token classification head on top (a linear layer"
" on top of the hidden-states output) e.g. for Named-Entity-Recognition "
"(NER) tasks."
msgstr ""

#: of transformers.XLMRobertaForTokenClassification:19
msgid ""
"This class overrides "
":class:`~transformers.RobertaForTokenClassification`. Please check the "
"superclass for the appropriate documentation alongside usage examples."
msgstr ""

#: of transformers.XLMRobertaForTokenClassification.forward:1
msgid ""
"The :class:`~transformers.RobertaForTokenClassification` forward method, "
"overrides the :func:`__call__` special method."
msgstr ""

#: of transformers.TFXLMRobertaForTokenClassification.call:59
#: transformers.XLMRobertaForTokenClassification.forward:53
msgid ""
"Labels for computing the token classification loss. Indices should be in "
"``[0, ..., config.num_labels - 1]``."
msgstr ""

#: of transformers.XLMRobertaForTokenClassification.forward:57
msgid ""
"A :class:`~transformers.modeling_outputs.TokenClassifierOutput` or a "
"tuple of :obj:`torch.FloatTensor` (if ``return_dict=False`` is passed or "
"when ``config.return_dict=False``) comprising various elements depending "
"on the configuration (:class:`~transformers.RobertaConfig`) and inputs.  "
"- **loss** (:obj:`torch.FloatTensor` of shape :obj:`(1,)`, `optional`, "
"returned when ``labels`` is provided)  -- Classification loss. - "
"**logits** (:obj:`torch.FloatTensor` of shape :obj:`(batch_size, "
"sequence_length, config.num_labels)`) -- Classification scores (before "
"SoftMax). - **hidden_states** (:obj:`tuple(torch.FloatTensor)`, "
"`optional`, returned when ``output_hidden_states=True`` is passed or when"
" ``config.output_hidden_states=True``) -- Tuple of "
":obj:`torch.FloatTensor` (one for the output of the embeddings + one for "
"the output of each layer)   of shape :obj:`(batch_size, sequence_length, "
"hidden_size)`.    Hidden-states of the model at the output of each layer "
"plus the initial embedding outputs. - **attentions** "
"(:obj:`tuple(torch.FloatTensor)`, `optional`, returned when "
"``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`torch.FloatTensor` "
"(one for each layer) of shape :obj:`(batch_size, num_heads,   "
"sequence_length, sequence_length)`.    Attentions weights after the "
"attention softmax, used to compute the weighted average in the self-"
"attention   heads."
msgstr ""

#: of transformers.XLMRobertaForTokenClassification.forward:57
msgid ""
"A :class:`~transformers.modeling_outputs.TokenClassifierOutput` or a "
"tuple of :obj:`torch.FloatTensor` (if ``return_dict=False`` is passed or "
"when ``config.return_dict=False``) comprising various elements depending "
"on the configuration (:class:`~transformers.RobertaConfig`) and inputs."
msgstr ""

#: of transformers.XLMRobertaForTokenClassification.forward:61
msgid ""
"**loss** (:obj:`torch.FloatTensor` of shape :obj:`(1,)`, `optional`, "
"returned when ``labels`` is provided)  -- Classification loss."
msgstr ""

#: of transformers.XLMRobertaForTokenClassification.forward:62
msgid ""
"**logits** (:obj:`torch.FloatTensor` of shape :obj:`(batch_size, "
"sequence_length, config.num_labels)`) -- Classification scores (before "
"SoftMax)."
msgstr ""

#: of transformers.XLMRobertaForTokenClassification.forward:72
msgid ""
":class:`~transformers.modeling_outputs.TokenClassifierOutput` or "
":obj:`tuple(torch.FloatTensor)`"
msgstr ""

#: ../../source/model_doc/xlmroberta.rst:116
msgid "XLMRobertaForQuestionAnswering"
msgstr ""

#: of transformers.TFXLMRobertaForQuestionAnswering:1
#: transformers.XLMRobertaForQuestionAnswering:1
msgid ""
"XLM-RoBERTa Model with a span classification head on top for extractive "
"question-answering tasks like SQuAD (a linear layers on top of the "
"hidden-states output to compute `span start logits` and `span end "
"logits`)."
msgstr ""

#: of transformers.XLMRobertaForQuestionAnswering:19
msgid ""
"This class overrides :class:`~transformers.RobertaForQuestionAnswering`. "
"Please check the superclass for the appropriate documentation alongside "
"usage examples."
msgstr ""

#: of transformers.XLMRobertaForQuestionAnswering.forward:1
msgid ""
"The :class:`~transformers.RobertaForQuestionAnswering` forward method, "
"overrides the :func:`__call__` special method."
msgstr ""

#: of transformers.TFXLMRobertaForQuestionAnswering.call:59
#: transformers.XLMRobertaForQuestionAnswering.forward:53
msgid ""
"Labels for position (index) of the start of the labelled span for "
"computing the token classification loss. Positions are clamped to the "
"length of the sequence (:obj:`sequence_length`). Position outside of the "
"sequence are not taken into account for computing the loss."
msgstr ""

#: of transformers.TFXLMRobertaForQuestionAnswering.call:63
#: transformers.XLMRobertaForQuestionAnswering.forward:57
msgid ""
"Labels for position (index) of the end of the labelled span for computing"
" the token classification loss. Positions are clamped to the length of "
"the sequence (:obj:`sequence_length`). Position outside of the sequence "
"are not taken into account for computing the loss."
msgstr ""

#: of transformers.XLMRobertaForQuestionAnswering.forward:62
msgid ""
"A :class:`~transformers.modeling_outputs.QuestionAnsweringModelOutput` or"
" a tuple of :obj:`torch.FloatTensor` (if ``return_dict=False`` is passed "
"or when ``config.return_dict=False``) comprising various elements "
"depending on the configuration (:class:`~transformers.RobertaConfig`) and"
" inputs.  - **loss** (:obj:`torch.FloatTensor` of shape :obj:`(1,)`, "
"`optional`, returned when :obj:`labels` is provided) -- Total span "
"extraction loss is the sum of a Cross-Entropy for the start and end "
"positions. - **start_logits** (:obj:`torch.FloatTensor` of shape "
":obj:`(batch_size, sequence_length)`) -- Span-start scores (before "
"SoftMax). - **end_logits** (:obj:`torch.FloatTensor` of shape "
":obj:`(batch_size, sequence_length)`) -- Span-end scores (before "
"SoftMax). - **hidden_states** (:obj:`tuple(torch.FloatTensor)`, "
"`optional`, returned when ``output_hidden_states=True`` is passed or when"
" ``config.output_hidden_states=True``) -- Tuple of "
":obj:`torch.FloatTensor` (one for the output of the embeddings + one for "
"the output of each layer)   of shape :obj:`(batch_size, sequence_length, "
"hidden_size)`.    Hidden-states of the model at the output of each layer "
"plus the initial embedding outputs. - **attentions** "
"(:obj:`tuple(torch.FloatTensor)`, `optional`, returned when "
"``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`torch.FloatTensor` "
"(one for each layer) of shape :obj:`(batch_size, num_heads,   "
"sequence_length, sequence_length)`.    Attentions weights after the "
"attention softmax, used to compute the weighted average in the self-"
"attention   heads."
msgstr ""

#: of transformers.XLMRobertaForQuestionAnswering.forward:62
msgid ""
"A :class:`~transformers.modeling_outputs.QuestionAnsweringModelOutput` or"
" a tuple of :obj:`torch.FloatTensor` (if ``return_dict=False`` is passed "
"or when ``config.return_dict=False``) comprising various elements "
"depending on the configuration (:class:`~transformers.RobertaConfig`) and"
" inputs."
msgstr ""

#: of transformers.XLMRobertaForQuestionAnswering.forward:66
msgid ""
"**loss** (:obj:`torch.FloatTensor` of shape :obj:`(1,)`, `optional`, "
"returned when :obj:`labels` is provided) -- Total span extraction loss is"
" the sum of a Cross-Entropy for the start and end positions."
msgstr ""

#: of transformers.XLMRobertaForQuestionAnswering.forward:67
msgid ""
"**start_logits** (:obj:`torch.FloatTensor` of shape :obj:`(batch_size, "
"sequence_length)`) -- Span-start scores (before SoftMax)."
msgstr ""

#: of transformers.XLMRobertaForQuestionAnswering.forward:68
msgid ""
"**end_logits** (:obj:`torch.FloatTensor` of shape :obj:`(batch_size, "
"sequence_length)`) -- Span-end scores (before SoftMax)."
msgstr ""

#: of transformers.XLMRobertaForQuestionAnswering.forward:78
msgid ""
":class:`~transformers.modeling_outputs.QuestionAnsweringModelOutput` or "
":obj:`tuple(torch.FloatTensor)`"
msgstr ""

#: ../../source/model_doc/xlmroberta.rst:123
msgid "TFXLMRobertaModel"
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM:3
#: transformers.TFXLMRobertaForMultipleChoice:5
#: transformers.TFXLMRobertaForQuestionAnswering:5
#: transformers.TFXLMRobertaForSequenceClassification:5
#: transformers.TFXLMRobertaForTokenClassification:5
#: transformers.TFXLMRobertaModel:3
msgid ""
"This model inherits from :class:`~transformers.TFPreTrainedModel`. Check "
"the superclass documentation for the generic methods the library "
"implements for all its model (such as downloading or saving, resizing the"
" input embeddings, pruning heads etc.)"
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM:7
#: transformers.TFXLMRobertaForMultipleChoice:9
#: transformers.TFXLMRobertaForQuestionAnswering:9
#: transformers.TFXLMRobertaForSequenceClassification:9
#: transformers.TFXLMRobertaForTokenClassification:9
#: transformers.TFXLMRobertaModel:7
msgid ""
"This model is also a `tf.keras.Model "
"<https://www.tensorflow.org/api_docs/python/tf/keras/Model>`__ subclass. "
"Use it as a regular TF 2.0 Keras Model and refer to the TF 2.0 "
"documentation for all matter related to general usage and behavior."
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM:13
#: transformers.TFXLMRobertaForMultipleChoice:15
#: transformers.TFXLMRobertaForQuestionAnswering:15
#: transformers.TFXLMRobertaForSequenceClassification:15
#: transformers.TFXLMRobertaForTokenClassification:15
#: transformers.TFXLMRobertaModel:13
msgid "TF 2.0 models accepts two formats as inputs:"
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM:15
#: transformers.TFXLMRobertaForMultipleChoice:17
#: transformers.TFXLMRobertaForQuestionAnswering:17
#: transformers.TFXLMRobertaForSequenceClassification:17
#: transformers.TFXLMRobertaForTokenClassification:17
#: transformers.TFXLMRobertaModel:15
msgid "having all inputs as keyword arguments (like PyTorch models), or"
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM:16
#: transformers.TFXLMRobertaForMultipleChoice:18
#: transformers.TFXLMRobertaForQuestionAnswering:18
#: transformers.TFXLMRobertaForSequenceClassification:18
#: transformers.TFXLMRobertaForTokenClassification:18
#: transformers.TFXLMRobertaModel:16
msgid ""
"having all inputs as a list, tuple or dict in the first positional "
"arguments."
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM:18
#: transformers.TFXLMRobertaForMultipleChoice:20
#: transformers.TFXLMRobertaForQuestionAnswering:20
#: transformers.TFXLMRobertaForSequenceClassification:20
#: transformers.TFXLMRobertaForTokenClassification:20
#: transformers.TFXLMRobertaModel:18
msgid ""
"This second option is useful when using :meth:`tf.keras.Model.fit` method"
" which currently requires having all the tensors in the first argument of"
" the model call function: :obj:`model(inputs)`."
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM:21
#: transformers.TFXLMRobertaForMultipleChoice:23
#: transformers.TFXLMRobertaForQuestionAnswering:23
#: transformers.TFXLMRobertaForSequenceClassification:23
#: transformers.TFXLMRobertaForTokenClassification:23
#: transformers.TFXLMRobertaModel:21
msgid ""
"If you choose this second option, there are three possibilities you can "
"use to gather all the input Tensors in the first positional argument :"
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM:24
#: transformers.TFXLMRobertaForMultipleChoice:26
#: transformers.TFXLMRobertaForQuestionAnswering:26
#: transformers.TFXLMRobertaForSequenceClassification:26
#: transformers.TFXLMRobertaForTokenClassification:26
#: transformers.TFXLMRobertaModel:24
msgid ""
"a single Tensor with :obj:`input_ids` only and nothing else: "
":obj:`model(inputs_ids)`"
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM:25
#: transformers.TFXLMRobertaForMultipleChoice:27
#: transformers.TFXLMRobertaForQuestionAnswering:27
#: transformers.TFXLMRobertaForSequenceClassification:27
#: transformers.TFXLMRobertaForTokenClassification:27
#: transformers.TFXLMRobertaModel:25
msgid ""
"a list of varying length with one or several input Tensors IN THE ORDER "
"given in the docstring: :obj:`model([input_ids, attention_mask])` or "
":obj:`model([input_ids, attention_mask, token_type_ids])`"
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM:27
#: transformers.TFXLMRobertaForMultipleChoice:29
#: transformers.TFXLMRobertaForQuestionAnswering:29
#: transformers.TFXLMRobertaForSequenceClassification:29
#: transformers.TFXLMRobertaForTokenClassification:29
#: transformers.TFXLMRobertaModel:27
msgid ""
"a dictionary with one or several input Tensors associated to the input "
"names given in the docstring: :obj:`model({\"input_ids\": input_ids, "
"\"token_type_ids\": token_type_ids})`"
msgstr ""

#: of transformers.TFXLMRobertaModel:36
msgid ""
"This class overrides :class:`~transformers.TFRobertaModel`. Please check "
"the superclass for the appropriate documentation alongside usage "
"examples."
msgstr ""

#: of transformers.TFXLMRobertaModel.call:1
msgid ""
"The :class:`~transformers.TFRobertaModel` forward method, overrides the "
":func:`__call__` special method."
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM.call:8
#: transformers.TFXLMRobertaForMultipleChoice.call:8
#: transformers.TFXLMRobertaForQuestionAnswering.call:8
#: transformers.TFXLMRobertaForSequenceClassification.call:8
#: transformers.TFXLMRobertaForTokenClassification.call:8
#: transformers.TFXLMRobertaModel.call:8
msgid ""
"Indices of input sequence tokens in the vocabulary.  Indices can be "
"obtained using :class:`~transformers.RobertaTokenizer`. See "
":func:`transformers.PreTrainedTokenizer.__call__` and "
":func:`transformers.PreTrainedTokenizer.encode` for details.  `What are "
"input IDs? <../glossary.html#input-ids>`__"
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM.call:10
#: transformers.TFXLMRobertaForMultipleChoice.call:10
#: transformers.TFXLMRobertaForQuestionAnswering.call:10
#: transformers.TFXLMRobertaForSequenceClassification.call:10
#: transformers.TFXLMRobertaForTokenClassification.call:10
#: transformers.TFXLMRobertaModel.call:10
msgid ""
"Indices can be obtained using :class:`~transformers.RobertaTokenizer`. "
"See :func:`transformers.PreTrainedTokenizer.__call__` and "
":func:`transformers.PreTrainedTokenizer.encode` for details."
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM.call:23
#: transformers.TFXLMRobertaForMultipleChoice.call:23
#: transformers.TFXLMRobertaForQuestionAnswering.call:23
#: transformers.TFXLMRobertaForSequenceClassification.call:23
#: transformers.TFXLMRobertaForTokenClassification.call:23
#: transformers.TFXLMRobertaModel.call:23
msgid ""
"Segment token indices to indicate first and second portions of the "
"inputs. Indices are selected in ``[0, 1]``:  - 0 corresponds to a "
"`sentence A` token, - 1 corresponds to a `sentence B` token.  `What are "
"token type IDs? <../glossary.html#token-type-ids>`__"
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM.call:29
#: transformers.TFXLMRobertaForMultipleChoice.call:29
#: transformers.TFXLMRobertaForQuestionAnswering.call:29
#: transformers.TFXLMRobertaForSequenceClassification.call:29
#: transformers.TFXLMRobertaForTokenClassification.call:29
#: transformers.TFXLMRobertaModel.call:29
msgid "`What are token type IDs? <../glossary.html#token-type-ids>`__"
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM.call:31
#: transformers.TFXLMRobertaForMultipleChoice.call:31
#: transformers.TFXLMRobertaForQuestionAnswering.call:31
#: transformers.TFXLMRobertaForSequenceClassification.call:31
#: transformers.TFXLMRobertaForTokenClassification.call:31
#: transformers.TFXLMRobertaModel.call:31
msgid ""
"Indices of positions of each input sequence tokens in the position "
"embeddings. Selected in the range ``[0, config.max_position_embeddings - "
"1]``.  `What are position IDs? <../glossary.html#position-ids>`__"
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM.call:34
#: transformers.TFXLMRobertaForMultipleChoice.call:34
#: transformers.TFXLMRobertaForQuestionAnswering.call:34
#: transformers.TFXLMRobertaForSequenceClassification.call:34
#: transformers.TFXLMRobertaForTokenClassification.call:34
#: transformers.TFXLMRobertaModel.call:34
msgid "`What are position IDs? <../glossary.html#position-ids>`__"
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM.call:45
#: transformers.TFXLMRobertaForMultipleChoice.call:45
#: transformers.TFXLMRobertaForQuestionAnswering.call:45
#: transformers.TFXLMRobertaForSequenceClassification.call:45
#: transformers.TFXLMRobertaForTokenClassification.call:45
#: transformers.TFXLMRobertaModel.call:45
msgid ""
"Whether or not to return the attentions tensors of all attention layers. "
"See ``attentions`` under returned tensors for more detail. This argument "
"can be used only in eager mode, in graph mode the value in the config "
"will be used instead."
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM.call:49
#: transformers.TFXLMRobertaForMultipleChoice.call:49
#: transformers.TFXLMRobertaForQuestionAnswering.call:49
#: transformers.TFXLMRobertaForSequenceClassification.call:49
#: transformers.TFXLMRobertaForTokenClassification.call:49
#: transformers.TFXLMRobertaModel.call:49
msgid ""
"Whether or not to return the hidden states of all layers. See "
"``hidden_states`` under returned tensors for more detail. This argument "
"can be used only in eager mode, in graph mode the value in the config "
"will be used instead."
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM.call:53
#: transformers.TFXLMRobertaForMultipleChoice.call:53
#: transformers.TFXLMRobertaForQuestionAnswering.call:53
#: transformers.TFXLMRobertaForSequenceClassification.call:53
#: transformers.TFXLMRobertaForTokenClassification.call:53
#: transformers.TFXLMRobertaModel.call:53
msgid ""
"Whether or not to return a :class:`~transformers.file_utils.ModelOutput` "
"instead of a plain tuple. This argument can be used in eager mode, in "
"graph mode the value will always be set to True."
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM.call:56
#: transformers.TFXLMRobertaForMultipleChoice.call:56
#: transformers.TFXLMRobertaForQuestionAnswering.call:56
#: transformers.TFXLMRobertaForSequenceClassification.call:56
#: transformers.TFXLMRobertaForTokenClassification.call:56
#: transformers.TFXLMRobertaModel.call:56
msgid ""
"Whether or not to use the model in training mode (some modules like "
"dropout modules have different behaviors between training and "
"evaluation)."
msgstr ""

#: of transformers.TFXLMRobertaModel.call:60
msgid ""
"A :class:`~transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling`"
" or a tuple of :obj:`tf.Tensor` (if ``return_dict=False`` is passed or "
"when ``config.return_dict=False``) comprising various elements depending "
"on the configuration (:class:`~transformers.RobertaConfig`) and inputs.  "
"- **last_hidden_state** (:obj:`tf.Tensor` of shape :obj:`(batch_size, "
"sequence_length, hidden_size)`) -- Sequence of hidden-states at the "
"output of the last layer of the model. - **pooler_output** "
"(:obj:`tf.Tensor` of shape :obj:`(batch_size, hidden_size)`) -- Last "
"layer hidden-state of the first token of the sequence (classification "
"token) further processed by a   Linear layer and a Tanh activation "
"function. The Linear layer weights are trained from the next sentence   "
"prediction (classification) objective during pretraining.    This output "
"is usually *not* a good summary of the semantic content of the input, "
"you're often better with   averaging or pooling the sequence of hidden-"
"states for the whole input sequence. - **hidden_states** "
"(:obj:`tuple(tf.Tensor)`, `optional`, returned when "
"``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of :obj:`tf.Tensor` (one "
"for the output of the embeddings + one for the output of each layer) of"
"   shape :obj:`(batch_size, sequence_length, hidden_size)`.    Hidden-"
"states of the model at the output of each layer plus the initial "
"embedding outputs. - **attentions** (:obj:`tuple(tf.Tensor)`, `optional`,"
" returned when ``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`tf.Tensor` (one for "
"each layer) of shape :obj:`(batch_size, num_heads, sequence_length,   "
"sequence_length)`.    Attentions weights after the attention softmax, "
"used to compute the weighted average in the self-attention   heads."
msgstr ""

#: of transformers.TFXLMRobertaModel.call:60
msgid ""
"A :class:`~transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling`"
" or a tuple of :obj:`tf.Tensor` (if ``return_dict=False`` is passed or "
"when ``config.return_dict=False``) comprising various elements depending "
"on the configuration (:class:`~transformers.RobertaConfig`) and inputs."
msgstr ""

#: of transformers.TFXLMRobertaModel.call:64
msgid ""
"**last_hidden_state** (:obj:`tf.Tensor` of shape :obj:`(batch_size, "
"sequence_length, hidden_size)`) -- Sequence of hidden-states at the "
"output of the last layer of the model."
msgstr ""

#: of transformers.TFXLMRobertaModel.call:65
msgid ""
"**pooler_output** (:obj:`tf.Tensor` of shape :obj:`(batch_size, "
"hidden_size)`) -- Last layer hidden-state of the first token of the "
"sequence (classification token) further processed by a Linear layer and a"
" Tanh activation function. The Linear layer weights are trained from the "
"next sentence prediction (classification) objective during pretraining."
msgstr ""

#: of transformers.TFXLMRobertaModel.call:69
msgid ""
"This output is usually *not* a good summary of the semantic content of "
"the input, you're often better with averaging or pooling the sequence of "
"hidden-states for the whole input sequence."
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM.call:70
#: transformers.TFXLMRobertaForMultipleChoice.call:72
#: transformers.TFXLMRobertaForQuestionAnswering.call:75
#: transformers.TFXLMRobertaForSequenceClassification.call:70
#: transformers.TFXLMRobertaForTokenClassification.call:69
#: transformers.TFXLMRobertaModel.call:71
msgid ""
"**hidden_states** (:obj:`tuple(tf.Tensor)`, `optional`, returned when "
"``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of :obj:`tf.Tensor` (one "
"for the output of the embeddings + one for the output of each layer) of "
"shape :obj:`(batch_size, sequence_length, hidden_size)`."
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM.call:74
#: transformers.TFXLMRobertaForMultipleChoice.call:76
#: transformers.TFXLMRobertaForQuestionAnswering.call:79
#: transformers.TFXLMRobertaForSequenceClassification.call:74
#: transformers.TFXLMRobertaForTokenClassification.call:73
#: transformers.TFXLMRobertaModel.call:75
msgid ""
"**attentions** (:obj:`tuple(tf.Tensor)`, `optional`, returned when "
"``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`tf.Tensor` (one for "
"each layer) of shape :obj:`(batch_size, num_heads, sequence_length, "
"sequence_length)`."
msgstr ""

#: of transformers.TFXLMRobertaModel.call:80
msgid ""
":class:`~transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling` "
"or :obj:`tuple(tf.Tensor)`"
msgstr ""

#: ../../source/model_doc/xlmroberta.rst:130
msgid "TFXLMRobertaForMaskedLM"
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM:36
msgid ""
"This class overrides :class:`~transformers.TFRobertaForMaskedLM`. Please "
"check the superclass for the appropriate documentation alongside usage "
"examples."
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM.call:1
msgid ""
"The :class:`~transformers.TFRobertaForMaskedLM` forward method, overrides"
" the :func:`__call__` special method."
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM.call:64
msgid ""
"A :class:`~transformers.modeling_tf_outputs.TFMaskedLMOutput` or a tuple "
"of :obj:`tf.Tensor` (if ``return_dict=False`` is passed or when "
"``config.return_dict=False``) comprising various elements depending on "
"the configuration (:class:`~transformers.RobertaConfig`) and inputs.  - "
"**loss** (:obj:`tf.Tensor` of shape :obj:`(n,)`, `optional`, where n is "
"the number of non-masked labels, returned when :obj:`labels` is provided)"
" -- Masked language modeling (MLM) loss. - **logits** (:obj:`tf.Tensor` "
"of shape :obj:`(batch_size, sequence_length, config.vocab_size)`) -- "
"Prediction scores of the language modeling head (scores for each "
"vocabulary token before SoftMax). - **hidden_states** "
"(:obj:`tuple(tf.Tensor)`, `optional`, returned when "
"``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of :obj:`tf.Tensor` (one "
"for the output of the embeddings + one for the output of each layer) of"
"   shape :obj:`(batch_size, sequence_length, hidden_size)`.    Hidden-"
"states of the model at the output of each layer plus the initial "
"embedding outputs. - **attentions** (:obj:`tuple(tf.Tensor)`, `optional`,"
" returned when ``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`tf.Tensor` (one for "
"each layer) of shape :obj:`(batch_size, num_heads, sequence_length,   "
"sequence_length)`.    Attentions weights after the attention softmax, "
"used to compute the weighted average in the self-attention   heads."
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM.call:64
msgid ""
"A :class:`~transformers.modeling_tf_outputs.TFMaskedLMOutput` or a tuple "
"of :obj:`tf.Tensor` (if ``return_dict=False`` is passed or when "
"``config.return_dict=False``) comprising various elements depending on "
"the configuration (:class:`~transformers.RobertaConfig`) and inputs."
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM.call:68
msgid ""
"**loss** (:obj:`tf.Tensor` of shape :obj:`(n,)`, `optional`, where n is "
"the number of non-masked labels, returned when :obj:`labels` is provided)"
" -- Masked language modeling (MLM) loss."
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM.call:69
msgid ""
"**logits** (:obj:`tf.Tensor` of shape :obj:`(batch_size, sequence_length,"
" config.vocab_size)`) -- Prediction scores of the language modeling head "
"(scores for each vocabulary token before SoftMax)."
msgstr ""

#: of transformers.TFXLMRobertaForMaskedLM.call:79
msgid ""
":class:`~transformers.modeling_tf_outputs.TFMaskedLMOutput` or "
":obj:`tuple(tf.Tensor)`"
msgstr ""

#: ../../source/model_doc/xlmroberta.rst:137
msgid "TFXLMRobertaForSequenceClassification"
msgstr ""

#: of transformers.TFXLMRobertaForSequenceClassification:38
msgid ""
"This class overrides "
":class:`~transformers.TFRobertaForSequenceClassification`. Please check "
"the superclass for the appropriate documentation alongside usage "
"examples."
msgstr ""

#: of transformers.TFXLMRobertaForSequenceClassification.call:1
msgid ""
"The :class:`~transformers.TFRobertaForSequenceClassification` forward "
"method, overrides the :func:`__call__` special method."
msgstr ""

#: of transformers.TFXLMRobertaForSequenceClassification.call:64
msgid ""
"A :class:`~transformers.modeling_tf_outputs.TFSequenceClassifierOutput` "
"or a tuple of :obj:`tf.Tensor` (if ``return_dict=False`` is passed or "
"when ``config.return_dict=False``) comprising various elements depending "
"on the configuration (:class:`~transformers.RobertaConfig`) and inputs.  "
"- **loss** (:obj:`tf.Tensor` of shape :obj:`(batch_size, )`, `optional`, "
"returned when :obj:`labels` is provided) -- Classification (or regression"
" if config.num_labels==1) loss. - **logits** (:obj:`tf.Tensor` of shape "
":obj:`(batch_size, config.num_labels)`) -- Classification (or regression "
"if config.num_labels==1) scores (before SoftMax). - **hidden_states** "
"(:obj:`tuple(tf.Tensor)`, `optional`, returned when "
"``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of :obj:`tf.Tensor` (one "
"for the output of the embeddings + one for the output of each layer) of"
"   shape :obj:`(batch_size, sequence_length, hidden_size)`.    Hidden-"
"states of the model at the output of each layer plus the initial "
"embedding outputs. - **attentions** (:obj:`tuple(tf.Tensor)`, `optional`,"
" returned when ``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`tf.Tensor` (one for "
"each layer) of shape :obj:`(batch_size, num_heads, sequence_length,   "
"sequence_length)`.    Attentions weights after the attention softmax, "
"used to compute the weighted average in the self-attention   heads."
msgstr ""

#: of transformers.TFXLMRobertaForSequenceClassification.call:64
msgid ""
"A :class:`~transformers.modeling_tf_outputs.TFSequenceClassifierOutput` "
"or a tuple of :obj:`tf.Tensor` (if ``return_dict=False`` is passed or "
"when ``config.return_dict=False``) comprising various elements depending "
"on the configuration (:class:`~transformers.RobertaConfig`) and inputs."
msgstr ""

#: of transformers.TFXLMRobertaForSequenceClassification.call:68
msgid ""
"**loss** (:obj:`tf.Tensor` of shape :obj:`(batch_size, )`, `optional`, "
"returned when :obj:`labels` is provided) -- Classification (or regression"
" if config.num_labels==1) loss."
msgstr ""

#: of transformers.TFXLMRobertaForSequenceClassification.call:69
msgid ""
"**logits** (:obj:`tf.Tensor` of shape :obj:`(batch_size, "
"config.num_labels)`) -- Classification (or regression if "
"config.num_labels==1) scores (before SoftMax)."
msgstr ""

#: of transformers.TFXLMRobertaForSequenceClassification.call:79
msgid ""
":class:`~transformers.modeling_tf_outputs.TFSequenceClassifierOutput` or "
":obj:`tuple(tf.Tensor)`"
msgstr ""

#: ../../source/model_doc/xlmroberta.rst:144
msgid "TFXLMRobertaForMultipleChoice"
msgstr ""

#: of transformers.TFXLMRobertaForMultipleChoice:1
msgid ""
"Roberta Model with a multiple choice classification head on top (a linear"
" layer on top of the pooled output and a softmax) e.g. for "
"RocStories/SWAG tasks."
msgstr ""

#: of transformers.TFXLMRobertaForMultipleChoice:38
msgid ""
"This class overrides :class:`~transformers.TFRobertaForMultipleChoice`. "
"Please check the superclass for the appropriate documentation alongside "
"usage examples."
msgstr ""

#: of transformers.TFXLMRobertaForMultipleChoice.call:1
msgid ""
"The :class:`~transformers.TFRobertaForMultipleChoice` forward method, "
"overrides the :func:`__call__` special method."
msgstr ""

#: of transformers.TFXLMRobertaForMultipleChoice.call:59
msgid ""
"Labels for computing the multiple choice classification loss. Indices "
"should be in ``[0, ..., num_choices]`` where :obj:`num_choices` is the "
"size of the second dimension of the input tensors. (See :obj:`input_ids` "
"above)"
msgstr ""

#: of transformers.TFXLMRobertaForMultipleChoice.call:64
msgid ""
"A :class:`~transformers.modeling_tf_outputs.TFMultipleChoiceModelOutput` "
"or a tuple of :obj:`tf.Tensor` (if ``return_dict=False`` is passed or "
"when ``config.return_dict=False``) comprising various elements depending "
"on the configuration (:class:`~transformers.RobertaConfig`) and inputs.  "
"- **loss** (:obj:`tf.Tensor` of shape `(batch_size, )`, `optional`, "
"returned when :obj:`labels` is provided) -- Classification loss. - "
"**logits** (:obj:`tf.Tensor` of shape :obj:`(batch_size, num_choices)`) "
"-- `num_choices` is the second dimension of the input tensors. (see "
"`input_ids` above).    Classification scores (before SoftMax). - "
"**hidden_states** (:obj:`tuple(tf.Tensor)`, `optional`, returned when "
"``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of :obj:`tf.Tensor` (one "
"for the output of the embeddings + one for the output of each layer) of"
"   shape :obj:`(batch_size, sequence_length, hidden_size)`.    Hidden-"
"states of the model at the output of each layer plus the initial "
"embedding outputs. - **attentions** (:obj:`tuple(tf.Tensor)`, `optional`,"
" returned when ``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`tf.Tensor` (one for "
"each layer) of shape :obj:`(batch_size, num_heads, sequence_length,   "
"sequence_length)`.    Attentions weights after the attention softmax, "
"used to compute the weighted average in the self-attention   heads."
msgstr ""

#: of transformers.TFXLMRobertaForMultipleChoice.call:64
msgid ""
"A :class:`~transformers.modeling_tf_outputs.TFMultipleChoiceModelOutput` "
"or a tuple of :obj:`tf.Tensor` (if ``return_dict=False`` is passed or "
"when ``config.return_dict=False``) comprising various elements depending "
"on the configuration (:class:`~transformers.RobertaConfig`) and inputs."
msgstr ""

#: of transformers.TFXLMRobertaForMultipleChoice.call:68
msgid ""
"**loss** (:obj:`tf.Tensor` of shape `(batch_size, )`, `optional`, "
"returned when :obj:`labels` is provided) -- Classification loss."
msgstr ""

#: of transformers.TFXLMRobertaForMultipleChoice.call:69
msgid ""
"**logits** (:obj:`tf.Tensor` of shape :obj:`(batch_size, num_choices)`) "
"-- `num_choices` is the second dimension of the input tensors. (see "
"`input_ids` above)."
msgstr ""

#: of transformers.TFXLMRobertaForMultipleChoice.call:81
msgid ""
":class:`~transformers.modeling_tf_outputs.TFMultipleChoiceModelOutput` or"
" :obj:`tuple(tf.Tensor)`"
msgstr ""

#: ../../source/model_doc/xlmroberta.rst:151
msgid "TFXLMRobertaForTokenClassification"
msgstr ""

#: of transformers.TFXLMRobertaForTokenClassification:38
msgid ""
"This class overrides "
":class:`~transformers.TFRobertaForTokenClassification`. Please check the "
"superclass for the appropriate documentation alongside usage examples."
msgstr ""

#: of transformers.TFXLMRobertaForTokenClassification.call:1
msgid ""
"The :class:`~transformers.TFRobertaForTokenClassification` forward "
"method, overrides the :func:`__call__` special method."
msgstr ""

#: of transformers.TFXLMRobertaForTokenClassification.call:63
msgid ""
"A :class:`~transformers.modeling_tf_outputs.TFTokenClassifierOutput` or a"
" tuple of :obj:`tf.Tensor` (if ``return_dict=False`` is passed or when "
"``config.return_dict=False``) comprising various elements depending on "
"the configuration (:class:`~transformers.RobertaConfig`) and inputs.  - "
"**loss** (:obj:`tf.Tensor` of shape :obj:`(n,)`, `optional`, where n is "
"the number of unmasked labels, returned when ``labels`` is provided)  -- "
"Classification loss. - **logits** (:obj:`tf.Tensor` of shape "
":obj:`(batch_size, sequence_length, config.num_labels)`) -- "
"Classification scores (before SoftMax). - **hidden_states** "
"(:obj:`tuple(tf.Tensor)`, `optional`, returned when "
"``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of :obj:`tf.Tensor` (one "
"for the output of the embeddings + one for the output of each layer) of"
"   shape :obj:`(batch_size, sequence_length, hidden_size)`.    Hidden-"
"states of the model at the output of each layer plus the initial "
"embedding outputs. - **attentions** (:obj:`tuple(tf.Tensor)`, `optional`,"
" returned when ``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`tf.Tensor` (one for "
"each layer) of shape :obj:`(batch_size, num_heads, sequence_length,   "
"sequence_length)`.    Attentions weights after the attention softmax, "
"used to compute the weighted average in the self-attention   heads."
msgstr ""

#: of transformers.TFXLMRobertaForTokenClassification.call:63
msgid ""
"A :class:`~transformers.modeling_tf_outputs.TFTokenClassifierOutput` or a"
" tuple of :obj:`tf.Tensor` (if ``return_dict=False`` is passed or when "
"``config.return_dict=False``) comprising various elements depending on "
"the configuration (:class:`~transformers.RobertaConfig`) and inputs."
msgstr ""

#: of transformers.TFXLMRobertaForTokenClassification.call:67
msgid ""
"**loss** (:obj:`tf.Tensor` of shape :obj:`(n,)`, `optional`, where n is "
"the number of unmasked labels, returned when ``labels`` is provided)  -- "
"Classification loss."
msgstr ""

#: of transformers.TFXLMRobertaForTokenClassification.call:68
msgid ""
"**logits** (:obj:`tf.Tensor` of shape :obj:`(batch_size, sequence_length,"
" config.num_labels)`) -- Classification scores (before SoftMax)."
msgstr ""

#: of transformers.TFXLMRobertaForTokenClassification.call:78
msgid ""
":class:`~transformers.modeling_tf_outputs.TFTokenClassifierOutput` or "
":obj:`tuple(tf.Tensor)`"
msgstr ""

#: ../../source/model_doc/xlmroberta.rst:158
msgid "TFXLMRobertaForQuestionAnswering"
msgstr ""

#: of transformers.TFXLMRobertaForQuestionAnswering:36
msgid "Parameters:"
msgstr ""

#: of transformers.TFXLMRobertaForQuestionAnswering:36
msgid ""
"config (:class:`~transformers.XLMRobertaConfig`): Model configuration "
"class with all the parameters of the"
msgstr ""

#: of transformers.TFXLMRobertaForQuestionAnswering:34
msgid ""
"model. Initializing with a config file does not load the weights "
"associated with the model, only the configuration. Check out the "
":meth:`~transformers.PreTrainedModel.from_pretrained` method to load the "
"model weights."
msgstr ""

#: of transformers.TFXLMRobertaForQuestionAnswering:38
msgid ""
"This class overrides "
":class:`~transformers.TFRobertaForQuestionAnsweringSimple`. Please check "
"the superclass for the appropriate documentation alongside usage "
"examples."
msgstr ""

#: of transformers.TFXLMRobertaForQuestionAnswering.call:1
msgid ""
"The :class:`~transformers.TFRobertaForQuestionAnswering` forward method, "
"overrides the :func:`__call__` special method."
msgstr ""

#: of transformers.TFXLMRobertaForQuestionAnswering.call:68
msgid ""
"A "
":class:`~transformers.modeling_tf_outputs.TFQuestionAnsweringModelOutput`"
" or a tuple of :obj:`tf.Tensor` (if ``return_dict=False`` is passed or "
"when ``config.return_dict=False``) comprising various elements depending "
"on the configuration (:class:`~transformers.RobertaConfig`) and inputs.  "
"- **loss** (:obj:`tf.Tensor` of shape :obj:`(batch_size, )`, `optional`, "
"returned when :obj:`start_positions` and :obj:`end_positions` are "
"provided) -- Total span extraction loss is the sum of a Cross-Entropy for"
" the start and end positions. - **start_logits** (:obj:`tf.Tensor` of "
"shape :obj:`(batch_size, sequence_length)`) -- Span-start scores (before "
"SoftMax). - **end_logits** (:obj:`tf.Tensor` of shape :obj:`(batch_size, "
"sequence_length)`) -- Span-end scores (before SoftMax). - "
"**hidden_states** (:obj:`tuple(tf.Tensor)`, `optional`, returned when "
"``output_hidden_states=True`` is passed or when "
"``config.output_hidden_states=True``) -- Tuple of :obj:`tf.Tensor` (one "
"for the output of the embeddings + one for the output of each layer) of"
"   shape :obj:`(batch_size, sequence_length, hidden_size)`.    Hidden-"
"states of the model at the output of each layer plus the initial "
"embedding outputs. - **attentions** (:obj:`tuple(tf.Tensor)`, `optional`,"
" returned when ``output_attentions=True`` is passed or when "
"``config.output_attentions=True``) -- Tuple of :obj:`tf.Tensor` (one for "
"each layer) of shape :obj:`(batch_size, num_heads, sequence_length,   "
"sequence_length)`.    Attentions weights after the attention softmax, "
"used to compute the weighted average in the self-attention   heads."
msgstr ""

#: of transformers.TFXLMRobertaForQuestionAnswering.call:68
msgid ""
"A "
":class:`~transformers.modeling_tf_outputs.TFQuestionAnsweringModelOutput`"
" or a tuple of :obj:`tf.Tensor` (if ``return_dict=False`` is passed or "
"when ``config.return_dict=False``) comprising various elements depending "
"on the configuration (:class:`~transformers.RobertaConfig`) and inputs."
msgstr ""

#: of transformers.TFXLMRobertaForQuestionAnswering.call:72
msgid ""
"**loss** (:obj:`tf.Tensor` of shape :obj:`(batch_size, )`, `optional`, "
"returned when :obj:`start_positions` and :obj:`end_positions` are "
"provided) -- Total span extraction loss is the sum of a Cross-Entropy for"
" the start and end positions."
msgstr ""

#: of transformers.TFXLMRobertaForQuestionAnswering.call:73
msgid ""
"**start_logits** (:obj:`tf.Tensor` of shape :obj:`(batch_size, "
"sequence_length)`) -- Span-start scores (before SoftMax)."
msgstr ""

#: of transformers.TFXLMRobertaForQuestionAnswering.call:74
msgid ""
"**end_logits** (:obj:`tf.Tensor` of shape :obj:`(batch_size, "
"sequence_length)`) -- Span-end scores (before SoftMax)."
msgstr ""

#: of transformers.TFXLMRobertaForQuestionAnswering.call:84
msgid ""
":class:`~transformers.modeling_tf_outputs.TFQuestionAnsweringModelOutput`"
" or :obj:`tuple(tf.Tensor)`"
msgstr ""

