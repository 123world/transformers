# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, The Hugging Face Team, Licenced under the Apache
# License, Version 2.0
# This file is distributed under the same license as the transformers
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: transformers \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-30 16:44+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/model_doc/xlmprophetnet.rst:14
msgid "XLM-ProphetNet"
msgstr ""

#: ../../source/model_doc/xlmprophetnet.rst:16
msgid ""
"**DISCLAIMER:** If you see something strange, file a `Github Issue "
"<https://github.com/huggingface/transformers/issues/new?assignees=&labels=&template"
"=bug-report.md&title>`__ and assign @patrickvonplaten"
msgstr ""

#: ../../source/model_doc/xlmprophetnet.rst:22
msgid "Overview"
msgstr ""

#: ../../source/model_doc/xlmprophetnet.rst:24
msgid ""
"The XLM-ProphetNet model was proposed in `ProphetNet: Predicting Future "
"N-gram for Sequence-to-Sequence Pre-training, "
"<https://arxiv.org/abs/2001.04063>`__ by Yu Yan, Weizhen Qi, Yeyun Gong, "
"Dayiheng Liu, Nan Duan, Jiusheng Chen, Ruofei Zhang, Ming Zhou on 13 Jan,"
" 2020."
msgstr ""

#: ../../source/model_doc/xlmprophetnet.rst:28
msgid ""
"XLM-ProphetNet is an encoder-decoder model and can predict n-future "
"tokens for \"ngram\" language modeling instead of just the next token. "
"Its architecture is identical to ProhpetNet, but the model was trained on"
" the multi-lingual \"wiki100\" Wikipedia dump."
msgstr ""

#: ../../source/model_doc/xlmprophetnet.rst:32
msgid "The abstract from the paper is the following:"
msgstr ""

#: ../../source/model_doc/xlmprophetnet.rst:34
msgid ""
"*In this paper, we present a new sequence-to-sequence pretraining model "
"called ProphetNet, which introduces a novel self-supervised objective "
"named future n-gram prediction and the proposed n-stream self-attention "
"mechanism. Instead of the optimization of one-step ahead prediction in "
"traditional sequence-to-sequence model, the ProphetNet is optimized by "
"n-step ahead prediction which predicts the next n tokens simultaneously "
"based on previous context tokens at each time step. The future n-gram "
"prediction explicitly encourages the model to plan for the future tokens "
"and prevent overfitting on strong local correlations. We pre-train "
"ProphetNet using a base scale dataset (16GB) and a large scale dataset "
"(160GB) respectively. Then we conduct experiments on CNN/DailyMail, "
"Gigaword, and SQuAD 1.1 benchmarks for abstractive summarization and "
"question generation tasks. Experimental results show that ProphetNet "
"achieves new state-of-the-art results on all these datasets compared to "
"the models using the same scale pretraining corpus.*"
msgstr ""

#: ../../source/model_doc/xlmprophetnet.rst:44
msgid ""
"The Authors' code can be found `here "
"<https://github.com/microsoft/ProphetNet>`__."
msgstr ""

#: ../../source/model_doc/xlmprophetnet.rst:47
msgid "XLMProphetNetConfig"
msgstr ""

#: of transformers.XLMProphetNetConfig:1
msgid ""
"This class overrides :class:`~transformers.ProphetNetConfig`. Please "
"check the superclass for the appropriate documentation alongside usage "
"examples."
msgstr ""

#: ../../source/model_doc/xlmprophetnet.rst:54
msgid "XLMProphetNetTokenizer"
msgstr ""

#: of transformers.XLMProphetNetTokenizer:1
msgid ""
"Adapted from :class:`~transformers.RobertaTokenizer` and "
":class:`~transformers.XLNetTokenizer`. Based on `SentencePiece "
"<https://github.com/google/sentencepiece>`__."
msgstr ""

#: of transformers.XLMProphetNetTokenizer:4
msgid ""
"This tokenizer inherits from :class:`~transformers.PreTrainedTokenizer` "
"which contains most of the main methods. Users should refer to this "
"superclass for more information regarding those methods."
msgstr ""

#: of transformers.XLMProphetNetTokenizer
#: transformers.XLMProphetNetTokenizer.build_inputs_with_special_tokens
#: transformers.XLMProphetNetTokenizer.create_token_type_ids_from_sequences
#: transformers.XLMProphetNetTokenizer.get_special_tokens_mask
#: transformers.XLMProphetNetTokenizer.save_vocabulary
msgid "Parameters"
msgstr ""

#: of transformers.XLMProphetNetTokenizer:7
msgid "Path to the vocabulary file."
msgstr ""

#: of transformers.XLMProphetNetTokenizer:9
msgid ""
"The beginning of sequence token that was used during pretraining. Can be "
"used a sequence classifier token.  .. note::      When building a "
"sequence using special tokens, this is not the token that is used for the"
" beginning of     sequence. The token used is the :obj:`cls_token`."
msgstr ""

#: of transformers.XLMProphetNetTokenizer:9
msgid ""
"The beginning of sequence token that was used during pretraining. Can be "
"used a sequence classifier token."
msgstr ""

#: of transformers.XLMProphetNetTokenizer:13
msgid ""
"When building a sequence using special tokens, this is not the token that"
" is used for the beginning of sequence. The token used is the "
":obj:`cls_token`."
msgstr ""

#: of transformers.XLMProphetNetTokenizer:16
msgid ""
"The end of sequence token.  .. note::      When building a sequence using"
" special tokens, this is not the token that is used for the end of     "
"sequence. The token used is the :obj:`sep_token`."
msgstr ""

#: of transformers.XLMProphetNetTokenizer:16
msgid "The end of sequence token."
msgstr ""

#: of transformers.XLMProphetNetTokenizer:20
msgid ""
"When building a sequence using special tokens, this is not the token that"
" is used for the end of sequence. The token used is the :obj:`sep_token`."
msgstr ""

#: of transformers.XLMProphetNetTokenizer:23
msgid ""
"The separator token, which is used when building a sequence from multiple"
" sequences, e.g. two sequences for sequence classification or for a text "
"and a question for question answering. It is also used as the last token "
"of a sequence built with special tokens."
msgstr ""

#: of transformers.XLMProphetNetTokenizer:27
msgid ""
"The classifier token which is used when doing sequence classification "
"(classification of the whole sequence instead of per-token "
"classification). It is the first token of the sequence when built with "
"special tokens."
msgstr ""

#: of transformers.XLMProphetNetTokenizer:30
msgid ""
"The unknown token. A token that is not in the vocabulary cannot be "
"converted to an ID and is set to be this token instead."
msgstr ""

#: of transformers.XLMProphetNetTokenizer:33
msgid ""
"The token used for padding, for example when batching sequences of "
"different lengths."
msgstr ""

#: of transformers.XLMProphetNetTokenizer:35
msgid ""
"The token used for masking values. This is the token used when training "
"this model with masked language modeling. This is the token which the "
"model will try to predict."
msgstr ""

#: of transformers.XLMProphetNetTokenizer:38
msgid "Additional special tokens used by the tokenizer."
msgstr ""

#: of transformers.XLMProphetNetTokenizer:40
msgid ""
"Will be passed to the ``SentencePieceProcessor.__init__()`` method. The "
"`Python wrapper for SentencePiece "
"<https://github.com/google/sentencepiece/tree/master/python>`__ can be "
"used, among other things, to set:  - ``enable_sampling``: Enable subword "
"regularization. - ``nbest_size``: Sampling parameters for unigram. "
"Invalid for BPE-Dropout.    - ``nbest_size = {0,1}``: No sampling is "
"performed.   - ``nbest_size > 1``: samples from the nbest_size results."
"   - ``nbest_size < 0``: assuming that nbest_size is infinite and samples"
" from the all hypothesis (lattice)     using forward-filtering-and-"
"backward-sampling algorithm.  - ``alpha``: Smoothing parameter for "
"unigram sampling, and dropout probability of merge operations for   BPE-"
"dropout."
msgstr ""

#: of transformers.XLMProphetNetTokenizer:40
msgid ""
"Will be passed to the ``SentencePieceProcessor.__init__()`` method. The "
"`Python wrapper for SentencePiece "
"<https://github.com/google/sentencepiece/tree/master/python>`__ can be "
"used, among other things, to set:"
msgstr ""

#: of transformers.XLMProphetNetTokenizer:43
msgid "``enable_sampling``: Enable subword regularization."
msgstr ""

#: of transformers.XLMProphetNetTokenizer:44
msgid "``nbest_size``: Sampling parameters for unigram. Invalid for BPE-Dropout."
msgstr ""

#: of transformers.XLMProphetNetTokenizer:46
msgid "``nbest_size = {0,1}``: No sampling is performed."
msgstr ""

#: of transformers.XLMProphetNetTokenizer:47
msgid "``nbest_size > 1``: samples from the nbest_size results."
msgstr ""

#: of transformers.XLMProphetNetTokenizer:48
msgid ""
"``nbest_size < 0``: assuming that nbest_size is infinite and samples from"
" the all hypothesis (lattice) using forward-filtering-and-backward-"
"sampling algorithm."
msgstr ""

#: of transformers.XLMProphetNetTokenizer:51
msgid ""
"``alpha``: Smoothing parameter for unigram sampling, and dropout "
"probability of merge operations for BPE-dropout."
msgstr ""

#: of transformers.XLMProphetNetTokenizer:57
msgid ""
"The `SentencePiece` processor that is used for every conversion (string, "
"tokens and IDs)."
msgstr ""

#: of transformers.XLMProphetNetTokenizer
#: transformers.XLMProphetNetTokenizer.vocab_size
msgid "type"
msgstr ""

#: of transformers.XLMProphetNetTokenizer:59
msgid ":obj:`SentencePieceProcessor`"
msgstr ""

#: of transformers.XLMProphetNetTokenizer.build_inputs_with_special_tokens:1
msgid ""
"Build model inputs from a sequence or a pair of sequence for sequence "
"classification tasks by concatenating and adding special tokens. A "
"XLMProphetNet sequence has the following format:"
msgstr ""

#: of transformers.XLMProphetNetTokenizer.build_inputs_with_special_tokens:4
msgid "single sequence: ``X [SEP]``"
msgstr ""

#: of transformers.XLMProphetNetTokenizer.build_inputs_with_special_tokens:5
msgid "pair of sequences: ``A [SEP] B [SEP]``"
msgstr ""

#: of transformers.XLMProphetNetTokenizer.build_inputs_with_special_tokens:7
msgid "List of IDs to which the special tokens will be added"
msgstr ""

#: of transformers.XLMProphetNetTokenizer.build_inputs_with_special_tokens:9
#: transformers.XLMProphetNetTokenizer.create_token_type_ids_from_sequences:6
#: transformers.XLMProphetNetTokenizer.get_special_tokens_mask:6
msgid "Optional second list of IDs for sequence pairs."
msgstr ""

#: of transformers.XLMProphetNetTokenizer.build_inputs_with_special_tokens
#: transformers.XLMProphetNetTokenizer.create_token_type_ids_from_sequences
#: transformers.XLMProphetNetTokenizer.get_special_tokens_mask
#: transformers.XLMProphetNetTokenizer.get_vocab
#: transformers.XLMProphetNetTokenizer.save_vocabulary
msgid "Returns"
msgstr ""

#: of transformers.XLMProphetNetTokenizer.build_inputs_with_special_tokens:12
msgid ""
"list of `input IDs <../glossary.html#input-ids>`__ with the appropriate "
"special tokens."
msgstr ""

#: of transformers.XLMProphetNetTokenizer.build_inputs_with_special_tokens
#: transformers.XLMProphetNetTokenizer.create_token_type_ids_from_sequences
#: transformers.XLMProphetNetTokenizer.get_special_tokens_mask
#: transformers.XLMProphetNetTokenizer.get_vocab
#: transformers.XLMProphetNetTokenizer.save_vocabulary
msgid "Return type"
msgstr ""

#: of transformers.XLMProphetNetTokenizer.build_inputs_with_special_tokens:13
#: transformers.XLMProphetNetTokenizer.create_token_type_ids_from_sequences:10
#: transformers.XLMProphetNetTokenizer.get_special_tokens_mask:12
msgid ":obj:`List[int]`"
msgstr ""

#: of transformers.XLMProphetNetTokenizer.convert_tokens_to_string:1
msgid "Converts a sequence of tokens (strings for sub-words) in a single string."
msgstr ""

#: of
#: transformers.XLMProphetNetTokenizer.create_token_type_ids_from_sequences:1
msgid ""
"Create a mask from the two sequences passed to be used in a sequence-pair"
" classification task. XLMProphetNet does not make use of token type ids, "
"therefore a list of zeros is returned."
msgstr ""

#: of
#: transformers.XLMProphetNetTokenizer.create_token_type_ids_from_sequences:4
#: transformers.XLMProphetNetTokenizer.get_special_tokens_mask:4
msgid "List of IDs."
msgstr ""

#: of
#: transformers.XLMProphetNetTokenizer.create_token_type_ids_from_sequences:9
msgid "List of zeros."
msgstr ""

#: of transformers.XLMProphetNetTokenizer.get_special_tokens_mask:1
msgid ""
"Retrieve sequence ids from a token list that has no special tokens added."
" This method is called when adding special tokens using the tokenizer "
"``prepare_for_model`` method."
msgstr ""

#: of transformers.XLMProphetNetTokenizer.get_special_tokens_mask:8
msgid ""
"Whether or not the token list is already formatted with special tokens "
"for the model."
msgstr ""

#: of transformers.XLMProphetNetTokenizer.get_special_tokens_mask:11
msgid ""
"A list of integers in the range [0, 1]: 1 for a special token, 0 for a "
"sequence token."
msgstr ""

#: of transformers.XLMProphetNetTokenizer.get_vocab:1
msgid "Returns the vocabulary as a dictionary of token to index."
msgstr ""

#: of transformers.XLMProphetNetTokenizer.get_vocab:3
msgid ""
":obj:`tokenizer.get_vocab()[token]` is equivalent to "
":obj:`tokenizer.convert_tokens_to_ids(token)` when :obj:`token` is in the"
" vocab."
msgstr ""

#: of transformers.XLMProphetNetTokenizer.get_vocab:6
msgid "The vocabulary."
msgstr ""

#: of transformers.XLMProphetNetTokenizer.get_vocab:7
msgid ":obj:`Dict[str, int]`"
msgstr ""

#: of transformers.XLMProphetNetTokenizer.save_vocabulary:1
msgid "Save only the vocabulary of the tokenizer (vocabulary + added tokens)."
msgstr ""

#: of transformers.XLMProphetNetTokenizer.save_vocabulary:3
msgid ""
"This method won't save the configuration and special token mappings of "
"the tokenizer. Use "
":meth:`~transformers.PreTrainedTokenizerFast._save_pretrained` to save "
"the whole state of the tokenizer."
msgstr ""

#: of transformers.XLMProphetNetTokenizer.save_vocabulary:6
msgid "The directory in which to save the vocabulary."
msgstr ""

#: of transformers.XLMProphetNetTokenizer.save_vocabulary:8
msgid "An optional prefix to add to the named of the saved files."
msgstr ""

#: of transformers.XLMProphetNetTokenizer.save_vocabulary:11
msgid "Paths to the files saved."
msgstr ""

#: of transformers.XLMProphetNetTokenizer.save_vocabulary:12
msgid ":obj:`Tuple(str)`"
msgstr ""

#: of transformers.XLMProphetNetTokenizer.vocab_size:1
msgid "Size of the base vocabulary (without the added tokens)."
msgstr ""

#: of transformers.XLMProphetNetTokenizer.vocab_size:3
msgid ":obj:`int`"
msgstr ""

#: ../../source/model_doc/xlmprophetnet.rst:61
msgid "XLMProphetNetModel"
msgstr ""

#: of transformers.XLMProphetNetModel:1
msgid ""
"This class overrides :class:`~transformers.ProphetNetModel`. Please check"
" the superclass for the appropriate documentation alongside usage "
"examples."
msgstr ""

#: of transformers.XLMProphetNetDecoder:4 transformers.XLMProphetNetEncoder:4
#: transformers.XLMProphetNetForCausalLM:4
#: transformers.XLMProphetNetForConditionalGeneration:4
#: transformers.XLMProphetNetModel:4
msgid "Example::"
msgstr ""

#: ../../source/model_doc/xlmprophetnet.rst:67
msgid "XLMProphetNetEncoder"
msgstr ""

#: of transformers.XLMProphetNetEncoder:1
msgid ""
"This class overrides :class:`~transformers.ProphetNetEncoder`. Please "
"check the superclass for the appropriate documentation alongside usage "
"examples."
msgstr ""

#: ../../source/model_doc/xlmprophetnet.rst:73
msgid "XLMProphetNetDecoder"
msgstr ""

#: of transformers.XLMProphetNetDecoder:1
msgid ""
"This class overrides :class:`~transformers.ProphetNetDecoder`. Please "
"check the superclass for the appropriate documentation alongside usage "
"examples."
msgstr ""

#: ../../source/model_doc/xlmprophetnet.rst:79
msgid "XLMProphetNetForConditionalGeneration"
msgstr ""

#: of transformers.XLMProphetNetForConditionalGeneration:1
msgid ""
"This class overrides "
":class:`~transformers.ProphetNetForConditionalGeneration`. Please check "
"the superclass for the appropriate documentation alongside usage "
"examples."
msgstr ""

#: ../../source/model_doc/xlmprophetnet.rst:85
msgid "XLMProphetNetForCausalLM"
msgstr ""

#: of transformers.XLMProphetNetForCausalLM:1
msgid ""
"This class overrides :class:`~transformers.ProphetNetForCausalLM`. Please"
" check the superclass for the appropriate documentation alongside usage "
"examples."
msgstr ""

